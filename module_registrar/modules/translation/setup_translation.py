import os
import base64
import subprocess

folder_path = 'module_registrar/modules/translation'

file_data = [
    ('translation_module.py', 'aW1wb3J0IGFyZ3BhcnNlCmltcG9ydCByZXF1ZXN0cwoKZnJvbSAuLmJhc2VfbW9kdWxlIGltcG9ydCBCYXNlTW9kdWxlCmZyb20gLmRhdGFfbW9kZWxzIGltcG9ydCBNb2R1bGVDb25maWcsIFRyYW5zbGF0aW9uUmVxdWVzdApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLnRyYW5zbGF0b3IgaW1wb3J0IFNlYW1sZXNzVHJhbnNsYXRvcgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBPcHRpb25hbAoKCmNsYXNzIFRyYW5zbGF0ZU1pbmVyKEJhc2VNb2R1bGUpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBtb2R1bGVfY29uZmlnOiBPcHRpb25hbFtNb2R1bGVDb25maWddID0gTm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5jb25maWcgPSBNb2R1bGVDb25maWcoKiptb2R1bGVfY29uZmlnKQogICAgICAgIHNlbGYudHJhbnNsYXRvciA9IFNlYW1sZXNzVHJhbnNsYXRvcigpCgogICAgZGVmIHByb2Nlc3Moc2VsZiwgdXJsOiBzdHIsIHJlcXVlc3Q6IFRyYW5zbGF0aW9uUmVxdWVzdCkgLT4gQW55OgogICAgICAgICIiIlByb2Nlc3MgYSByZXF1ZXN0IG1hZGUgdG8gdGhlIG1vZHVsZS4iIiIKICAgICAgICBpZiByZXF1ZXN0LmluZmVyZW5jZV90eXBlID09ICJ0cmFuc2xhdGlvbiI6CiAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYudHJhbnNsYXRvci50cmFuc2xhdGlvbl9pbmZlcmVuY2UoaW5fZmlsZT1yZXF1ZXN0LnJlcXVlc3RfZGF0YS5pbl9maWxlLCB0YXNrX3N0cmluZz1yZXF1ZXN0LnJlcXVlc3RfZGF0YS50YXNrX3N0cmluZywgdGFyZ2V0X2xhbmd1YWdlcz1yZXF1ZXN0LnJlcXVlc3RfZGF0YS50YXJnZXRfbGFuZ3VhZ2UpCiAgICAgICAgCiAgICAgICAgcHJpbnQocmVzdWx0KQogICAgCiAgICAgICAgCiAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKCgoKZGVmIHBhcnNlX2FydWdtZW50cygpOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1rZXluYW1lIiwgdHlwZT1zdHIsIGRlZmF1bHQ9ImVkZW4uTWluZXJfMiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWhvc3QiLCB0eXBlPXN0ciwgZGVmYXVsdD0iMC4wLjAuMCIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLXBvcnQiLCB0eXBlPWludCwgZGVmYXVsdD04MDgwKQogICAgcmV0dXJuIHBhcnNlci5wYXJzZV9hcmdzKCkKCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKCiAgICBhcmdzID0gcGFyc2VfYXJ1Z21lbnRzKCkKICAgIG1pbmVyID0gVHJhbnNsYXRlTWluZXIoKQoKICAgIG1pbmVyLnN0YXJ0X21pbmVyX3NlcnZlcihhcmdzLmtleW5hbWUsIGFyZ3MuaG9zdCwgYXJncy5wb3J0KQ=='),
    ('translation.py', 'aW1wb3J0IHRvcmNoYXVkaW8KaW1wb3J0IHRvcmNoCgpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKCmZyb20gbG9ndXJ1IGltcG9ydCBsb2dnZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFVuaW9uLCBUdXBsZSwgTGlzdCwgRGljdAoKZnJvbSBtb2R1bGVfcmVnaXN0cmFyLm1vZHVsZXMudHJhbnNsYXRpb24uc2VhbWxlc3Muc3JjLnNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLnRyYW5zbGF0b3IgaW1wb3J0IFRyYW5zbGF0b3IsIE1vZGFsaXR5CmZyb20gbW9kdWxlX3JlZ2lzdHJhci5tb2R1bGVzLnRyYW5zbGF0aW9uLmRhdGFfbW9kZWxzIGltcG9ydCBUQVJSR0VUX0xBTkdVQUdFUywgVEFTS19TVFJJTkdTCgoKY2xhc3MgU2VhbWxlc3NUcmFuc2xhdG9yOgogICAgIiIiQSBjbGFzcyBmb3IgcGVyZm9ybWluZyB0cmFuc2xhdGlvbiB0YXNrcyB1c2luZyBhIHNwZWNpZmllZCBtb2RlbCBhbmQgdm9jb2Rlci4KCiAgICBBdHRyaWJ1dGVzOgogICAgICAgIG1vZGVsX25hbWUgKHN0cik6IFRoZSBuYW1lIG9mIHRoZSB0cmFuc2xhdGlvbiBtb2RlbC4KICAgICAgICB2b2NvZGVyX25hbWUgKHN0cik6IFRoZSBuYW1lIG9mIHRoZSB2b2NvZGVyLgogICAgICAgIHRyYW5zbGF0b3IgKFRyYW5zbGF0b3IpOiBUaGUgdHJhbnNsYXRvciBvYmplY3QuCiAgICAgICAgdGFyZ2V0X2xhbmd1YWdlcyAoRGljdFtzdHIsIHN0cl0pOiBBIGRpY3Rpb25hcnkgbWFwcGluZyBsYW5ndWFnZSBuYW1lcyB0byBsYW5ndWFnZSBjb2Rlcy4KICAgICAgICB0YXNrX3N0cmluZ3MgKERpY3Rbc3RyLCBzdHJdKTogQSBkaWN0aW9uYXJ5IG1hcHBpbmcgdGFzayBzdHJpbmdzIHRvIGFiYnJldmlhdGlvbnMuCgogICAgQXJnczoKICAgICAgICBpbl9maWxlIChVbmlvbltzdHIsIFBhdGhdKTogVGhlIGlucHV0IGZpbGUgZm9yIHRyYW5zbGF0aW9uLgogICAgICAgIHRhc2tfc3RyaW5nIChzdHIpOiBUaGUgdHlwZSBvZiB0cmFuc2xhdGlvbiB0YXNrLgogICAgICAgIHRhcmdldF9sYW5ndWFnZXMgKExpc3Rbc3RyXSk6IFRoZSB0YXJnZXQgbGFuZ3VhZ2VzIGZvciB0cmFuc2xhdGlvbi4KCiAgICBSZXR1cm5zOgogICAgICAgIFR1cGxlW1BhdGgsIFBhdGhdIHwgTm9uZTogQSB0dXBsZSBjb250YWluaW5nIHRoZSBwYXRocyB0byB0aGUgdHJhbnNsYXRlZCB0ZXh0IGFuZCBhdWRpbyBmaWxlcywgb3IgTm9uZSBpZiB0cmFuc2xhdGlvbiBmYWlscy4KICAgICIiIgoKICAgIG1vZGVsX25hbWU6IHN0cgogICAgdm9jb2Rlcl9uYW1lOiBzdHIKICAgIHRyYW5zbGF0b3I6IFRyYW5zbGF0b3IKICAgIHRhcmdldF9sYW5ndWFnZXM6IERpY3Rbc3RyLCBzdHJdCiAgICB0YXNrX3N0cmluZ3M6IERpY3Rbc3RyLCBzdHJdCgogICAgZGVmIF9faW5pdF9fKHNlbGYpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgSW5pdGlhbGl6ZXMgdGhlIFNlYW1sZXNzVHJhbnNsYXRvciBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIG1vZGVsIGFuZCB2b2NvZGVyIG5hbWVzLAogICAgICAgIGFuZCBjcmVhdGVzIGEgdHJhbnNsYXRvciBvYmplY3QgdXNpbmcgdGhlIHNwZWNpZmllZCBtb2RlbCBhbmQgdm9jb2Rlci4gVGhlIHRyYW5zbGF0b3IKICAgICAgICBvYmplY3QgaXMgY3JlYXRlZCB3aXRoIHRoZSBkZXZpY2Ugc2V0IHRvICJjdWRhOjAiIGFuZCB0aGUgZGF0YSB0eXBlIHNldCB0byAidG9yY2guZmxvYXQxNiIuCiAgICAgICAgVGhlIHRhcmdldF9sYW5ndWFnZXMgZGljdGlvbmFyeSBtYXBzIGxhbmd1YWdlIG5hbWVzIHRvIGxhbmd1YWdlIGNvZGVzLCBhbmQgdGhlIHRhc2tfc3RyaW5ncwogICAgICAgIGRpY3Rpb25hcnkgbWFwcyB0YXNrIHN0cmluZ3MgdG8gYWJicmV2aWF0aW9ucy4KICAgICAgICAiIiIKICAgICAgICBzZWxmLm1vZGVsX25hbWUgPSAic2VhbWxlc3NNNFRfdjJfbGFyZ2UiCiAgICAgICAgc2VsZi52b2NvZGVyX25hbWUgPSAoCiAgICAgICAgICAgICJ2b2NvZGVyX3YyIgogICAgICAgICAgICBpZiBzZWxmLm1vZGVsX25hbWUgPT0gInNlYW1sZXNzTTRUX3YyX2xhcmdlIgogICAgICAgICAgICBlbHNlICJ2b2NvZGVyXzM2bGFuZ3MiCiAgICAgICAgKQoKICAgICAgICBzZWxmLnRyYW5zbGF0b3IgPSBUcmFuc2xhdG9yKAogICAgICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ9c2VsZi5tb2RlbF9uYW1lLAogICAgICAgICAgICB2b2NvZGVyX25hbWVfb3JfY2FyZD1zZWxmLnZvY29kZXJfbmFtZSwKICAgICAgICAgICAgZGV2aWNlPXRvcmNoLmRldmljZShkZXZpY2U9ImN1ZGE6MCIpLAogICAgICAgICAgICBkdHlwZT10b3JjaC5mbG9hdDE2LAogICAgICAgICkKICAgICAgICAKCiAgICBkZWYgdHJhbnNsYXRpb25faW5mZXJlbmNlKAogICAgICAgIHNlbGYsCiAgICAgICAgaW5fZmlsZTogVW5pb25bc3RyLCBQYXRoXSwKICAgICAgICB0YXNrX3N0cmluZzogc3RyID0gInMyc3QiLAogICAgICAgIHRhcmdldF9sYW5ndWFnZXM6IExpc3Rbc3RyXSA9IFsiZW5nIl0sCiAgICApIC0+IFR1cGxlW1BhdGgsIFBhdGhdIHwgTm9uZToKICAgICAgICAiIiIKICAgICAgICBQZXJmb3JtIHRyYW5zbGF0aW9uIGluZmVyZW5jZSBvbiB0aGUgZ2l2ZW4gaW5wdXQgZmlsZS4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgaW5fZmlsZSAoVW5pb25bc3RyLCBQYXRoXSk6IFRoZSBwYXRoIHRvIHRoZSBpbnB1dCBmaWxlLgogICAgICAgICAgICB0YXNrX3N0cmluZyAoc3RyLCBvcHRpb25hbCk6IFRoZSB0YXNrIHN0cmluZy4gRGVmYXVsdHMgdG8gInMyc3QiLgogICAgICAgICAgICB0YXJnZXRfbGFuZ3VhZ2VzIChMaXN0W3N0cl0sIG9wdGlvbmFsKTogVGhlIGxpc3Qgb2YgdGFyZ2V0IGxhbmd1YWdlcy4gRGVmYXVsdHMgdG8gWyJlbmciXS4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgVHVwbGVbUGF0aCwgUGF0aF0gfCBOb25lOiBBIHR1cGxlIGNvbnRhaW5pbmcgdGhlIGFic29sdXRlIHBhdGhzIHRvIHRoZSBvdXRwdXQgdGV4dCBmaWxlIGFuZCBvdXRwdXQgYXVkaW8gZmlsZSwgb3IgTm9uZSBpZiB0aGUgaW5wdXQgZmlsZSBpcyBub3QgZm91bmQuCgogICAgICAgIFJhaXNlczoKICAgICAgICAgICAgRmlsZU5vdEZvdW5kRXJyb3I6IElmIHRoZSBpbnB1dCBmaWxlIGlzIG5vdCBmb3VuZC4KICAgICAgICAgICAgVmFsdWVFcnJvcjogSWYgdGhlIHRhc2sgc3RyaW5nIG9yIHRhcmdldCBsYW5ndWFnZSBpcyBpbnZhbGlkLgoKICAgICAgICAiIiIKCiAgICAgICAgaWYgbm90IFBhdGgoaW5fZmlsZSkuZXhpc3RzKCk6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkZpbGUge2luX2ZpbGV9IG5vdCBmb3VuZCIpCiAgICAgICAgICAgIHJhaXNlIEZpbGVOb3RGb3VuZEVycm9yKGYiRmlsZSB7aW5fZmlsZX0gbm90IGZvdW5kIikKCiAgICAgICAgaW5wdXRfZmlsZSA9IFBhdGgoaW5fZmlsZSkKICAgICAgICBvdXRwdXRfdGV4dCA9IFBhdGgoZiJtb2RlbC9vdXRwdXQve2lucHV0X2ZpbGUuc3RlbX0udHh0IikKICAgICAgICBvdXRwdXRfYXVkaW8gPSBQYXRoKGYibW9kZWwvb3V0cHV0L3tpbnB1dF9maWxlLnN0ZW19LndhdiIpCgogICAgICAgIHRhc2tfc3RyOiBzdHIgPSBzZWxmLnRhc2tfc3RyaW5nc1t0YXNrX3N0cmluZ10KICAgICAgICBpZiBub3QgdGFza19zdHI6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiSW52YWxpZCB0YXNrIHN0cmluZyIpCiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkludmFsaWQgdGFzayBzdHJpbmciKQoKICAgICAgICBmb3IgdGd0X2xhbmcgaW4gdGFyZ2V0X2xhbmd1YWdlczoKCiAgICAgICAgICAgIHRndF9sYW5nOiBzdHIgPSBzZWxmLnRhcmdldF9sYW5ndWFnZXNbdGd0X2xhbmddCiAgICAgICAgICAgIGlmIG5vdCB0Z3RfbGFuZzoKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiSW52YWxpZCB0YXJnZXQgbGFuZ3VhZ2UiKQogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiSW52YWxpZCB0YXJnZXQgbGFuZ3VhZ2UiKQoKICAgICAgICAgICAgdGV4dF9vdXRwdXQsIHNwZWVjaF9vdXRwdXQgPSBzZWxmLnRyYW5zbGF0b3IucHJlZGljdCgKICAgICAgICAgICAgICAgIGlucHV0PXN0cihvYmplY3Q9aW5fZmlsZSksCiAgICAgICAgICAgICAgICB0YXNrX3N0cj10YXNrX3N0ciwKICAgICAgICAgICAgICAgIHRndF9sYW5nPXRndF9sYW5nLAogICAgICAgICAgICApCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVHJhbnNsYXRlZCB0ZXh0IGluIHt0Z3RfbGFuZ306IHt0ZXh0X291dHB1dFswXX0iKQoKICAgICAgICAgICAgaWYgc3BlZWNoX291dHB1dDoKICAgICAgICAgICAgICAgIHRvcmNoYXVkaW8uc2F2ZSgKICAgICAgICAgICAgICAgICAgICB1cmk9b3V0cHV0X2F1ZGlvLAogICAgICAgICAgICAgICAgICAgIHNyYz1zcGVlY2hfb3V0cHV0LmF1ZGlvX3dhdnNbMF1bMF0udG8odG9yY2guZmxvYXQzMikuY3B1KCksCiAgICAgICAgICAgICAgICAgICAgc2FtcGxlX3JhdGU9c3BlZWNoX291dHB1dC5zYW1wbGVfcmF0ZSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgaWYgdGV4dF9vdXRwdXQ6CiAgICAgICAgICAgICAgICBvdXRwdXRfdGV4dC53cml0ZV90ZXh0KAogICAgICAgICAgICAgICAgICAgIGRhdGE9c3RyKG9iamVjdD10ZXh0X291dHB1dFswXSksIGVuY29kaW5nPSJ1dGYtOCIKICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJUcmFuc2xhdGVkIHRhcmdldCBmaWxlIikKCiAgICAgICAgICAgIHJldHVybiBvdXRwdXRfdGV4dC5hYnNvbHV0ZSgpLCBvdXRwdXRfYXVkaW8uYWJzb2x1dGUoKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICB0cmFuc2xhdG9yID0gVHJhbnNsYXRvcigKICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ9InNlYW1sZXNzTTRUX1YyX2xhcmdlIiwKICAgICAgICB2b2NvZGVyX25hbWVfb3JfY2FyZD0idm9jb2Rlcl8zNmxhbmdzIiwKICAgICAgICBkZXZpY2U9InRvcmNoLmRldmljZShkZXZpY2U9J2N1ZGE6MCcpIiwKICAgICAgICB0ZXh0X3Rva2VuaXplcj0ic2VudGVuY2VwaWVjZSIsCiAgICAgICAgYXBwbHlfbWludG94PUZhbHNlLAogICAgICAgIGR0eXBlPXRvcmNoLmZsb2F0MTYsCiAgICAgICAgaW5wdXRfbW9kYWxpdHk9InRleHQiLAogICAgICAgIG91dHB1dF9tb2RhbGl0eT0idGV4dCIsCiAgICApLnRyYW5zbGF0b3IudHJhbnNsYXRpb25faW5mZXJlbmNlKGluX2ZpbGU9Im1vZHVsZV9yZWdpc3RyYXIvbW9kdWxlcy90cmFuc2xhdGlvbi9pbi90ZXN0LndhdiIpCiAgICA='),
    ('__init__.py', ''),
    ('data_models.py', 'ZnJvbSBweWRhbnRpYyBpbXBvcnQgQmFzZU1vZGVsCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBVbmlvbiwgT3B0aW9uYWwsIEFueQpmcm9tIG1vZHVsZV9yZWdpc3RyYXIuZGF0YV9tb2RlbHMgaW1wb3J0IE1pbmVyUmVxdWVzdApmcm9tIG1vZHVsZV9yZWdpc3RyYXIubW9kdWxlcy50cmFuc2xhdGlvbi50cmFuc2xhdGlvbiBpbXBvcnQgTW9kYWxpdHkKCmltcG9ydCB0b3JjaAoKZnJvbSBlbnVtIGltcG9ydCBFbnVtCgoKY2xhc3MgVEFTS19TVFJJTkdTKEVudW0pOgogICAgc3BlZWNoMnRleHQgPSAiczJ0dCIKICAgIHNwZWVjaDJzcGVlY2ggPSAiczJzdCIKICAgIGF1dG9fc3BlZWNoX3JlY29nbml0aW9uID0gImFzciIKICAgIHRleHQyc3BlZWNoID0gInQyc3QiCiAgICB0ZXh0MnRleHQgPSAidDJ0dCIKCgpjbGFzcyBUQVJSR0VUX0xBTkdVQUdFUyhFbnVtKToKICAgIEFmcmlrYWFucyA9ICJhZiIKICAgIEFtaGFyaWMgPSAiYW0iCiAgICBBcmFiaWMgPSAiYXIiCiAgICBBc3R1cmlhbiA9ICJhc3QiCiAgICBBemVyYmFpamFuaSA9ICJheiIKICAgIEJhc2hraXIgPSAiYmEiCiAgICBCZWxhcnVzaWFuID0gImJlIgogICAgQnVsZ2FyaWFuID0gImJnIgogICAgQmVuZ2FsaSA9ICJibiIKICAgIEJyZXRvbiA9ICJiciIKICAgIEJvc25pYW4gPSAiYnMiCiAgICBDYXRhbGFuVmFsZW5jaWEgPSAiY2EiCiAgICBDZWJ1YW5vID0gImNlYiIKICAgIEN6ZWNoID0gImNzIgogICAgV2Vsc2ggPSAiY3kiCiAgICBEYW5pc2ggPSAiZGEiCiAgICBHZXJtYW4gPSAiZGUiCiAgICBHcmVlZWsgPSAiZWwiCiAgICBFbmdsaXNoID0gImVuIgogICAgU3BhbmlzaCA9ICJlcyIKICAgIEVzdG9uaWFuID0gImV0IgogICAgUGVyc2lhbiA9ICJmYSIKICAgIEZ1bGFoID0gImZmIgogICAgRmlubmlzaCA9ICJmaSIKICAgIEZyZW5jaCA9ICJmciIKICAgIFdlc3Rlcm5GcmlzaWEgPSAiZnkiCiAgICBJcmlzaCA9ICJnYSIKICAgIEdhZWxpY19TY290dGlzaCA9ICJnZCIKICAgIEdhbGljaWFuID0gImdsIgogICAgR3VqYXJhdGkgPSAiZ3UiCiAgICBIYXVzYSA9ICJoYSIKICAgIEhlYnJldyA9ICJoZSIKICAgIEhpbmRpID0gImhpIgogICAgQ3JvYXRpYW4gPSAiaHIiCiAgICBIYWl0aWFuX0NyZW9sZSA9ICJodCIKICAgIEh1bmdhcmlhbiA9ICJodSIKICAgIEFybWVuaWFuID0gImh5IgogICAgSW5kb25lc2lhbiA9ICJpZCIKICAgIElnYm8gPSAiaWciCiAgICBJbG9rbyA9ICJpbG8iCiAgICBJY2VsYW5kaWMgPSAiaXMiCiAgICBJdGFsaWFuID0gIml0IgogICAgSmFwYW5lc2UgPSAiamEiCiAgICBKYXZhbmVzZSA9ICJqdiIKICAgIEdlb3JnaWFuID0gImthIgogICAgS2F6YWtoID0gImtrIgogICAgQ2VudHJhbEtobWUgPSAia20iCiAgICBLYW5uYWRhID0gImtuIgogICAgS29yZWFuID0gImtvIgogICAgTHV4ZW1ib3VyZ2lzaCA9ICJsYiIKICAgIEdhbmRhID0gImxnIgogICAgTGluZ2FsYSA9ICJsbiIKICAgIExhbyA9ICJsbyIKICAgIExpdGh1YW5pYW4gPSAibHQiCiAgICBMYXR2aWFuID0gImx2IgogICAgTWFsYWdhc3kgPSAibWciCiAgICBNYWNlZG9uaWFuID0gIm1rIgogICAgTWFsYXlhbGFtID0gIm1sIgogICAgTW9uZ29saWFuID0gIm1uIgogICAgTWFyYXRoaSA9ICJtciIKICAgIE1hbGF5ID0gIm1zIgogICAgQnVybWVzZSA9ICJteSIKICAgIE5lcGFsaSA9ICJuZSIKICAgIER1dGNoX0ZsZW1pc2ggPSAibmwiCiAgICBOb3J3ZWdpYW4gPSAibm8iCiAgICBOb3J0aGVyblNvdGggPSAibnMiCiAgICBPY2NpdGFuID0gIm9jIgogICAgT3JpeWEgPSAib3IiCiAgICBQYW5qYWJpID0gInBhIgogICAgUG9saXNoID0gInBsIgogICAgUHVzaHRvID0gInBzIgogICAgUG9ydHVndWVzZSA9ICJwdCIKICAgIFJvbWFuaWFuID0gInJvIgogICAgUnVzc2lhbiA9ICJydSIKICAgIFNpbmRoaSA9ICJzZCIKICAgIFNpbmhhbGEgPSAic2kiCiAgICBTbG92YWsgPSAic2siCiAgICBTbG92ZW5pYW4gPSAic2wiCiAgICBTb21hbGkgPSAic28iCiAgICBBbGJhbmlhbiA9ICJzcSIKICAgIFNlcmJpYW4gPSAic3IiCiAgICBTd2F0aSA9ICJzcyIKICAgIFN1bmRhbmVzZSA9ICJzdSIKICAgIFN3ZWRpc2ggPSAic3YiCiAgICBTd2FoaWxpID0gInN3IgogICAgVGFtaWwgPSAidGEiCiAgICBUaGFpID0gInRoIgogICAgVGFnYWxvZyA9ICJ0bCIKICAgIFRzd2FuYSA9ICJ0biIKICAgIFR1cmtpc2ggPSAidHIiCiAgICBVa3JhaW5pYW4gPSAidWsiCiAgICBVcmR1ID0gInVyIgogICAgVXpiZWsgPSAidXoiCiAgICBWaWV0bmFtZXNlID0gInZpIgogICAgV29sb2YgPSAid28iCiAgICBYaG9zYSA9ICJ4aCIKICAgIFlpZGRpc2ggPSAieWkiCiAgICBZb3J1YmEgPSAieW8iCiAgICBDaGluZXNlID0gInpoIgogICAgWnVsdSA9ICJ6dSIKICAgIAoKY2xhc3MgTW9kdWxlQ29uZmlnKEJhc2VNb2RlbCk6CiAgICBtb2RlbF9uYW1lX29yX2NhcmQ6IFVuaW9uW3N0ciwgQW55XSA9ICJzZWFtbGVzc000VF9WMl9sYXJnZSIKICAgIHZvY29kZXJfbmFtZTogc3RyID0gInZvY29kZXJfdjIiIGlmIG1vZGVsX25hbWVfb3JfY2FyZCA9PSAic2VhbWxlc3NNNFRfVjJfbGFyZ2UiIGVsc2UgInZvY29kZXJfMzZsYW5ncyIKICAgIGRldmljZTogdG9yY2guZGV2aWNlID0gdG9yY2guZGV2aWNlKGRldmljZT0iY3VkYTowIikKICAgIHRleHRfdG9rZW5pemVyOiBzdHIgPSBtb2RlbF9uYW1lX29yX2NhcmQKICAgIGFwcGx5X21pbnRveDogYm9vbCA9IFRydWUsCiAgICBkdHlwZTogVW5pb25bdG9yY2guZmxvYXQxNiwgdG9yY2guZmxvYXQzMl0gPSB0b3JjaC5mbG9hdDE2LAogICAgaW5wdXRfbW9kYWxpdHk6IE9wdGlvbmFsW01vZGFsaXR5XSA9IE5vbmUsCiAgICBvdXRwdXRfbW9kYWxpdHk6IE9wdGlvbmFsW01vZGFsaXR5XSA9IE5vbmUKCgpjbGFzcyBSZXF1ZXN0RGF0YShCYXNlTW9kZWwpOgogICAgaW5wdXQ6IHN0cgogICAgdGFza19zdHJpbmc6IHN0cgogICAgdGFyZ2V0X2xhbmd1YWdlOiBzdHIKICAgIAoKY2xhc3MgVHJhbnNsYXRpb25SZXF1ZXN0KE1pbmVyUmVxdWVzdCk6CiAgICByZXF1ZXN0X2RhdGE6IFJlcXVlc3REYXRhCiAgICBpbmZlcmVuY2VfdHlwZTogc3RyID0gInRyYW5zbGF0aW9uIgoKCg=='),
    ('install_seamless.py', 'aW1wb3J0IG9zCmltcG9ydCBzdWJwcm9jZXNzCgoKCg=='),
    ('install_translation.sh', 'IyFiaW4vYmFzaAoKc2V0IC1lCgpzb3VyY2UgLi8udmVudi9iaW4vYWN0aXZhdGUKCnB5dGhvbiAtbSBwaXAgaW5zdGFsbCAtLXVwZ3JhZGUgcGlwCgpwaXAgaW5zdGFsbCBzZXR1cHRvb2xzIHdoZWVsIGdudXJlYWRsaW5lCnBpcCBpbnN0YWxsIHNuZGZpbGUgZ2dtbC1weXRob24KCnN1ZG8gYXB0LWdldCBsaWJzbmRmaWxlMS1kZXYKCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tyZXNlYXJjaC9zZWFtbGVzc19jb21tdW5pY2F0aW9uLmdpdCAuL21vZHVsZV9yZWdpc3RyYXIvbW9kdWxlcy90cmFuc2xhdGlvbi9zZWFtbGVzcwoKcGlwIGluc3RhbGwgLi9tb2R1bGVfcmVnaXN0cmFyL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MKCnBpcCBpbnN0YWxsIGdpdCtodHRwczovL2dpdGh1Yi5jb20vaHVnZ2luZ2ZhY2UvdHJhbnNmb3JtZXJzIHRvcmNoIHRvcmNoYXVkaW8gdG9yY2h2aXNpb24gZmFpcnNlcTIKCm1rZGlyIC1wIC9tb2R1bGVfcmVnaXN0cmFyL21vZHVsZXMvdHJhbnNsYXRpb24vaW4KCm1rZGlyIC1wIC9tb2R1bGVfcmVnaXN0cmFyL21vZHVsZXMvdHJhbnNsYXRpb24vb3V0Cgo='),
    ('seamless/setup.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2V0dXB0b29scyBpbXBvcnQgZmluZF9wYWNrYWdlcywgc2V0dXAKCnNldHVwKAogICAgbmFtZT0ic2VhbWxlc3NfY29tbXVuaWNhdGlvbiIsCiAgICB2ZXJzaW9uPSIxLjAuMCIsCiAgICBwYWNrYWdlcz1maW5kX3BhY2thZ2VzKHdoZXJlPSJzcmMiKSwKICAgIHBhY2thZ2VfZGlyPXsiIjogInNyYyJ9LAogICAgcGFja2FnZV9kYXRhPXsiIjogWyJweS50eXBlZCIsICJjYXJkcy8qLnlhbWwiXX0sCiAgICBkZXNjcmlwdGlvbj0iU2VhbWxlc3NNNFQgLS0gTWFzc2l2ZWx5IE11bHRpbGluZ3VhbCAmIE11bHRpbW9kYWwgTWFjaGluZSBUcmFuc2xhdGlvbiBNb2RlbCIsCiAgICBsb25nX2Rlc2NyaXB0aW9uPW9wZW4oIlJFQURNRS5tZCIsIGVuY29kaW5nPSJ1dGYtOCIpLnJlYWQoKSwKICAgIGxvbmdfZGVzY3JpcHRpb25fY29udGVudF90eXBlPSJ0ZXh0L21hcmtkb3duIiwKICAgIHJlYWRtZT0iUkVBRE1FLm1kIiwKICAgIHB5dGhvbl9yZXF1aXJlcz0iPj0zLjgiLAogICAgYXV0aG9yPSJGdW5kYW1lbnRhbCBBSSBSZXNlYXJjaCAoRkFJUikgYXQgTWV0YSIsCiAgICB1cmw9Imh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va3Jlc2VhcmNoL3NlYW1sZXNzX2NvbW11bmljYXRpb24iLAogICAgbGljZW5zZT0iQ3JlYXRpdmUgQ29tbW9ucyIsCiAgICBpbnN0YWxsX3JlcXVpcmVzPVsKICAgICAgICAiZGF0YXNldHM9PTIuMTguMCIsCiAgICAgICAgImZhaXJzZXEyPT0wLjIuKiIsCiAgICAgICAgImZpcmUiLAogICAgICAgICJsaWJyb3NhIiwKICAgICAgICAib3BlbmFpLXdoaXNwZXIiLAogICAgICAgICJzaW11bGV2YWx+PTEuMS4zIiwKICAgICAgICAic29uYXItc3BhY2U9PTAuMi4qIiwKICAgICAgICAic291bmRmaWxlIiwKICAgICAgICAic2NpcHkiLAogICAgICAgICJ0b3JjaGF1ZGlvIiwKICAgICAgICAidHFkbSIsCiAgICBdLAogICAgZW50cnlfcG9pbnRzPXsKICAgICAgICAiY29uc29sZV9zY3JpcHRzIjogWwogICAgICAgICAgICAibTR0X2V2YWx1YXRlPXNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLm00dC5ldmFsdWF0ZS5ldmFsdWF0ZTptYWluIiwKICAgICAgICAgICAgIm00dF9wcmVkaWN0PXNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLm00dC5wcmVkaWN0LnByZWRpY3Q6bWFpbiIsCiAgICAgICAgICAgICJtNHRfZmluZXR1bmU9c2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkubTR0LmZpbmV0dW5lLmZpbmV0dW5lOm1haW4iLAogICAgICAgICAgICAibTR0X3ByZXBhcmVfZGF0YXNldD1zZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5tNHQuZmluZXR1bmUuZGF0YXNldDptYWluIiwKICAgICAgICAgICAgIm00dF9hdWRpb190b191bml0cz1zZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5tNHQuYXVkaW9fdG9fdW5pdHMuYXVkaW9fdG9fdW5pdHM6bWFpbiIsCiAgICAgICAgICAgICJleHByZXNzaXZpdHlfZXZhbHVhdGU9c2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkuZXhwcmVzc2l2aXR5LmV2YWx1YXRlLmV2YWx1YXRlOm1haW4iLAogICAgICAgICAgICAiZXhwcmVzc2l2aXR5X3ByZWRpY3Q9c2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkuZXhwcmVzc2l2aXR5LnByZWRpY3QucHJlZGljdDptYWluIiwKICAgICAgICAgICAgInN0cmVhbWluZ19ldmFsdWF0ZT1zZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5zdHJlYW1pbmcuZXZhbHVhdGU6bWFpbiIsCiAgICAgICAgXSwKICAgIH0sCiAgICBpbmNsdWRlX3BhY2thZ2VfZGF0YT1UcnVlLAopCg=='),
    ('seamless/tests/conftest.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCB0ZW1wZmlsZQpmcm9tIGFyZ3BhcnNlIGltcG9ydCBBcmd1bWVudFR5cGVFcnJvcgpmcm9tIHR5cGluZyBpbXBvcnQgY2FzdApmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCB1cmxyZXRyaWV2ZQoKaW1wb3J0IHB5dGVzdAppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5kYXRhLmF1ZGlvIGltcG9ydCBBdWRpb0RlY29kZXIsIEF1ZGlvRGVjb2Rlck91dHB1dApmcm9tIGZhaXJzZXEyLm1lbW9yeSBpbXBvcnQgTWVtb3J5QmxvY2sKZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERldmljZQoKaW1wb3J0IHRlc3RzLmNvbW1vbgoKCmRlZiBwYXJzZV9kZXZpY2VfYXJnKHZhbHVlOiBzdHIpIC0+IERldmljZToKICAgIHRyeToKICAgICAgICByZXR1cm4gRGV2aWNlKHZhbHVlKQogICAgZXhjZXB0IFJ1bnRpbWVFcnJvcjoKICAgICAgICByYWlzZSBBcmd1bWVudFR5cGVFcnJvcihmIid7dmFsdWV9JyBpcyBub3QgYSB2YWxpZCBkZXZpY2UgbmFtZS4iKQoKCmRlZiBweXRlc3RfYWRkb3B0aW9uKHBhcnNlcjogcHl0ZXN0LlBhcnNlcikgLT4gTm9uZToKICAgICMgZm10OiBvZmYKICAgIHBhcnNlci5hZGRvcHRpb24oCiAgICAgICAgIi0tZGV2aWNlIiwgZGVmYXVsdD0iY3B1IiwgdHlwZT1wYXJzZV9kZXZpY2VfYXJnLAogICAgICAgIGhlbHA9ImRldmljZSBvbiB3aGljaCB0byBydW4gdGVzdHMgKGRlZmF1bHQ6ICUoZGVmYXVsdClzKSIsCiAgICApCiAgICAjIGZtdDogb24KCgpkZWYgcHl0ZXN0X3Nlc3Npb25zdGFydChzZXNzaW9uOiBweXRlc3QuU2Vzc2lvbikgLT4gTm9uZToKICAgIHRlc3RzLmNvbW1vbi5kZXZpY2UgPSBjYXN0KERldmljZSwgc2Vzc2lvbi5jb25maWcuZ2V0b3B0aW9uKCJkZXZpY2UiKSkKCgpAcHl0ZXN0LmZpeHR1cmUoc2NvcGU9Im1vZHVsZSIpCmRlZiBleGFtcGxlX3JhdGUxNmtfYXVkaW8oKSAtPiBBdWRpb0RlY29kZXJPdXRwdXQ6CiAgICB1cmwgPSAiaHR0cHM6Ly9kbC5mYmFpcHVibGljZmlsZXMuY29tL3NlYW1sZXNzTTRUL0xKMDM3LTAxNzFfc3IxNmsud2F2IgoKICAgIGF1ZGlvX2RlY29kZXIgPSBBdWRpb0RlY29kZXIoZHR5cGU9dG9yY2guZmxvYXQzMiwgZGV2aWNlPXRlc3RzLmNvbW1vbi5kZXZpY2UpCgogICAgd2l0aCB0ZW1wZmlsZS5OYW1lZFRlbXBvcmFyeUZpbGUoKSBhcyBmOgogICAgICAgIHVybHJldHJpZXZlKHVybCwgZi5uYW1lKQogICAgICAgIHdpdGggb3BlbihmLm5hbWUsICJyYiIpIGFzIGZiOgogICAgICAgICAgICBibG9jayA9IE1lbW9yeUJsb2NrKGZiLnJlYWQoKSkKICAgICAgICBkZWNvZGVkX2F1ZGlvID0gYXVkaW9fZGVjb2RlcihibG9jaykKCiAgICByZXR1cm4gZGVjb2RlZF9hdWRpbwo='),
    ('seamless/tests/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBweXRlc3QKCnB5dGVzdC5yZWdpc3Rlcl9hc3NlcnRfcmV3cml0ZSgidGVzdHMuY29tbW9uIikK'),
    ('seamless/tests/common.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gY29udGV4dGxpYiBpbXBvcnQgY29udGV4dG1hbmFnZXIKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgR2VuZXJhdG9yLCBMaXN0LCBPcHRpb25hbCwgVW5pb24KCmltcG9ydCB0b3JjaApmcm9tIGZhaXJzZXEyLmRhdGEgaW1wb3J0IENvbGxhdGVyCmZyb20gZmFpcnNlcTIuZGF0YS5hdWRpbyBpbXBvcnQgV2F2ZWZvcm1Ub0ZiYW5rQ29udmVydGVyLCBXYXZlZm9ybVRvRmJhbmtJbnB1dApmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZQpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKCiMgVGhlIGRlZmF1bHQgZGV2aWNlIHRoYXQgdGVzdHMgc2hvdWxkIHVzZS4gTm90ZSB0aGF0IHB5dGVzdCBjYW4gY2hhbmdlIGl0IGJhc2VkCiMgb24gdGhlIHByb3ZpZGVkIGNvbW1hbmQgbGluZSBhcmd1bWVudHMuCmRldmljZSA9IERldmljZSgiY3B1IikKCgpkZWYgYXNzZXJ0X2Nsb3NlKAogICAgYTogVGVuc29yLAogICAgYjogVW5pb25bVGVuc29yLCBMaXN0W0FueV1dLAogICAgcnRvbDogT3B0aW9uYWxbZmxvYXRdID0gTm9uZSwKICAgIGF0b2w6IE9wdGlvbmFsW2Zsb2F0XSA9IE5vbmUsCikgLT4gTm9uZToKICAgICIiIkFzc2VydCB0aGF0IGBgYWBgIGFuZCBgYGJgYCBhcmUgZWxlbWVudC13aXNlIGVxdWFsIHdpdGhpbiBhIHRvbGVyYW5jZS4iIiIKICAgIGlmIG5vdCBpc2luc3RhbmNlKGIsIFRlbnNvcik6CiAgICAgICAgYiA9IHRvcmNoLnRlbnNvcihiLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1hLmR0eXBlKQoKICAgIHRvcmNoLnRlc3RpbmcuYXNzZXJ0X2Nsb3NlKGEsIGIsIHJ0b2w9cnRvbCwgYXRvbD1hdG9sKSAgIyB0eXBlOiBpZ25vcmVbYXR0ci1kZWZpbmVkXQoKCmRlZiBhc3NlcnRfZXF1YWwoYTogVGVuc29yLCBiOiBVbmlvbltUZW5zb3IsIExpc3RbQW55XV0pIC0+IE5vbmU6CiAgICAiIiJBc3NlcnQgdGhhdCBgYGFgYCBhbmQgYGBiYGAgYXJlIGVsZW1lbnQtd2lzZSBlcXVhbC4iIiIKICAgIGlmIG5vdCBpc2luc3RhbmNlKGIsIFRlbnNvcik6CiAgICAgICAgYiA9IHRvcmNoLnRlbnNvcihiLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1hLmR0eXBlKQoKICAgIHRvcmNoLnRlc3RpbmcuYXNzZXJ0X2Nsb3NlKGEsIGIsIHJ0b2w9MCwgYXRvbD0wKSAgIyB0eXBlOiBpZ25vcmVbYXR0ci1kZWZpbmVkXQoKCmRlZiBhc3NlcnRfdW5pdF9jbG9zZSgKICAgIGE6IFRlbnNvciwKICAgIGI6IFVuaW9uW1RlbnNvciwgTGlzdFtBbnldXSwKICAgIG51bV91bml0X3RvbDogaW50ID0gMSwKICAgIHBlcmNlbnRfdW5pdF90b2w6IGZsb2F0ID0gMC4wLAopIC0+IE5vbmU6CiAgICAiIiJBc3NlcnQgdHdvIHVuaXQgc2VxdWVuY2UgYXJlIGVxdWFsIHdpdGhpbiBhIHRvbGVyYW5jZSIiIgogICAgaWYgbm90IGlzaW5zdGFuY2UoYiwgVGVuc29yKToKICAgICAgICBiID0gdG9yY2gudGVuc29yKGIsIGRldmljZT1kZXZpY2UsIGR0eXBlPWEuZHR5cGUpCgogICAgYXNzZXJ0ICgKICAgICAgICBhLnNoYXBlID09IGIuc2hhcGUKICAgICksIGYiVHdvIHNoYXBlcyBhcmUgZGlmZmVyZW50LCBvbmUgaXMge2Euc2hhcGV9LCB0aGUgb3RoZXIgaXMge2Iuc2hhcGV9IgoKICAgIGlmIHBlcmNlbnRfdW5pdF90b2wgPiAwLjA6CiAgICAgICAgbnVtX3VuaXRfdG9sID0gaW50KHBlcmNlbnRfdW5pdF90b2wgKiBsZW4oYSkpCgogICAgbnVtX3VuaXRfZGlmZiA9IChhICE9IGIpLnN1bSgpCiAgICBhc3NlcnQgKAogICAgICAgIG51bV91bml0X2RpZmYgPD0gbnVtX3VuaXRfdG9sCiAgICApLCBmIlRoZSBkaWZmZXJlbmNlIGlzIGJleW9uZCB0b2xlcmFuY2UsIHtudW1fdW5pdF9kaWZmfSB1bml0cyBhcmUgZGlmZmVyZW50LCB0b2xlcmFuY2UgaXMge251bV91bml0X3RvbH0iCgoKZGVmIGhhc19ub19pbmYoYTogVGVuc29yKSAtPiBib29sOgogICAgIiIiUmV0dXJuIGBgVHJ1ZWBgIGlmIGBgYWBgIGhhcyBubyBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBpbmZpbml0ZSBlbGVtZW50LiIiIgogICAgcmV0dXJuIG5vdCB0b3JjaC5hbnkodG9yY2guaXNpbmYoYSkpCgoKZGVmIGhhc19ub19uYW4oYTogVGVuc29yKSAtPiBib29sOgogICAgIiIiUmV0dXJuIGBgVHJ1ZWBgIGlmIGBgYWBgIGhhcyBubyBOYU4gZWxlbWVudC4iIiIKICAgIHJldHVybiBub3QgdG9yY2guYW55KHRvcmNoLmlzbmFuKGEpKQoKCkBjb250ZXh0bWFuYWdlcgpkZWYgdG1wX3JuZ19zZWVkKGRldmljZTogRGV2aWNlLCBzZWVkOiBpbnQgPSAwKSAtPiBHZW5lcmF0b3JbTm9uZSwgTm9uZSwgTm9uZV06CiAgICAiIiJTZXQgYSB0ZW1wb3JhcnkgbWFudWFsIFJORyBzZWVkLgoKICAgIFRoZSBSTkcgaXMgcmVzZXQgdG8gaXRzIG9yaWdpbmFsIHN0YXRlIG9uY2UgdGhlIGJsb2NrIGlzIGV4aXRlZC4KICAgICIiIgogICAgZGV2aWNlID0gRGV2aWNlKGRldmljZSkKCiAgICBpZiBkZXZpY2UudHlwZSA9PSAiY3VkYSI6CiAgICAgICAgZGV2aWNlcyA9IFtkZXZpY2VdCiAgICBlbHNlOgogICAgICAgIGRldmljZXMgPSBbXQoKICAgIHdpdGggdG9yY2gucmFuZG9tLmZvcmtfcm5nKGRldmljZXMpOgogICAgICAgIHRvcmNoLm1hbnVhbF9zZWVkKHNlZWQpCgogICAgICAgIHlpZWxkCgoKZGVmIGdldF9kZWZhdWx0X2R0eXBlKCkgLT4gRGF0YVR5cGU6CiAgICBpZiBkZXZpY2UgPT0gRGV2aWNlKCJjcHUiKToKICAgICAgICBkdHlwZSA9IHRvcmNoLmZsb2F0MzIKICAgIGVsc2U6CiAgICAgICAgZHR5cGUgPSB0b3JjaC5mbG9hdDE2CiAgICByZXR1cm4gZHR5cGUKCgpkZWYgY29udmVydF90b19jb2xsYXRlZF9mYmFuayhhdWRpb19kaWN0OiBXYXZlZm9ybVRvRmJhbmtJbnB1dCwgZHR5cGU6IERhdGFUeXBlKSAtPiBBbnk6CiAgICBjb252ZXJ0X3RvX2ZiYW5rID0gV2F2ZWZvcm1Ub0ZiYW5rQ29udmVydGVyKAogICAgICAgIG51bV9tZWxfYmlucz04MCwKICAgICAgICB3YXZlZm9ybV9zY2FsZT0yKioxNSwKICAgICAgICBjaGFubmVsX2xhc3Q9VHJ1ZSwKICAgICAgICBzdGFuZGFyZGl6ZT1UcnVlLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApCgogICAgY29sbGF0ZXIgPSBDb2xsYXRlcihwYWRfdmFsdWU9MSkKCiAgICBmZWF0ID0gY29sbGF0ZXIoY29udmVydF90b19mYmFuayhhdWRpb19kaWN0KSlbImZiYW5rIl0KCiAgICByZXR1cm4gZmVhdAo='),
    ('seamless/tests/integration/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/tests/integration/inference/__init__.py', ''),
    ('seamless/tests/integration/inference/test_mintox.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gZmFpcnNlcTIuYXNzZXRzIGltcG9ydCBkb3dubG9hZF9tYW5hZ2VyCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5pbmZlcmVuY2UudHJhbnNsYXRvciBpbXBvcnQgVHJhbnNsYXRvcgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24udG94aWNpdHkuZXRveF9iYWRfd29yZF9jaGVja2VyIGltcG9ydCBFVE9YQmFkV29yZENoZWNrZXIKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnRveGljaXR5Lm1pbnRveCBpbXBvcnQgX2V4dHJhY3RfYmFkX3dvcmRzX3dpdGhfYmF0Y2hfaW5kaWNlcwpmcm9tIHRlc3RzLmNvbW1vbiBpbXBvcnQgZGV2aWNlLCBnZXRfZGVmYXVsdF9kdHlwZQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24udG94aWNpdHkgaW1wb3J0IGxvYWRfZXRveF9iYWRfd29yZF9jaGVja2VyCgppbXBvcnQgcHl0ZXN0CgoKQHB5dGVzdC5maXh0dXJlCmRlZiBiYWRfd29yZHNfY2hlY2tlcigpIC0+IEVUT1hCYWRXb3JkQ2hlY2tlcjoKICAgIHJldHVybiBsb2FkX2V0b3hfYmFkX3dvcmRfY2hlY2tlcigibWludG94IikKCgpkZWYgdGVzdF9taW50b3hfczJ0dChiYWRfd29yZHNfY2hlY2tlcjogRVRPWEJhZFdvcmRDaGVja2VyKToKICAgIG1vZGVsX25hbWUgPSAic2VhbWxlc3NNNFRfdjJfbGFyZ2UiCiAgICB2b2NvZGVyX25hbWUgPSAidm9jb2Rlcl92MiIKICAgIHNyY190ZXh0ID0gIlRoZSBzdHJhdGVneSBwcm92ZWQgZWZmZWN0aXZlLCBjdXR0aW5nIG9mZiB2aXRhbCBtaWxpdGFyeSBhbmQgY2l2aWxpYW4gc3VwcGxpZXMsIGFsdGhvdWdoIHRoaXMgYmxvY2thZGUgdmlvbGF0ZWQgZ2VuZXJhbGx5IGFjY2VwdGVkIGludGVybmF0aW9uYWwgbGF3IGNvZGlmaWVkIGJ5IHNldmVyYWwgaW50ZXJuYXRpb25hbCBhZ3JlZW1lbnRzIG9mIHRoZSBwYXN0IHR3byBjZW50dXJpZXMuIgogICAgc3JjX2xhbmcgPSAiZW5nIgogICAgdGd0X2xhbmcgPSAiZnJhIgogICAgdGFzayA9ICJzMnR0IgogICAgc2FtcGxlX3JhdGUgPSAxNl8wMDAKICAgIHRlc3Rfd2F2X3VyaSA9ICJodHRwczovL2RsLmZiYWlwdWJsaWNmaWxlcy5jb20vc2VhbWxlc3NNNFQvaW5mZXJlbmNlL21pbnRveC9taW50b3hfczJ0X3Rlc3RfZmlsZS53YXYiCgogICAgaW5wdXRfd2F2ID0gc3RyKGRvd25sb2FkX21hbmFnZXIuZG93bmxvYWRfY2hlY2twb2ludCh0ZXN0X3dhdl91cmksIHRlc3Rfd2F2X3VyaSkpCiAgICBkdHlwZSA9IGdldF9kZWZhdWx0X2R0eXBlKCkKCiAgICB0cmFuc2xhdG9yX3dpdGhvdXRfbWludG94ID0gVHJhbnNsYXRvcigKICAgICAgICBtb2RlbF9uYW1lLCB2b2NvZGVyX25hbWUsIGRldmljZSwgZHR5cGU9ZHR5cGUKICAgICkKICAgIHRyYW5zbGF0ZWRfdGV4dHMsIF8gPSB0cmFuc2xhdG9yX3dpdGhvdXRfbWludG94LnByZWRpY3QoCiAgICAgICAgaW5wdXQ9aW5wdXRfd2F2LAogICAgICAgIHRhc2tfc3RyPXRhc2ssCiAgICAgICAgdGd0X2xhbmc9dGd0X2xhbmcsCiAgICAgICAgc3JjX2xhbmc9c3JjX2xhbmcsCiAgICAgICAgc2FtcGxlX3JhdGU9c2FtcGxlX3JhdGUsCiAgICApCiAgICBhbGxfYmFkX3dvcmRzLCBiYXRjaF9pbmRpY2VzID0gX2V4dHJhY3RfYmFkX3dvcmRzX3dpdGhfYmF0Y2hfaW5kaWNlcygKICAgICAgICBbc3JjX3RleHRdLAogICAgICAgIFtzdHIodCkgZm9yIHQgaW4gdHJhbnNsYXRlZF90ZXh0c10sCiAgICAgICAgc3JjX2xhbmcsCiAgICAgICAgdGd0X2xhbmcsCiAgICAgICAgYmFkX3dvcmRzX2NoZWNrZXIsCiAgICApCiAgICBhc3NlcnQgYWxsX2JhZF93b3JkcyA9PSBbInZpb2zDqSIsICJWSU9Mw4kiLCAiVmlvbMOpIl0KICAgIGFzc2VydCBiYXRjaF9pbmRpY2VzID09IFswXQogICAgZGVsIHRyYW5zbGF0b3Jfd2l0aG91dF9taW50b3gKICAgIHRyYW5zbGF0b3Jfd2l0aF9taW50b3ggPSBUcmFuc2xhdG9yKAogICAgICAgIG1vZGVsX25hbWUsIHZvY29kZXJfbmFtZSwgZGV2aWNlLCBkdHlwZT1kdHlwZSwgYXBwbHlfbWludG94PVRydWUKICAgICkKICAgIHRyYW5zbGF0ZWRfdGV4dHMsIF8gPSB0cmFuc2xhdG9yX3dpdGhfbWludG94LnByZWRpY3QoCiAgICAgICAgaW5wdXQ9aW5wdXRfd2F2LAogICAgICAgIHRhc2tfc3RyPXRhc2ssCiAgICAgICAgdGd0X2xhbmc9dGd0X2xhbmcsCiAgICAgICAgc3JjX2xhbmc9c3JjX2xhbmcsCiAgICAgICAgc2FtcGxlX3JhdGU9c2FtcGxlX3JhdGUsCiAgICApCiAgICBhbGxfYmFkX3dvcmRzLCBiYXRjaF9pbmRpY2VzID0gX2V4dHJhY3RfYmFkX3dvcmRzX3dpdGhfYmF0Y2hfaW5kaWNlcygKICAgICAgICBbc3JjX3RleHRdLAogICAgICAgIFtzdHIodCkgZm9yIHQgaW4gdHJhbnNsYXRlZF90ZXh0c10sCiAgICAgICAgc3JjX2xhbmcsCiAgICAgICAgdGd0X2xhbmcsCiAgICAgICAgYmFkX3dvcmRzX2NoZWNrZXIsCiAgICApCiAgICBhc3NlcnQgYWxsX2JhZF93b3JkcyA9PSBbXQogICAgYXNzZXJ0IGJhdGNoX2luZGljZXMgPT0gW10KCgpkZWYgdGVzdF9taW50b3hfdDJ0dChiYWRfd29yZHNfY2hlY2tlcjogRVRPWEJhZFdvcmRDaGVja2VyKToKICAgIG1vZGVsX25hbWUgPSAic2VhbWxlc3NNNFRfdjJfbGFyZ2UiCiAgICB2b2NvZGVyX25hbWUgPSAidm9jb2Rlcl92MiIKICAgIHNyY190ZXh0ID0gIkkgd29uZGVyIHdoYXQgaXQnZCBiZSBsaWtlIHRvIGJlIGEgZG9mZiBwYXJlbnQuIgogICAgc3JjX2xhbmcgPSAiZW5nIgogICAgdGd0X2xhbmcgPSAiZnJhIgogICAgdGFzayA9ICJ0MnR0IgoKICAgIGR0eXBlID0gZ2V0X2RlZmF1bHRfZHR5cGUoKQoKICAgIHRyYW5zbGF0b3Jfd2l0aG91dF9taW50b3ggPSBUcmFuc2xhdG9yKAogICAgICAgIG1vZGVsX25hbWUsIHZvY29kZXJfbmFtZSwgZGV2aWNlLCBkdHlwZT1kdHlwZQogICAgKQogICAgdHJhbnNsYXRlZF90ZXh0cywgXyA9IHRyYW5zbGF0b3Jfd2l0aG91dF9taW50b3gucHJlZGljdCgKICAgICAgICBpbnB1dD1zcmNfdGV4dCwKICAgICAgICB0YXNrX3N0cj10YXNrLAogICAgICAgIHRndF9sYW5nPXRndF9sYW5nLAogICAgICAgIHNyY19sYW5nPXNyY19sYW5nLAogICAgKQogICAgYWxsX2JhZF93b3JkcywgYmF0Y2hfaW5kaWNlcyA9IF9leHRyYWN0X2JhZF93b3Jkc193aXRoX2JhdGNoX2luZGljZXMoCiAgICAgICAgW3NyY190ZXh0XSwKICAgICAgICBbc3RyKHQpIGZvciB0IGluIHRyYW5zbGF0ZWRfdGV4dHNdLAogICAgICAgIHNyY19sYW5nLAogICAgICAgIHRndF9sYW5nLAogICAgICAgIGJhZF93b3Jkc19jaGVja2VyLAogICAgKQogICAgYXNzZXJ0ICgKICAgICAgICBzdHIodHJhbnNsYXRlZF90ZXh0c1swXSkKICAgICAgICA9PSAiSmUgbWUgZGVtYW5kZSDDoCBxdW9pIMOnYSByZXNzZW1ibGVyYWl0IGQnw6p0cmUgdW4gcGFyZW50IGTDqWJpbGUuIgogICAgKQogICAgYXNzZXJ0IGFsbF9iYWRfd29yZHMgPT0gWyJkw6liaWxlIiwgIkTDiUJJTEUiLCAiRMOpYmlsZSJdCiAgICBhc3NlcnQgYmF0Y2hfaW5kaWNlcyA9PSBbMF0KICAgIGRlbCB0cmFuc2xhdG9yX3dpdGhvdXRfbWludG94CiAgICB0cmFuc2xhdG9yX3dpdGhfbWludG94ID0gVHJhbnNsYXRvcigKICAgICAgICBtb2RlbF9uYW1lLCB2b2NvZGVyX25hbWUsIGRldmljZSwgZHR5cGU9ZHR5cGUsIGFwcGx5X21pbnRveD1UcnVlCiAgICApCiAgICB0cmFuc2xhdGVkX3RleHRzLCBfID0gdHJhbnNsYXRvcl93aXRoX21pbnRveC5wcmVkaWN0KAogICAgICAgIGlucHV0PXNyY190ZXh0LAogICAgICAgIHRhc2tfc3RyPXRhc2ssCiAgICAgICAgdGd0X2xhbmc9dGd0X2xhbmcsCiAgICAgICAgc3JjX2xhbmc9c3JjX2xhbmcsCiAgICApCiAgICBhbGxfYmFkX3dvcmRzLCBiYXRjaF9pbmRpY2VzID0gX2V4dHJhY3RfYmFkX3dvcmRzX3dpdGhfYmF0Y2hfaW5kaWNlcygKICAgICAgICBbc3JjX3RleHRdLAogICAgICAgIFtzdHIodCkgZm9yIHQgaW4gdHJhbnNsYXRlZF90ZXh0c10sCiAgICAgICAgc3JjX2xhbmcsCiAgICAgICAgdGd0X2xhbmcsCiAgICAgICAgYmFkX3dvcmRzX2NoZWNrZXIsCiAgICApCiAgICBhc3NlcnQgKAogICAgICAgIHN0cih0cmFuc2xhdGVkX3RleHRzWzBdKQogICAgICAgID09ICJKZSBtZSBkZW1hbmRlIMOgIHF1b2kgw6dhIHJlc3NlbWJsZXJhaXQgZCfDqnRyZSB1biBwYXJlbnQgZG9mZi4iCiAgICApCiAgICBhc3NlcnQgYWxsX2JhZF93b3JkcyA9PSBbXQogICAgYXNzZXJ0IGJhdGNoX2luZGljZXMgPT0gW10K'),
    ('seamless/tests/integration/inference/test_translator.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBGaW5hbAoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZSBpbXBvcnQgVHJhbnNsYXRvcgpmcm9tIHRlc3RzLmNvbW1vbiBpbXBvcnQgZGV2aWNlLCBnZXRfZGVmYXVsdF9kdHlwZQoKIyBmbXQ6IG9mZgpFTkdfU0VOVEVOQ0U6ICAgICBGaW5hbCA9ICJPbiBNb25kYXksIHNjaWVudGlzdHMgZnJvbSB0aGUgU3RhbmZvcmQgVW5pdmVyc2l0eSBTY2hvb2wgb2YgTWVkaWNpbmUgYW5ub3VuY2VkIHRoZSBpbnZlbnRpb24gb2YgYSBuZXcgZGlhZ25vc3RpYyB0b29sIHRoYXQgY2FuIHNvcnQgY2VsbHMgYnkgdHlwZTogYSB0aW55IHByaW50YWJsZSBjaGlwIHRoYXQgY2FuIGJlIG1hbnVmYWN0dXJlZCB1c2luZyBzdGFuZGFyZCBpbmtqZXQgcHJpbnRlcnMgZm9yIHBvc3NpYmx5IGFib3V0IG9uZSBVLlMuIGNlbnQgZWFjaC4iCkRFVV9TRU5URU5DRTogICAgIEZpbmFsID0gIkFtIE1vbnRhZyBrw7xuZGlndGVuIFdpc3NlbnNjaGFmdGxlciBkZXIgU3RhbmZvcmQgVW5pdmVyc2l0eSBTY2hvb2wgb2YgTWVkaWNpbmUgZGllIEVyZmluZHVuZyBlaW5lcyBuZXVlbiBEaWFnbm9zZXdlcmt6ZXVncyBhbiwgZGFzIFplbGxlbiBuYWNoIFR5cCBzb3J0aWVyZW4ga2FubjogZWluIHdpbnppZ2VyIGRydWNrYmFyZXIgQ2hpcCwgZGVyIG1pdCBTdGFuZGFyZC1UaW50ZW5zdHJhaGxkcnVja2VybiBmw7xyIGV0d2EgZWluZW4gVVMtQ2VudCBoZXJnZXN0ZWxsdCB3ZXJkZW4ga2Fubi4iCkRFVV9TRU5URU5DRV9WMjogIEZpbmFsID0gIkFtIE1vbnRhZyBrw7xuZGlndGVuIFdpc3NlbnNjaGFmdGxlciBkZXIgU3RhbmZvcmQgVW5pdmVyc2l0eSBTY2hvb2wgb2YgTWVkaWNpbmUgZGllIEVyZmluZHVuZyBlaW5lcyBuZXVlbiBkaWFnbm9zdGlzY2hlbiBXZXJremV1Z3MgYW4sIGRhcyBaZWxsZW4gbmFjaCBUeXAgc29ydGllcmVuIGthbm46IGVpbiB3aW56aWdlciBkcnVja2JhcmVyIENoaXAsIGRlciBtaXQgU3RhbmRhcmQtVGludGVuc3RyYWhsZHJ1Y2tlciBmw7xyIG3DtmdsaWNoZXJ3ZWlzZSBldHdhIGVpbmVuIFVTLUNlbnQgcHJvIFN0w7xjayBoZXJnZXN0ZWxsdCB3ZXJkZW4ga2Fubi4iCiMgZm10OiBvbgoKCmRlZiB0ZXN0X3NlYW1sZXNzX200dF9sYXJnZV90MnR0KCkgLT4gTm9uZToKICAgIG1vZGVsX25hbWUgPSAic2VhbWxlc3NNNFRfbGFyZ2UiCiAgICBzcmNfbGFuZyA9ICJlbmciCiAgICB0Z3RfbGFuZyA9ICJkZXUiCgogICAgZHR5cGUgPSBnZXRfZGVmYXVsdF9kdHlwZSgpCgogICAgdHJhbnNsYXRvciA9IFRyYW5zbGF0b3IobW9kZWxfbmFtZSwgInZvY29kZXJfMzZsYW5ncyIsIGRldmljZSwgZHR5cGU9ZHR5cGUpCiAgICB0ZXh0X291dHB1dCwgXyA9IHRyYW5zbGF0b3IucHJlZGljdCgKICAgICAgICBFTkdfU0VOVEVOQ0UsCiAgICAgICAgInQydHQiLAogICAgICAgIHRndF9sYW5nLAogICAgICAgIHNyY19sYW5nPXNyY19sYW5nLAogICAgKQogICAgYXNzZXJ0IHRleHRfb3V0cHV0WzBdID09IERFVV9TRU5URU5DRSwgZiIne3RleHRfb3V0cHV0WzBdfScgaXMgbm90ICd7REVVX1NFTlRFTkNFfSciCgoKZGVmIHRlc3Rfc2VhbWxlc3NfbTR0X3YyX2xhcmdlX3QydHQoKSAtPiBOb25lOgogICAgbW9kZWxfbmFtZSA9ICJzZWFtbGVzc000VF92Ml9sYXJnZSIKICAgIHNyY19sYW5nID0gImVuZyIKICAgIHRndF9sYW5nID0gImRldSIKCiAgICBkdHlwZSA9IGdldF9kZWZhdWx0X2R0eXBlKCkKCiAgICB0cmFuc2xhdG9yID0gVHJhbnNsYXRvcihtb2RlbF9uYW1lLCAidm9jb2Rlcl92MiIsIGRldmljZSwgZHR5cGU9ZHR5cGUpCiAgICB0ZXh0X291dHB1dCwgXyA9IHRyYW5zbGF0b3IucHJlZGljdCgKICAgICAgICBFTkdfU0VOVEVOQ0UsCiAgICAgICAgInQydHQiLAogICAgICAgIHRndF9sYW5nLAogICAgICAgIHNyY19sYW5nPXNyY19sYW5nLAogICAgKQogICAgYXNzZXJ0ICgKICAgICAgICB0ZXh0X291dHB1dFswXSA9PSBERVVfU0VOVEVOQ0VfVjIKICAgICksIGYiJ3t0ZXh0X291dHB1dFswXX0nIGlzIG5vdCAne0RFVV9TRU5URU5DRV9WMn0nIgoKCmRlZiB0ZXN0X3NlYW1sZXNzX200dF92Ml9sYXJnZV9tdWx0aXBsZV90YXNrcygpIC0+IE5vbmU6CiAgICBtb2RlbF9uYW1lID0gInNlYW1sZXNzTTRUX3YyX2xhcmdlIgogICAgZW5nbGlzaF90ZXh0ID0gIkhlbGxvISBJIGhvcGUgeW91J3JlIGFsbCBkb2luZyB3ZWxsLiIKICAgIHJlZl9zcGFuaXNoX3RleHQgPSAiSG9sYSwgZXNwZXJvIHF1ZSB0b2RvIHNlIGVzdMOpIGhhY2llbmRvIGJpZW4uIgogICAgcmVmX3NwYW5pc2hfYXNyX3RleHQgPSAiSG9sYSwgZXNwZXJvIHF1ZSB0b2RvIHNlIGVzdMOpIGhhY2llbmRvIGJpZW4uIgoKICAgIGR0eXBlID0gZ2V0X2RlZmF1bHRfZHR5cGUoKQoKICAgIHRyYW5zbGF0b3IgPSBUcmFuc2xhdG9yKG1vZGVsX25hbWUsICJ2b2NvZGVyX3YyIiwgZGV2aWNlLCBkdHlwZT1kdHlwZSkKCiAgICAjIEdlbmVyYXRlIGVuZ2xpc2ggc3BlZWNoIGZvciB0aGUgZW5nbGlzaCB0ZXh0LgogICAgXywgZW5nbGlzaF9zcGVlY2hfb3V0cHV0ID0gdHJhbnNsYXRvci5wcmVkaWN0KAogICAgICAgIGVuZ2xpc2hfdGV4dCwKICAgICAgICAidDJzdCIsCiAgICAgICAgImVuZyIsCiAgICAgICAgc3JjX2xhbmc9ImVuZyIsCiAgICApCiAgICBhc3NlcnQgZW5nbGlzaF9zcGVlY2hfb3V0cHV0IGlzIG5vdCBOb25lCgogICAgIyBUcmFuc2xhdGUgZW5nbGlzaCBzcGVlY2ggdG8gc3BhbmlzaCBzcGVlY2guCiAgICBzcGFuaXNoX3RleHRfb3V0cHV0LCBzcGFuaXNoX3NwZWVjaF9vdXRwdXQgPSB0cmFuc2xhdG9yLnByZWRpY3QoCiAgICAgICAgZW5nbGlzaF9zcGVlY2hfb3V0cHV0LmF1ZGlvX3dhdnNbMF1bMF0sCiAgICAgICAgInMyc3QiLAogICAgICAgICJzcGEiLAogICAgKQogICAgYXNzZXJ0IHNwYW5pc2hfc3BlZWNoX291dHB1dCBpcyBub3QgTm9uZQogICAgYXNzZXJ0ICgKICAgICAgICBzcGFuaXNoX3RleHRfb3V0cHV0WzBdID09IHJlZl9zcGFuaXNoX3RleHQKICAgICksIGYiJ3tzcGFuaXNoX3RleHRfb3V0cHV0WzBdfScgaXMgbm90ICd7cmVmX3NwYW5pc2hfdGV4dH0nIgoKICAgICMgUnVuIEFTUiBvbiB0aGUgc3BhbmlzaCBzcGVlY2guCiAgICBzcGFuaXNoX2Fzcl90ZXh0X291dHB1dCwgXyA9IHRyYW5zbGF0b3IucHJlZGljdCgKICAgICAgICBzcGFuaXNoX3NwZWVjaF9vdXRwdXQuYXVkaW9fd2F2c1swXVswXSwKICAgICAgICAiYXNyIiwKICAgICAgICAic3BhIiwKICAgICkKICAgIGFzc2VydCAoCiAgICAgICAgc3BhbmlzaF9hc3JfdGV4dF9vdXRwdXRbMF0gPT0gcmVmX3NwYW5pc2hfYXNyX3RleHQKICAgICksIGYie3NwYW5pc2hfYXNyX3RleHRfb3V0cHV0WzBdfSBpcyBub3Qge3JlZl9zcGFuaXNoX2Fzcl90ZXh0fSciCg=='),
    ('seamless/tests/integration/models/test_conformer_shaw.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKaW1wb3J0IHRvcmNoCgpmcm9tIGZhaXJzZXEyLmRhdGEuYXVkaW8gaW1wb3J0IEF1ZGlvRGVjb2Rlck91dHB1dApmcm9tIGZhaXJzZXEyLm5uLnBhZGRpbmcgaW1wb3J0IGdldF9zZXFzX2FuZF9wYWRkaW5nX21hc2sKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuY29uZm9ybWVyX3NoYXcgaW1wb3J0IGxvYWRfY29uZm9ybWVyX3NoYXdfbW9kZWwKCmZyb20gdGVzdHMuY29tbW9uIGltcG9ydCAoCiAgICBjb252ZXJ0X3RvX2NvbGxhdGVkX2ZiYW5rLAogICAgZ2V0X2RlZmF1bHRfZHR5cGUsCiAgICBkZXZpY2UsCikKClJFRl9NRUFOLCBSRUZfU1REID0gLTAuMDAwMSwgMC4xNTQ3CgoKZGVmIHRlc3RfY29uZm9ybWVyX3NoYXdfNjAwbShleGFtcGxlX3JhdGUxNmtfYXVkaW86IEF1ZGlvRGVjb2Rlck91dHB1dCkgLT4gTm9uZToKCiAgICBkdHlwZSA9IGdldF9kZWZhdWx0X2R0eXBlKCkKICAgIGF1ZGlvX2RpY3QgPSBleGFtcGxlX3JhdGUxNmtfYXVkaW8KICAgIHNyYyA9IGNvbnZlcnRfdG9fY29sbGF0ZWRfZmJhbmsoYXVkaW9fZGljdCwgZHR5cGU9ZHR5cGUpCiAgICBzZXFzLCBwYWRkaW5nX21hc2sgPSBnZXRfc2Vxc19hbmRfcGFkZGluZ19tYXNrKHNyYykKCiAgICBtb2RlbCA9IGxvYWRfY29uZm9ybWVyX3NoYXdfbW9kZWwoImNvbmZvcm1lcl9zaGF3IiwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpCiAgICBtb2RlbC5ldmFsKCkKCiAgICB3aXRoIHRvcmNoLmluZmVyZW5jZV9tb2RlKCk6CiAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrID0gbW9kZWwuZW5jb2Rlcl9mcm9udGVuZChzZXFzLCBwYWRkaW5nX21hc2spCgogICAgICAgIHNlcXMsIF8gPSBtb2RlbC5lbmNvZGVyKHNlcXMsIHBhZGRpbmdfbWFzaykKCiAgICBzdGQsIG1lYW4gPSB0b3JjaC5zdGRfbWVhbihzZXFzKQoKICAgIGFzc2VydCByb3VuZChtZWFuLml0ZW0oKSwgNCkgPT0gUkVGX01FQU4KICAgIGFzc2VydCByb3VuZChzdGQuaXRlbSgpLCA0KSA9PSBSRUZfU1RECg=='),
    ('seamless/tests/integration/models/test_unity2_aligner.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBGaW5hbAoKaW1wb3J0IHRvcmNoCmZyb20gdG9yY2ggaW1wb3J0IHRlbnNvcgoKZnJvbSBmYWlyc2VxMi5kYXRhLmF1ZGlvIGltcG9ydCBBdWRpb0RlY29kZXJPdXRwdXQKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5hbGlnbmVyLmFsaWdubWVudF9leHRyYWN0b3IgaW1wb3J0IEFsaWdubWVudEV4dHJhY3Rvcgpmcm9tIHRlc3RzLmNvbW1vbiBpbXBvcnQgYXNzZXJ0X2VxdWFsLCBkZXZpY2UsIGdldF9kZWZhdWx0X2R0eXBlCgoKUkVGX1RFWFQgPSAidGhlIGV4YW1pbmF0aW9uIGFuZCB0ZXN0aW1vbnkgb2YgdGhlIGV4cGVydHMgZW5hYmxlZCB0aGUgY29tbWlzaW9uIHRvIGNvbmNsdWRlIHRoYXQgZml2ZSBzaG90cyBtYXkgaGF2ZSBiZWVuIGZpcmVkIgoKIyBmbXQ6IG9mZgpSRUZfRFVSQVRJT05TX0ZQMTY6IEZpbmFsID0gW1sgMSwgIDEsICAyLCAgMSwgIDEsICA1LCAgNSwgIDYsICA0LCAgMywgIDIsICAzLCAgNCwgIDQsICAyLCAgMiwgIDIsICAxLAogICAgICAgICAgMSwgIDEsICAzLCAgMywgIDMsICA0LCAgMywgIDMsICAzLCAgNCwgIDQsICAzLCAgMiwgIDIsICAxLCAgMSwgIDEsICAxLAogICAgICAgICAgMiwgIDQsICA2LCAgNSwgIDQsICAzLCAgNCwgIDUsICA1LCAxNiwgIDYsICAzLCAgNSwgIDUsICAzLCAgMywgIDEsICAyLAogICAgICAgICAgMSwgIDEsICAxLCAgMiwgIDMsICAyLCAgMywgIDEsICAzLCAgMywgIDMsICAyLCAgMiwgIDQsICAyLCAgMiwgIDIsICAzLAogICAgICAgICAgMiwgIDQsICA1LCAgNCwgIDUsICA4LCAgMywgMTcsICAyLCAgMiwgIDMsICAyLCAgNSwgIDQsICA2LCAgMywgIDEsICAxLAogICAgICAgICAgNCwgIDQsICAzLCAgNSwgIDMsICAzLCAgMiwgIDIsICAyLCAgMiwgIDIsICAyLCAgMiwgIDEsICAyLCAgMiwgIDEsICAxLAogICAgICAgICAgMiwgIDYsICA0LCAgNSwgIDksICA1LCAgMSwgMTJdXQojIGZtdDogb24KCiMgZm10OiBvZmYKUkVGX0RVUkFUSU9OU19GUDMyOiBGaW5hbCA9IFtbIDEsICAxLCAgMiwgIDEsICAxLCAgNSwgIDUsICA2LCAgNCwgIDMsICAyLCAgMywgIDQsICA0LCAgMiwgIDIsICAyLCAgMSwKICAgICAgICAgICAxLCAgMSwgIDMsICAzLCAgMywgIDQsICAzLCAgMywgIDQsICAzLCAgNCwgIDMsICAyLCAgMiwgIDEsICAxLCAgMSwgIDEsCiAgICAgICAgICAgMiwgIDQsICA2LCAgNSwgIDQsICAzLCAgNCwgIDUsICA1LCAxNiwgIDYsICAzLCAgNSwgIDUsICAzLCAgMywgIDEsICAyLAogICAgICAgICAgIDEsICAxLCAgMSwgIDIsICAzLCAgMiwgIDMsICAxLCAgMywgIDMsICAzLCAgMiwgIDIsICA0LCAgMiwgIDIsICAyLCAgMywKICAgICAgICAgICAyLCAgNCwgIDUsICA0LCAgNSwgIDgsICAzLCAxNywgIDIsICAyLCAgMywgIDIsICA1LCAgNCwgIDYsICAzLCAgMSwgIDEsCiAgICAgICAgICAgNCwgIDQsICAzLCAgNSwgIDMsICAzLCAgMiwgIDIsICAyLCAgMiwgIDIsICAyLCAgMiwgIDEsICAyLCAgMiwgIDEsICAxLAogICAgICAgICAgIDIsICA2LCAgNCwgIDUsICA5LCAgNSwgIDEsIDEyXV0KIyBmbXQ6IG9uCgoKZGVmIHRlc3RfYWxpZ25lcihleGFtcGxlX3JhdGUxNmtfYXVkaW86IEF1ZGlvRGVjb2Rlck91dHB1dCkgLT4gTm9uZToKICAgIGFsaWduZXJfbmFtZSA9ICJuYXJfdDJ1X2FsaWduZXIiCiAgICB1bml0X2V4dHJhY3Rvcl9uYW1lID0gInhsc3IyXzFiX3YyIgogICAgdW5pdF9leHRyYWN0b3Jfb3V0cHV0X2xheWVyX24gPSAzNQogICAgdW5pdF9leHRyYWN0b3Jfa21lYW5zX3VyaSA9ICJodHRwczovL2RsLmZiYWlwdWJsaWNmaWxlcy5jb20vc2VhbWxlc3NNNFQvbW9kZWxzL3VuaXRfZXh0cmFjdGlvbi9rbWVhbnNfMTBrLm5weSIKICAgIGR0eXBlID0gZ2V0X2RlZmF1bHRfZHR5cGUoKQogICAgaWYgZHR5cGUgPT0gdG9yY2guZmxvYXQzMjoKICAgICAgICByZWZfdGVuc29yID0gUkVGX0RVUkFUSU9OU19GUDMyCiAgICBlbHNlOgogICAgICAgIHJlZl90ZW5zb3IgPSBSRUZfRFVSQVRJT05TX0ZQMTYKCiAgICBhdWRpbyA9IGV4YW1wbGVfcmF0ZTE2a19hdWRpb1sid2F2ZWZvcm0iXS5tZWFuKAogICAgICAgIDEKICAgICkgICMgYXZlcmFnaW5nIG1vbm8gdG8gZ2V0IFtUaW1lXSBzaGFwZSByZXF1aXJlZCBieSBhbGlnbmVyCgogICAgZXh0cmFjdG9yID0gQWxpZ25tZW50RXh0cmFjdG9yKAogICAgICAgIGFsaWduZXJfbmFtZSwKICAgICAgICB1bml0X2V4dHJhY3Rvcl9uYW1lLAogICAgICAgIHVuaXRfZXh0cmFjdG9yX291dHB1dF9sYXllcl9uLAogICAgICAgIHVuaXRfZXh0cmFjdG9yX2ttZWFuc191cmksCiAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICBkdHlwZT1kdHlwZSwKICAgICkKCiAgICBhbGlnbm1lbnRfZHVyYXRpb25zLCBfLCBfID0gZXh0cmFjdG9yLmV4dHJhY3RfYWxpZ25tZW50KAogICAgICAgIGF1ZGlvLCBSRUZfVEVYVCwgcGxvdD1GYWxzZSwgYWRkX3RyYWlsaW5nX3NpbGVuY2U9VHJ1ZQogICAgKQoKICAgIGFzc2VydF9lcXVhbCgKICAgICAgICBhbGlnbm1lbnRfZHVyYXRpb25zLCB0ZW5zb3IocmVmX3RlbnNvciwgZGV2aWNlPWRldmljZSwgZHR5cGU9dG9yY2guaW50NjQpCiAgICApCg=='),
    ('seamless/tests/integration/models/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/tests/unit/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/tests/unit/segment/__init__.py', ''),
    ('seamless/tests/unit/segment/test_silero_vad.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCB1bml0dGVzdApmcm9tIGFyZ3BhcnNlIGltcG9ydCBOYW1lc3BhY2UKZnJvbSB1bml0dGVzdC5tb2NrIGltcG9ydCBNb2NrCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zZWdtZW50LnNpbGVyb192YWQgaW1wb3J0IFNpbGVyb1ZBRFNlZ21lbnRlciwgU2VnbWVudAppbXBvcnQgbnVtcHkgYXMgbnAKCgpjbGFzcyBUZXN0U2lsZXJvVkFEU2VnbWVudGVyKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgIGRlZiB0ZXN0X2luaXRfd29ya3Moc2VsZik6CiAgICAgICAgc2VnbWVudGVyID0gU2lsZXJvVkFEU2VnbWVudGVyKAogICAgICAgICAgc2FtcGxlX3JhdGU9MTYwMDAsIAogICAgICAgICAgY2h1bmtfc2l6ZV9zZWM9MTAsIAogICAgICAgICAgcGF1c2VfbGVuZ3RoPTAuNSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNlZ21lbnRlci5zYW1wbGVfcmF0ZSwgMTYwMDApCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzZWdtZW50ZXIuY2h1bmtfc2l6ZV9zZWMsIDEwKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc2VnbWVudGVyLnBhdXNlX2xlbmd0aCwgMC41KQoKCiAgICBkZWYgdGVzdF9zZWdtZW50X2xvbmdfaW5wdXQoc2VsZik6CiAgICAgICAgc2VsZi5zZWdtZW50ZXIgPSBTaWxlcm9WQURTZWdtZW50ZXIoCiAgICAgICAgICBzYW1wbGVfcmF0ZT0xNjAwMCwgCiAgICAgICAgICBjaHVua19zaXplX3NlYz0xMCwgCiAgICAgICAgICBwYXVzZV9sZW5ndGg9MC41KQogICAgICAgIHNlbGYuc2VnbWVudGVyLmdldF9zcGVlY2hfdGltZXN0YW1wcyA9IE1vY2soCiAgICAgICAgICByZXR1cm5fdmFsdWU9W3swOiAwLCAxOiAxMDAwMH0sIAogICAgICAgICAgezA6IDIwMDAwLCAxOiAzMDAwMH1dKQogICAgICAgIHNlZ21lbnRzID0gc2VsZi5zZWdtZW50ZXIuc2VnbWVudF9sb25nX2lucHV0KGF1ZGlvPU5vbmUpCiAgICAgICAgZXhwZWN0ZWRfc2VnbWVudHMgPSBbWzAsIDEwMDAwXSwgWzIwMDAwLCAzMDAwMF1dCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzZWdtZW50cywgZXhwZWN0ZWRfc2VnbWVudHMpCgoKICAgIGRlZiB0ZXN0X3JlY3Vyc2l2ZV9zcGxpdChzZWxmKToKICAgICAgICBzZWdtZW50ZXIgPSBTaWxlcm9WQURTZWdtZW50ZXIoCiAgICAgICAgICBzYW1wbGVfcmF0ZT0xNjAwMCwgCiAgICAgICAgICBjaHVua19zaXplX3NlYz0xMCwKICAgICAgICAgIHBhdXNlX2xlbmd0aD0wLjUpCiAgICAgICAgc2dtID0gU2VnbWVudCgwLCAxMDAwMCwgbnAucmFuZG9tLnJhbmQoMTAwMDApKQogICAgICAgIHNlZ21lbnRzID0gW10KICAgICAgICBtYXhfc2VnbWVudF9sZW5ndGggPSA1MDAwCiAgICAgICAgbWluX3NlZ21lbnRfbGVuZ3RoID0gMTAwMAogICAgICAgIHdpbmRvd19zaXplX3NhbXBsZXMgPSAxMDAKICAgICAgICB0aHJlc2hvbGQgPSAuNQoKICAgICAgICBzZWdtZW50ZXIucmVjdXJzaXZlX3NwbGl0KAogICAgICAgICAgc2dtLCAKICAgICAgICAgIHNlZ21lbnRzLCAKICAgICAgICAgIG1heF9zZWdtZW50X2xlbmd0aCwgCiAgICAgICAgICBtaW5fc2VnbWVudF9sZW5ndGgsIAogICAgICAgICAgd2luZG93X3NpemVfc2FtcGxlcywgCiAgICAgICAgICB0aHJlc2hvbGQpCgogICAgICAgIGFzc2VydCBhbGwoW3NlZy5kdXJhdGlvbiA8IG1heF9zZWdtZW50X2xlbmd0aCBmb3Igc2VnIGluIHNlZ21lbnRzXSkKICAgICAgICBhc3NlcnQgYWxsKFtzZWcuZHVyYXRpb24gPiBtaW5fc2VnbWVudF9sZW5ndGggZm9yIHNlZyBpbiBzZWdtZW50c10pCg=='),
    ('seamless/tests/unit/models/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/tests/unit/models/unity/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/tests/unit/models/unity/test_unity.py', ''),
    ('seamless/tests/unit/denoise/__init__.py', ''),
    ('seamless/tests/unit/denoise/test_demucs.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCB1bml0dGVzdApmcm9tIHVuaXR0ZXN0Lm1vY2sgaW1wb3J0IHBhdGNoLCBNYWdpY01vY2sKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmRlbm9pc2UuZGVtdWNzIGltcG9ydCBEZW11Y3MsIERlbm9pc2luZ0NvbmZpZwppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5tZW1vcnkgaW1wb3J0IE1lbW9yeUJsb2NrCgpjbGFzcyBUZXN0RGVtdWNzKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgIGRlZiB0ZXN0X2luaXRfd29ya3Moc2VsZik6CiAgICAgICAgY29uZmlnID0gRGVub2lzaW5nQ29uZmlnKG1vZGVsPSJodGRlbXVjcyIsIHNhbXBsZV9yYXRlPTE2MDAwKQogICAgICAgIGRlbXVjcyA9IERlbXVjcyhkZW5vaXNlX2NvbmZpZz1jb25maWcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChkZW11Y3MuZGVub2lzZV9jb25maWcubW9kZWwsICJodGRlbXVjcyIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChkZW11Y3MuZGVub2lzZV9jb25maWcuc2FtcGxlX3JhdGUsIDE2MDAwKQoKICAgIEBwYXRjaCgic2VhbWxlc3NfY29tbXVuaWNhdGlvbi5kZW5vaXNlLmRlbXVjcy50b3JjaGF1ZGlvLmxvYWQiKQogICAgQHBhdGNoKCJzZWFtbGVzc19jb21tdW5pY2F0aW9uLmRlbm9pc2UuZGVtdWNzLlBhdGgiKQogICAgQHBhdGNoKCJzZWFtbGVzc19jb21tdW5pY2F0aW9uLmRlbm9pc2UuZGVtdWNzLnNwLnJ1biIpCiAgICBkZWYgdGVzdF9kZW5vaXNlKHNlbGYsIG1vY2tfcnVuLCBtb2NrX3BhdGgsIG1vY2tfbG9hZCk6CgogICAgICAgIG1vY2tfcnVuLnJldHVybl92YWx1ZSA9IE1hZ2ljTW9jayhyZXR1cm5jb2RlPTApCiAgICAgICAgbW9ja19sb2FkLnJldHVybl92YWx1ZSA9ICh0b3JjaC5yYW5kbigxLCAxNjAwMCksIDE2MDAwKQogICAgICAgIG1vY2tfcGF0aC5yZXR1cm5fdmFsdWUuZXhpc3RzLnJldHVybl92YWx1ZSA9IFRydWUKICAgICAgICBtb2NrX3BhdGgucmV0dXJuX3ZhbHVlLmdsb2IucmV0dXJuX3ZhbHVlID0gW01hZ2ljTW9jaygpXQogICAgICAgIG1vY2tfcGF0aC5yZXR1cm5fdmFsdWUub3Blbi5yZXR1cm5fdmFsdWUuX19lbnRlcl9fLnJldHVybl92YWx1ZS5yZWFkLnJldHVybl92YWx1ZSA9IGIiIgogICAgICAgIGNvbmZpZyA9IERlbm9pc2luZ0NvbmZpZyhtb2RlbD0iaHRkZW11Y3MiLCBzYW1wbGVfcmF0ZT0xNjAwMCkKICAgICAgICBkZW11Y3MgPSBEZW11Y3MoZGVub2lzZV9jb25maWc9Y29uZmlnKQogICAgICAgIHJlc3VsdCA9IGRlbXVjcy5kZW5vaXNlKGF1ZGlvPU5vbmUpCgogICAgICAgIG1vY2tfcnVuLmFzc2VydF9jYWxsZWRfb25jZSgpCiAgICAgICAgbW9ja19sb2FkLmFzc2VydF9jYWxsZWRfb25jZSgpCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHJlc3VsdCwgTWVtb3J5QmxvY2spCiAgICAgICAg'),
    ('seamless/ggml/test_ggml_integration.py', ''),
    ('seamless/ggml/ggml_convert.py', ''),
    ('seamless/ggml/ctypes_utils.py', 'aW1wb3J0IGN0eXBlcwppbXBvcnQgZGF0YWNsYXNzZXMKaW1wb3J0IGZ1bmN0b29scwppbXBvcnQgaW5zcGVjdAppbXBvcnQgdHlwZXMKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgQ2FsbGFibGUsIEdlbmVyaWMsIE9wdGlvbmFsLCBUeXBlLCBUeXBlVmFyCgpUID0gVHlwZVZhcigiVCIpCgoKY2xhc3MgUHRyKEdlbmVyaWNbVF0sIGN0eXBlcy5fUG9pbnRlcik6ICAjIHR5cGU6IGlnbm9yZQogICAgY29udGVudHM6IFQKCiAgICBkZWYgX19uZXdfXyhjbHMsIHg6IFQpIC0+ICJQdHJbVF0iOgogICAgICAgIHJldHVybiBjdHlwZXMucG9pbnRlcih4KSAgIyB0eXBlOiBpZ25vcmUKCgpOVUxMUFRSOiBQdHJbQW55XSA9IE5vbmUgICMgdHlwZTogaWdub3JlW2Fzc2lnbm1lbnRdCgoKZGVmIGNfc3RydWN0KGNsczogVHlwZVtUXSkgLT4gVHlwZVtUXToKICAgIHN0cnVjdCA9IHR5cGVzLm5ld19jbGFzcyhjbHMuX19uYW1lX18sIGJhc2VzPShjdHlwZXMuU3RydWN0dXJlLCkpCiAgICBzdHJ1Y3QuX19tb2R1bGVfXyA9IGNscy5fX21vZHVsZV9fCiAgICBzdHJ1Y3QuX2ZpZWxkc18gPSBbICAjIHR5cGU6IGlnbm9yZQogICAgICAgIChrLCBfcHlfdHlwZV90b19jdHlwZSh2KSkgZm9yIGssIHYgaW4gY2xzLl9fYW5ub3RhdGlvbnNfXy5pdGVtcygpCiAgICBdCgogICAgZGVmIG5pY2VfaW5pdChzZWxmOiBULCAqYXJnczogQW55LCAqKmt3YXJnczogQW55KSAtPiBOb25lOgogICAgICAgIGRjID0gY2xzKCphcmdzLCAqKmt3YXJncykKICAgICAgICBmb3IgaywgXyBpbiBzZWxmLl9maWVsZHNfOiAgIyB0eXBlOiBpZ25vcmUKICAgICAgICAgICAgc2V0YXR0cihzZWxmLCBrLCBnZXRhdHRyKGRjLCBrKSkKCiAgICBzZXRhdHRyKHN0cnVjdCwgIl9faW5pdF9fIiwgbmljZV9pbml0KQogICAgcmV0dXJuIHN0cnVjdAoKCkBmdW5jdG9vbHMubHJ1X2NhY2hlKDI1NikKZGVmIF9weV90eXBlX3RvX2N0eXBlKHQ6IHR5cGUpIC0+IHR5cGU6CiAgICBpZiBpc2luc3RhbmNlKHQsIHN0cik6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgZiJUeXBlIHBhcnNpbmcgb2YgJ3t0fScgaXNuJ3Qgc3VwcG9ydGVkLCB5b3UgbmVlZCB0byBwcm92aWRlIGEgcmVhbCB0eXBlIGFubm90YXRpb24uIgogICAgICAgICkKICAgIGlmIHQgaXMgTm9uZToKICAgICAgICByZXR1cm4gTm9uZQogICAgaWYgaXNpbnN0YW5jZSh0LCB0eXBlKToKICAgICAgICBpZiB0Ll9fbW9kdWxlX18gPT0gImN0eXBlcyI6CiAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgaWYgaXNzdWJjbGFzcyh0LCBjdHlwZXMuU3RydWN0dXJlKToKICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICBpZiBpc3N1YmNsYXNzKHQsIGN0eXBlcy5fUG9pbnRlcik6CiAgICAgICAgICAgIHJldHVybiB0CiAgICBpZiB0IGlzIGludDoKICAgICAgICByZXR1cm4gY3R5cGVzLmNfaW50CiAgICBpZiB0IGlzIGZsb2F0OgogICAgICAgIHJldHVybiBjdHlwZXMuY19mbG9hdAogICAgaWYgdCBpcyBib29sOgogICAgICAgIHJldHVybiBjdHlwZXMuY19ib29sCiAgICBpZiB0IGlzIGJ5dGVzOgogICAgICAgIHJldHVybiBjdHlwZXMuY19jaGFyX3AKICAgIGlmIHQgaXMgc3RyOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoInN0ciB0eXBlIGlzJ3Qgc3VwcG9ydGVkIGJ5IGN0eXBlcyA/IikKCiAgICBpZiBnZXRhdHRyKHQsICJfX29yaWdpbl9fIiwgTm9uZSkgaXMgUHRyOgogICAgICAgIHBvaW50ZWUgPSBfcHlfdHlwZV90b19jdHlwZSh0Ll9fYXJnc19fWzBdKSAgIyB0eXBlOiBpZ25vcmUKICAgICAgICByZXR1cm4gY3R5cGVzLlBPSU5URVIocG9pbnRlZSkKCiAgICByZXR1cm4gY3R5cGVzLmNfdm9pZF9wCgoKRiA9IFR5cGVWYXIoIkYiLCBib3VuZD1DYWxsYWJsZVsuLi4sIEFueV0pCgoKZGVmIF9jX2ZuKG1vZHVsZTogQW55LCBmbjogRikgLT4gRjoKICAgIGlmIGNhbGxhYmxlKG1vZHVsZSk6CiAgICAgICAgY19mbiA9IG1vZHVsZQogICAgZWxzZToKICAgICAgICBjX2ZuID0gZ2V0YXR0cihtb2R1bGUsIGZuLl9fbmFtZV9fKQogICAgYW5ub3RhdGlvbnMgPSBmbi5fX2Fubm90YXRpb25zX18KICAgIGlmICJyZXR1cm4iIG5vdCBpbiBhbm5vdGF0aW9uczoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKAogICAgICAgICAgICAiQGNfZm4gZGVjb3JhdG9yIHJlcXVpcmVzIHR5cGUgYW5ub3RhdGlvbnMgb24gdGhlIGRlY29yYXRlZCBmdW5jdGlvbi4iCiAgICAgICAgKQoKICAgIGNfZm4uYXJndHlwZXMgPSBbCiAgICAgICAgX3B5X3R5cGVfdG9fY3R5cGUodCkgZm9yIGssIHQgaW4gZm4uX19hbm5vdGF0aW9uc19fLml0ZW1zKCkgaWYgayAhPSAicmV0dXJuIgogICAgXQogICAgY19mbi5yZXN0eXBlID0gX3B5X3R5cGVfdG9fY3R5cGUoZm4uX19hbm5vdGF0aW9uc19fWyJyZXR1cm4iXSkKCiAgICBAZnVuY3Rvb2xzLndyYXBzKGZuKQogICAgZGVmIGFjdHVhbF9mbigqYXJncywgKiprd2FyZ3MpOiAgIyB0eXBlOiBpZ25vcmUKICAgICAgICByYXdfcmVzID0gY19mbigqYXJncywgKiprd2FyZ3MpCiAgICAgICAgcmV0dXJuIHJhd19yZXMKCiAgICByZXR1cm4gYWN0dWFsX2ZuICAjIHR5cGU6IGlnbm9yZQoKCmRlZiBjX2ZuKG1vZHVsZTogQW55KSAtPiBDYWxsYWJsZVtbRl0sIEZdOgogICAgcmV0dXJuIGZ1bmN0b29scy5wYXJ0aWFsKF9jX2ZuLCBtb2R1bGUpCg=='),
    ('seamless/ggml/test_unity_cpp.py', ''),
    ('seamless/ggml/third_party_ggml.py', ''),
    ('seamless/ggml/mt.py', ''),
    ('seamless/ggml/ggml.py', ''),
    ('seamless/ggml/scripts/sync-whisper.sh', 'IyEvYmluL2Jhc2gKCmNwIC1ycHYgLi4vd2hpc3Blci5jcHAvZ2dtbC5jICAgICAgICAgICAgICAgICAgICAgICAgIHNyYy9nZ21sLmMKY3AgLXJwdiAuLi93aGlzcGVyLmNwcC9nZ21sLWN1ZGEuaCAgICAgICAgICAgICAgICAgICAgc3JjL2dnbWwtY3VkYS5oCmNwIC1ycHYgLi4vd2hpc3Blci5jcHAvZ2dtbC1jdWRhLmN1ICAgICAgICAgICAgICAgICAgIHNyYy9nZ21sLWN1ZGEuY3UKY3AgLXJwdiAuLi93aGlzcGVyLmNwcC9nZ21sLW9wZW5jbC5oICAgICAgICAgICAgICAgICAgc3JjL2dnbWwtb3BlbmNsLmgKY3AgLXJwdiAuLi93aGlzcGVyLmNwcC9nZ21sLW9wZW5jbC5jcHAgICAgICAgICAgICAgICAgc3JjL2dnbWwtb3BlbmNsLmNwcApjcCAtcnB2IC4uL3doaXNwZXIuY3BwL2dnbWwtbWV0YWwuaCAgICAgICAgICAgICAgICAgICBzcmMvZ2dtbC1tZXRhbC5oCmNwIC1ycHYgLi4vd2hpc3Blci5jcHAvZ2dtbC1tZXRhbC5tICAgICAgICAgICAgICAgICAgIHNyYy9nZ21sLW1ldGFsLm0KY3AgLXJwdiAuLi93aGlzcGVyLmNwcC9nZ21sLW1ldGFsLm1ldGFsICAgICAgICAgICAgICAgc3JjL2dnbWwtbWV0YWwubWV0YWwKY3AgLXJwdiAuLi93aGlzcGVyLmNwcC9nZ21sLmggICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZS9nZ21sL2dnbWwuaApjcCAtcnB2IC4uL3doaXNwZXIuY3BwL2V4YW1wbGVzL2NvbW1vbi5oICAgICAgICAgICAgICBleGFtcGxlcy9jb21tb24uaApjcCAtcnB2IC4uL3doaXNwZXIuY3BwL2V4YW1wbGVzL2NvbW1vbi5jcHAgICAgICAgICAgICBleGFtcGxlcy9jb21tb24uY3BwCmNwIC1ycHYgLi4vd2hpc3Blci5jcHAvZXhhbXBsZXMvY29tbW9uLWdnbWwuaCAgICAgICAgIGV4YW1wbGVzL2NvbW1vbi1nZ21sLmgKY3AgLXJwdiAuLi93aGlzcGVyLmNwcC9leGFtcGxlcy9jb21tb24tZ2dtbC5jcHAgICAgICAgZXhhbXBsZXMvY29tbW9uLWdnbWwuY3BwCmNwIC1ycHYgLi4vd2hpc3Blci5jcHAvd2hpc3Blci5oICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGVzL3doaXNwZXIvd2hpc3Blci5oCmNwIC1ycHYgLi4vd2hpc3Blci5jcHAvd2hpc3Blci5jcHAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGVzL3doaXNwZXIvd2hpc3Blci5jcHAKY3AgLXJwdiAuLi93aGlzcGVyLmNwcC9leGFtcGxlcy9tYWluL21haW4uY3BwICAgICAgICAgZXhhbXBsZXMvd2hpc3Blci9tYWluLmNwcApjcCAtcnB2IC4uL3doaXNwZXIuY3BwL2V4YW1wbGVzL3F1YW50aXplL3F1YW50aXplLmNwcCBleGFtcGxlcy93aGlzcGVyL3F1YW50aXplLmNwcAo='),
    ('seamless/ggml/scripts/sync-llama.sh', 'IyEvYmluL2Jhc2gKCmNwIC1ycHYgLi4vbGxhbWEuY3BwL2dnbWwuYyAgICAgICAgICAgc3JjL2dnbWwuYwpjcCAtcnB2IC4uL2xsYW1hLmNwcC9nZ21sLWFsbG9jLmMgICAgIHNyYy9nZ21sLWFsbG9jLmMKY3AgLXJwdiAuLi9sbGFtYS5jcHAvZ2dtbC1jdWRhLmggICAgICBzcmMvZ2dtbC1jdWRhLmgKY3AgLXJwdiAuLi9sbGFtYS5jcHAvZ2dtbC1jdWRhLmN1ICAgICBzcmMvZ2dtbC1jdWRhLmN1CmNwIC1ycHYgLi4vbGxhbWEuY3BwL2dnbWwtb3BlbmNsLmggICAgc3JjL2dnbWwtb3BlbmNsLmgKY3AgLXJwdiAuLi9sbGFtYS5jcHAvZ2dtbC1vcGVuY2wuY3BwICBzcmMvZ2dtbC1vcGVuY2wuY3BwCmNwIC1ycHYgLi4vbGxhbWEuY3BwL2dnbWwtbWV0YWwuaCAgICAgc3JjL2dnbWwtbWV0YWwuaApjcCAtcnB2IC4uL2xsYW1hLmNwcC9nZ21sLW1ldGFsLm0gICAgIHNyYy9nZ21sLW1ldGFsLm0KY3AgLXJwdiAuLi9sbGFtYS5jcHAvZ2dtbC1tZXRhbC5tZXRhbCBzcmMvZ2dtbC1tZXRhbC5tZXRhbApjcCAtcnB2IC4uL2xsYW1hLmNwcC9nZ21sLmggICAgICAgICAgIGluY2x1ZGUvZ2dtbC9nZ21sLmgKY3AgLXJwdiAuLi9sbGFtYS5jcHAvZ2dtbC1hbGxvYy5oICAgICBpbmNsdWRlL2dnbWwvZ2dtbC1hbGxvYy5oCgpjcCAtcnB2IC4uL2xsYW1hLmNwcC90ZXN0cy90ZXN0LW9wdC5jcHAgICAgICAgICAgIHRlc3RzL3Rlc3Qtb3B0LmNwcApjcCAtcnB2IC4uL2xsYW1hLmNwcC90ZXN0cy90ZXN0LWdyYWQwLmNwcCAgICAgICAgIHRlc3RzL3Rlc3QtZ3JhZDAuY3BwCmNwIC1ycHYgLi4vbGxhbWEuY3BwL3Rlc3RzL3Rlc3QtcXVhbnRpemUtZm5zLmNwcCAgdGVzdHMvdGVzdC1xdWFudGl6ZS1mbnMuY3BwCmNwIC1ycHYgLi4vbGxhbWEuY3BwL3Rlc3RzL3Rlc3QtcXVhbnRpemUtcGVyZi5jcHAgdGVzdHMvdGVzdC1xdWFudGl6ZS1wZXJmLmNwcAo='),
    ('seamless/ggml/ci/run.sh', ''),
    ('seamless/ggml/examples/python/example_test_all_quants.py', 'ZnJvbSBnZ21sIGltcG9ydCBmZmksIGxpYgpmcm9tIGdnbWwudXRpbHMgaW1wb3J0IGluaXQsIG51bXB5LCBjb3B5CmltcG9ydCBudW1weSBhcyBucApmcm9tIG1hdGggaW1wb3J0IHBpLCBjb3MsIHNpbiwgY2VpbAoKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAoKY3R4ID0gaW5pdChtZW1fc2l6ZT0xMDAqMTAyNCoxMDI0KSAjIFdpbGwgYmUgYXV0by1HQydkCm4gPSAyNTYKCm9yaWcgPSBucC5hcnJheShbCiAgICBbCiAgICAgICAgY29zKGogKiAyICogcGkgLyBuKSAqIChzaW4oaSAqIDIgKiBwaSAvIG4pKQogICAgICAgIGZvciBqIGluIHJhbmdlKG4pCiAgICBdCiAgICBmb3IgaSBpbiByYW5nZShuKQpdLCBucC5mbG9hdDMyKQpvcmlnX3RlbnNvciA9IGxpYi5nZ21sX25ld190ZW5zb3JfMmQoY3R4LCBsaWIuR0dNTF9UWVBFX0YzMiwgbiwgbikKY29weShvcmlnLCBvcmlnX3RlbnNvcikKCnF1YW50cyA9IFsKICAgIHR5cGUgZm9yIHR5cGUgaW4gcmFuZ2UobGliLkdHTUxfVFlQRV9DT1VOVCkKICAgIGlmIGxpYi5nZ21sX2lzX3F1YW50aXplZCh0eXBlKSBhbmQKICAgICAgIHR5cGUgbm90IGluIFtsaWIuR0dNTF9UWVBFX1E4XzEsIGxpYi5HR01MX1RZUEVfUThfS10gIyBBcHBhcmVudGx5IG5vdCBzdXBwb3J0ZWQKXQojIHF1YW50cyA9IFtsaWIuR0dNTF9UWVBFX1EyX0tdICPCoFRlc3QgYSBzaW5nbGUgb25lCgpkZWYgZ2V0X25hbWUodHlwZSk6CiAgICBuYW1lID0gbGliLmdnbWxfdHlwZV9uYW1lKHR5cGUpCiAgICByZXR1cm4gZmZpLnN0cmluZyhuYW1lKS5kZWNvZGUoJ3V0Zi04JykgaWYgbmFtZSBlbHNlICc/JwoKcXVhbnRzLnNvcnQoa2V5PWdldF9uYW1lKQpxdWFudHMuaW5zZXJ0KDAsIE5vbmUpCnByaW50KHF1YW50cykKCm5jb2xzPTQKbnJvd3MgPSBjZWlsKGxlbihxdWFudHMpIC8gbmNvbHMpCgpwbHQuZmlndXJlKGZpZ3NpemU9KG5jb2xzICogNSwgbnJvd3MgKiA1KSwgbGF5b3V0PSd0aWdodCcpCgpmb3IgaSwgdHlwZSBpbiBlbnVtZXJhdGUocXVhbnRzKToKICAgIHBsdC5zdWJwbG90KG5yb3dzLCBuY29scywgaSArIDEpCiAgICB0cnk6CiAgICAgICAgaWYgdHlwZSA9PSBOb25lOgogICAgICAgICAgICBwbHQudGl0bGUoJ09yaWdpbmFsJykKICAgICAgICAgICAgcGx0Lmltc2hvdyhvcmlnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHF1YW50aXplZF90ZW5zb3IgPSBsaWIuZ2dtbF9uZXdfdGVuc29yXzJkKGN0eCwgdHlwZSwgbiwgbikKICAgICAgICAgICAgY29weShvcmlnX3RlbnNvciwgcXVhbnRpemVkX3RlbnNvcikKICAgICAgICAgICAgcXVhbnRpemVkID0gbnVtcHkocXVhbnRpemVkX3RlbnNvciwgYWxsb3dfY29weT1UcnVlKQogICAgICAgICAgICBkID0gcXVhbnRpemVkIC0gb3JpZwogICAgICAgICAgICByZXN1bHRzID0gewogICAgICAgICAgICAgICAgImwyIjogbnAubGluYWxnLm5vcm0oZCwgMiksCiAgICAgICAgICAgICAgICAibGluZiI6IG5wLmxpbmFsZy5ub3JtKGQsIG5wLmluZiksCiAgICAgICAgICAgICAgICAiY29tcHJlc3Npb24iOgogICAgICAgICAgICAgICAgICAgIHJvdW5kKGxpYi5nZ21sX25ieXRlcyhvcmlnX3RlbnNvcikgLwogICAgICAgICAgICAgICAgICAgICAgICAgIGxpYi5nZ21sX25ieXRlcyhxdWFudGl6ZWRfdGVuc29yKSwgMSkKICAgICAgICAgICAgfQogICAgICAgICAgICBuYW1lID0gZ2V0X25hbWUodHlwZSkKICAgICAgICAgICAgcHJpbnQoZid7bmFtZX06IHtyZXN1bHRzfScpCgogICAgICAgICAgICBwbHQudGl0bGUoZid7bmFtZX0gKHtyZXN1bHRzWyJjb21wcmVzc2lvbiJdfXggc21hbGxlciknKQogICAgICAgICAgICBwbHQuaW1zaG93KHF1YW50aXplZCwgaW50ZXJwb2xhdGlvbj0nbmVhcmVzdCcpCiAgICAgICAgCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZidFcnJvcjoge2V9JykKCnBsdC5zaG93KCk='),
    ('seamless/ggml/examples/python/regenerate.py', 'IyBHZW5lcmF0ZXMgYmluZGluZ3MgZm9yIHRoZSBnZ21sIGxpYnJhcnkuCiMKIyBjZmZpIHJlcXVpcmVzIHByaW9yIEMgcHJlcHJvY2Vzc2luZyBvZiB0aGUgaGVhZGVycywgYW5kIGl0IHVzZXMgcHljcGFyc2VyIHdoaWNoIGNob2tlcyBvbiBhIGNvdXBsZSBvZiB0aGluZ3MKIyBzbyB3ZSBoZWxwIGl0IGEgYml0IChlLmcuIHJlcGxhY2Ugc2l6ZW9mIGV4cHJlc3Npb25zIHdpdGggdGhlaXIgdmFsdWUsIHJlbW92ZSBleG90aWMgc3ludGF4IGZvdW5kIGluIERhcndpbiBoZWFkZXJzKS4KaW1wb3J0IG9zLCBzeXMsIHJlLCBzdWJwcm9jZXNzCmltcG9ydCBjZmZpCmZyb20gc3R1YnMgaW1wb3J0IGdlbmVyYXRlX3N0dWJzCgpBUEkgPSBvcy5lbnZpcm9uLmdldCgnQVBJJywgJ2FwaS5oJykKQ0MgPSBvcy5lbnZpcm9uLmdldCgnQ0MnKSBvciAnZ2NjJwpDX0lOQ0xVREVfRElSID0gb3MuZW52aXJvbi5nZXQoJ0NfSU5DTFVERV9ESVInLCAnLi4vLi4vLi4vbGxhbWEuY3BwJykKQ1BQRkxBR1MgPSBbCiAgICAiLUkiLCBDX0lOQ0xVREVfRElSLAogICAgJy1EX19mcDE2PXVpbnQxNl90JywgICMgcHljcGFyc2VyIGRvZXNuJ3Qgc3VwcG9ydCBfX2ZwMTYKICAgICctRF9fYXR0cmlidXRlX18oeCk9JywKICAgICctRF9TdGF0aWNfYXNzZXJ0KHgsIG0pPScsCl0gKyBbeCBmb3IgeCBpbiBvcy5lbnZpcm9uLmdldCgnQ1BQRkxBR1MnLCAnJykuc3BsaXQoJyAnKSBpZiB4ICE9ICcnXQoKdHJ5OiBoZWFkZXIgPSBzdWJwcm9jZXNzLnJ1bihbQ0MsICItRSIsICpDUFBGTEFHUywgQVBJXSwgY2FwdHVyZV9vdXRwdXQ9VHJ1ZSwgdGV4dD1UcnVlLCBjaGVjaz1UcnVlKS5zdGRvdXQKZXhjZXB0IHN1YnByb2Nlc3MuQ2FsbGVkUHJvY2Vzc0Vycm9yIGFzIGU6IHByaW50KGYne2Uuc3RkZXJyfVxue2V9JywgZmlsZT1zeXMuc3RkZXJyKTsgcmFpc2UKCmhlYWRlciA9ICdcbicuam9pbihbbCBmb3IgbCBpbiBoZWFkZXIuc3BsaXQoJ1xuJykgaWYgJ19fZGFyd2luX3ZhX2xpc3QnIG5vdCBpbiBsXSkgIyBweWNwYXJzZXIgaGF0ZXMgdGhpcwoKIyBSZXBsYWNlIGNvbnN0YW50IHNpemUgZXhwcmVzc2lvbnMgdy8gdGhlaXIgdmFsdWUgKGNvbXBpbGUgJiBydW4gYSBtaW5pIGV4ZSBmb3IgZWFjaCwgYmVjYXVzZSB3aHkgbm90KS4KIyBGaXJzdCwgZXh0cmFjdCBhbnl0aW5nICppbnNpZGUqIHNxdWFyZSBicmFja2V0cyBhbmQgYW55dGhpbmcgdGhhdCBsb29rcyBsaWtlIGEgc2l6ZW9mIGNhbGwuCmZvciBleHByIGluIHNldChyZS5maW5kYWxsKGYnKD88PVxcWylbXlxcXV0rKD89XSl8c2l6ZW9mXFxzKlxcKFteKCldK1xcKScsIGhlYWRlcikpOgogICAgaWYgcmUubWF0Y2gocideKFxkK3xccyopJCcsIGV4cHIpOiBjb250aW51ZSAjIHNraXAgY29uc3RhbnRzIGFuZCBlbXB0eSBicmFja2V0IGNvbnRlbnRzCiAgICBzdWJwcm9jZXNzLnJ1bihbQ0MsICItbyIsICJldmFsX3NpemVfZXhwciIsICpDUFBGTEFHUywgIi14IiwgImMiLCAiLSJdLCB0ZXh0PVRydWUsIGNoZWNrPVRydWUsCiAgICAgICAgICAgICAgICAgICBpbnB1dD1mJycnI2luY2x1ZGUgPHN0ZGlvLmg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2luY2x1ZGUgIntBUEl9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCBtYWluKCkge3sgcHJpbnRmKCIlbHUiLCAoc2l6ZV90KSh7ZXhwcn0pKTsgfX0nJycpCiAgICBzaXplID0gc3VicHJvY2Vzcy5ydW4oWyIuL2V2YWxfc2l6ZV9leHByIl0sIGNhcHR1cmVfb3V0cHV0PVRydWUsIHRleHQ9VHJ1ZSwgY2hlY2s9VHJ1ZSkuc3Rkb3V0CiAgICBwcmludChmJ0NvbXB1dGVkIGNvbnN0ZXhwciB7ZXhwcn0gPSB7c2l6ZX0nKQogICAgaGVhZGVyID0gaGVhZGVyLnJlcGxhY2UoZXhwciwgc2l6ZSkKCmZmaWJ1aWxkZXIgPSBjZmZpLkZGSSgpCmZmaWJ1aWxkZXIuY2RlZihoZWFkZXIpCmZmaWJ1aWxkZXIuc2V0X3NvdXJjZShmJ2dnbWwuY2ZmaScsIE5vbmUpICMgd2UncmUgbm90IGNvbXBpbGluZyBhIG5hdGl2ZSBleHRlbnNpb24sIGFzIHRoaXMgcXVpY2tseSBnZXRzIGhhaXJ5CmZmaWJ1aWxkZXIuY29tcGlsZSh2ZXJib3NlPVRydWUpCgp3aXRoIG9wZW4oImdnbWwvX19pbml0X18ucHlpIiwgInd0IikgYXMgZjoKICAgIGYud3JpdGUoZ2VuZXJhdGVfc3R1YnMoaGVhZGVyKSk='),
    ('seamless/ggml/examples/python/test_tensor.py', ''),
    ('seamless/ggml/examples/python/example_add_quant.py', 'ZnJvbSBnZ21sIGltcG9ydCBsaWIsIGZmaQpmcm9tIGdnbWwudXRpbHMgaW1wb3J0IGluaXQsIGNvcHksIG51bXB5CmltcG9ydCBudW1weSBhcyBucAoKY3R4ID0gaW5pdChtZW1fc2l6ZT0xMioxMDI0KjEwMjQpICMgYXV0b21hdGljYWxseSBmcmVlZCB3aGVuIHBvaW50ZXIgaXMgR0MnZApuID0gMjU2Cm5fdGhyZWFkcyA9IDQKCmEgPSBsaWIuZ2dtbF9uZXdfdGVuc29yXzFkKGN0eCwgbGliLkdHTUxfVFlQRV9RNV9LLCBuKQpiID0gbGliLmdnbWxfbmV3X3RlbnNvcl8xZChjdHgsIGxpYi5HR01MX1RZUEVfRjMyLCBuKSAjIGNhbid0IGJvdGggYmUgcXVhbnRpemVkCnN1bSA9IGxpYi5nZ21sX2FkZChjdHgsIGEsIGIpICMgYWxsIHplcm9lcyBmb3Igbm93LiBXaWxsIGJlIHF1YW50aXplZCB0b28hCgojIFNlZSBjZmZpJ3MgZG9jIG9uIGhvdyB0byBhbGxvY2F0ZSBuYXRpdmUgbWVtb3J5OiBpdCdzIHZlcnkgc2ltcGxlIQojIGh0dHBzOi8vY2ZmaS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvcmVmLmh0bWwjZmZpLWludGVyZmFjZQpnZiA9IGZmaS5uZXcoJ3N0cnVjdCBnZ21sX2NncmFwaConKQpsaWIuZ2dtbF9idWlsZF9mb3J3YXJkX2V4cGFuZChnZiwgc3VtKQoKY29weShucC5hcnJheShbaSBmb3IgaSBpbiByYW5nZShuKV0sIG5wLmZsb2F0MzIpLCBhKQpjb3B5KG5wLmFycmF5KFtpKjEwMCBmb3IgaSBpbiByYW5nZShuKV0sIG5wLmZsb2F0MzIpLCBiKQoKbGliLmdnbWxfZ3JhcGhfY29tcHV0ZV93aXRoX2N0eChjdHgsIGdmLCBuX3RocmVhZHMpCgpwcmludChudW1weShhLCBhbGxvd19jb3B5PVRydWUpKQpwcmludChudW1weShiKSkKcHJpbnQobnVtcHkoc3VtLCBhbGxvd19jb3B5PVRydWUpKQ=='),
    ('seamless/ggml/examples/python/stubs.py', 'IiIiCiAgVGhpcyBnZW5lcmF0ZXMgLnB5aSBzdHVicyBmb3IgdGhlIGNmZmkgUHl0aG9uIGJpbmRpbmdzIGdlbmVyYXRlZCBieSByZWdlbmVyYXRlLnB5CiIiIgppbXBvcnQgc3lzLCByZSwgaXRlcnRvb2xzCnN5cy5wYXRoLmV4dGVuZChbJy4nLCAnLi4nXSkgIyBmb3IgcHljcGFyc2VyCgpmcm9tIHB5Y3BhcnNlciBpbXBvcnQgY19hc3QsIHBhcnNlX2ZpbGUsIENQYXJzZXIKaW1wb3J0IHB5Y3BhcnNlci5wbHlwYXJzZXIKZnJvbSBweWNwYXJzZXIuY19hc3QgaW1wb3J0IFB0ckRlY2wsIFR5cGVEZWNsLCBGdW5jRGVjbCwgRWxsaXBzaXNQYXJhbSwgSWRlbnRpZmllclR5cGUsIFN0cnVjdCwgRW51bSwgVHlwZWRlZgpmcm9tIHR5cGluZyBpbXBvcnQgVHVwbGUKCl9fY190eXBlX3RvX3B5dGhvbl90eXBlID0gewogICAgJ3ZvaWQnOiAnTm9uZScsICdfQm9vbCc6ICdib29sJywKICAgICdjaGFyJzogJ2ludCcsICdzaG9ydCc6ICdpbnQnLCAnaW50JzogJ2ludCcsICdsb25nJzogJ2ludCcsCiAgICAncHRyZGlmZl90JzogJ2ludCcsICdzaXplX3QnOiAnaW50JywKICAgICdpbnQ4X3QnOiAnaW50JywgJ3VpbnQ4X3QnOiAnaW50JywKICAgICdpbnQxNl90JzogJ2ludCcsICd1aW50MTZfdCc6ICdpbnQnLAogICAgJ2ludDMyX3QnOiAnaW50JywgJ3VpbnQzMl90JzogJ2ludCcsCiAgICAnaW50NjRfdCc6ICdpbnQnLCAndWludDY0X3QnOiAnaW50JywKICAgICdmbG9hdCc6ICdmbG9hdCcsICdkb3VibGUnOiAnZmxvYXQnLAogICAgJ2dnbWxfZnAxNl90JzogJ25wLmZsb2F0MTYnLAp9CgpkZWYgZm9ybWF0X3R5cGUodDogVHlwZURlY2wpOgogICAgaWYgaXNpbnN0YW5jZSh0LCBQdHJEZWNsKSBvciBpc2luc3RhbmNlKHQsIFN0cnVjdCk6CiAgICAgICAgcmV0dXJuICdmZmkuQ0RhdGEnCiAgICBpZiBpc2luc3RhbmNlKHQsIEVudW0pOgogICAgICAgIHJldHVybiAnaW50JwogICAgaWYgaXNpbnN0YW5jZSh0LCBUeXBlRGVjbCk6CiAgICAgICAgcmV0dXJuIGZvcm1hdF90eXBlKHQudHlwZSkKICAgIGlmIGlzaW5zdGFuY2UodCwgSWRlbnRpZmllclR5cGUpOgogICAgICAgIGFzc2VydCBsZW4odC5uYW1lcykgPT0gMSwgZidFeHBlY3RlZCBhIHNpbmdsZSBuYW1lLCBnb3Qge3QubmFtZXN9JwogICAgICAgIHJldHVybiBfX2NfdHlwZV90b19weXRob25fdHlwZS5nZXQodC5uYW1lc1swXSkgb3IgJ2ZmaS5DRGF0YScKICAgIHJldHVybiB0Lm5hbWUKCmNsYXNzIFB5dGhvblN0dWJGdW5jRGVjbFZpc2l0b3IoY19hc3QuTm9kZVZpc2l0b3IpOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuc2lncyA9IHt9CiAgICAgICAgc2VsZi5zb3VyY2VzID0ge30KCiAgICBkZWYgZ2V0X3NvdXJjZV9zbmlwcGV0X2xpbmVzKHNlbGYsIGNvb3JkOiBweWNwYXJzZXIucGx5cGFyc2VyLkNvb3JkKSAtPiBUdXBsZVtsaXN0W3N0cl0sIGxpc3Rbc3RyXV06CiAgICAgICAgaWYgY29vcmQuZmlsZSBub3QgaW4gc2VsZi5zb3VyY2VzOgogICAgICAgICAgICB3aXRoIG9wZW4oY29vcmQuZmlsZSwgJ3J0JykgYXMgZjoKICAgICAgICAgICAgICAgIHNlbGYuc291cmNlc1tjb29yZC5maWxlXSA9IGYucmVhZGxpbmVzKCkKICAgICAgICBzb3VyY2VfbGluZXMgPSBzZWxmLnNvdXJjZXNbY29vcmQuZmlsZV0KICAgICAgICBuY29tbWVudF9saW5lcyA9IGxlbihsaXN0KGl0ZXJ0b29scy50YWtld2hpbGUobGFtYmRhIGk6IHJlLnNlYXJjaChyJ15ccyooLy98L1wqKScsIHNvdXJjZV9saW5lc1tpXSksIHJhbmdlKGNvb3JkLmxpbmUgLSAyLCAtMSwgLTEpKSkpCiAgICAgICAgY29tbWVudF9saW5lcyA9IFtsLnN0cmlwKCkgZm9yIGwgaW4gc291cmNlX2xpbmVzW2Nvb3JkLmxpbmUgLSAxIC0gbmNvbW1lbnRfbGluZXM6Y29vcmQubGluZSAtIDFdXQogICAgICAgIGRlY2xfbGluZXMgPSBbXQogICAgICAgIGZvciBsaW5lIGluIHNvdXJjZV9saW5lc1tjb29yZC5saW5lIC0gMTpdOgogICAgICAgICAgICBkZWNsX2xpbmVzLmFwcGVuZChsaW5lLnJzdHJpcCgpKQogICAgICAgICAgICBpZiAoJzsnIGluIGxpbmUpIG9yICgneycgaW4gbGluZSk6IGJyZWFrCiAgICAgICAgcmV0dXJuIChjb21tZW50X2xpbmVzLCBkZWNsX2xpbmVzKQoKICAgIGRlZiB2aXNpdF9FbnVtKHNlbGYsIG5vZGU6IEVudW0pOgogICAgICAgIGlmIG5vZGUudmFsdWVzIGlzIG5vdCBOb25lOgogICAgICAgICAgZm9yIGUgaW4gbm9kZS52YWx1ZXMuZW51bWVyYXRvcnM6CiAgICAgICAgICAgICAgc2VsZi5zaWdzW2UubmFtZV0gPSBmJyAgQHByb3BlcnR5XG4gIGRlZiB7ZS5uYW1lfShzZWxmKSAtPiBpbnQ6IC4uLicKCiAgICBkZWYgdmlzaXRfVHlwZWRlZihzZWxmLCBub2RlOiBUeXBlZGVmKToKICAgICAgICBwYXNzCgogICAgZGVmIHZpc2l0X0Z1bmNEZWNsKHNlbGYsIG5vZGU6IEZ1bmNEZWNsKToKICAgICAgICByZXRfdHlwZSA9IG5vZGUudHlwZQogICAgICAgIGlzX3B0ciA9IEZhbHNlCiAgICAgICAgd2hpbGUgaXNpbnN0YW5jZShyZXRfdHlwZSwgUHRyRGVjbCk6CiAgICAgICAgICAgIHJldF90eXBlID0gcmV0X3R5cGUudHlwZQogICAgICAgICAgICBpc19wdHIgPSBUcnVlCgogICAgICAgIGZ1bl9uYW1lID0gcmV0X3R5cGUuZGVjbG5hbWUKICAgICAgICBpZiBmdW5fbmFtZS5zdGFydHN3aXRoKCdfXycpOgogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgYXJncyA9IFtdCiAgICAgICAgYXJnbmFtZXMgPSBbXQogICAgICAgIGRlZiBnZW5fbmFtZShzdGVtKToKICAgICAgICAgICAgaSA9IDEKICAgICAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgICAgIG5ld19uYW1lID0gc3RlbSBpZiBpID09IDEgZWxzZSBmJ3tzdGVtfXtpfScKICAgICAgICAgICAgICAgIGlmIG5ld19uYW1lIG5vdCBpbiBhcmduYW1lczogcmV0dXJuIG5ld19uYW1lCiAgICAgICAgICAgICAgICBpICs9IDEKCiAgICAgICAgZm9yIGEgaW4gbm9kZS5hcmdzLnBhcmFtczoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhLCBFbGxpcHNpc1BhcmFtKToKICAgICAgICAgICAgICAgIGFyZ19uYW1lID0gZ2VuX25hbWUoJ2FyZ3MnKQogICAgICAgICAgICAgICAgYXJnbmFtZXMuYXBwZW5kKGFyZ19uYW1lKQogICAgICAgICAgICAgICAgYXJncy5hcHBlbmQoJyonICsgZ2VuX25hbWUoJ2FyZ3MnKSkKICAgICAgICAgICAgZWxpZiBmb3JtYXRfdHlwZShhLnR5cGUpID09ICdOb25lJzoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBhcmdfbmFtZSA9IGEubmFtZSBvciBnZW5fbmFtZSgnYXJnJykKICAgICAgICAgICAgICAgIGFyZ25hbWVzLmFwcGVuZChhcmdfbmFtZSkKICAgICAgICAgICAgICAgIGFyZ3MuYXBwZW5kKGYne2FyZ19uYW1lfToge2Zvcm1hdF90eXBlKGEudHlwZSl9JykKCiAgICAgICAgcmV0ID0gZm9ybWF0X3R5cGUocmV0X3R5cGUgaWYgbm90IGlzX3B0ciBlbHNlIG5vZGUudHlwZSkKCiAgICAgICAgY29tbWVudF9saW5lcywgZGVjbF9saW5lcyA9IHNlbGYuZ2V0X3NvdXJjZV9zbmlwcGV0X2xpbmVzKG5vZGUuY29vcmQpCgogICAgICAgIGxpbmVzID0gW2YnICBkZWYge2Z1bl9uYW1lfSh7IiwgIi5qb2luKGFyZ3MpfSkgLT4ge3JldH06J10KICAgICAgICBpZiBsZW4oY29tbWVudF9saW5lcykgPT0gMCBhbmQgbGVuKGRlY2xfbGluZXMpID09IDE6CiAgICAgICAgICAgIGxpbmVzICs9IFtmJyAgICAiIiJ7ZGVjbF9saW5lc1swXX0iIiInXQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGxpbmVzICs9IFsnICAgICIiIiddCiAgICAgICAgICAgIGxpbmVzICs9IFtmJyAgICB7Yy5sc3RyaXAoIi8qICIpfScgZm9yIGMgaW4gY29tbWVudF9saW5lc10KICAgICAgICAgICAgaWYgbGVuKGNvbW1lbnRfbGluZXMpID4gMDoKICAgICAgICAgICAgICAgIGxpbmVzICs9IFsnJ10KICAgICAgICAgICAgbGluZXMgKz0gW2YnICAgIHtkfScgZm9yIGQgaW4gZGVjbF9saW5lc10KICAgICAgICAgICAgbGluZXMgKz0gWycgICAgIiIiJ10KICAgICAgICBsaW5lcyArPSBbJyAgICAuLi4nXQogICAgICAgIHNlbGYuc2lnc1tmdW5fbmFtZV0gPSAnXG4nLmpvaW4obGluZXMpCgpkZWYgZ2VuZXJhdGVfc3R1YnMoaGVhZGVyOiBzdHIpOgogICAgIiIiCiAgICAgIEdlbmVyYXRlcyBhIC5weWkgUHl0aG9uIHN0dWIgZmlsZSBmb3IgdGhlIEdHTUwgQVBJIHVzaW5nIEMgaGVhZGVyIGZpbGVzLgogICAgIiIiCgogICAgdiA9IFB5dGhvblN0dWJGdW5jRGVjbFZpc2l0b3IoKQogICAgdi52aXNpdChDUGFyc2VyKCkucGFyc2UoaGVhZGVyLCAiPGlucHV0PiIpKQoKICAgIGtleXMgPSBsaXN0KHYuc2lncy5rZXlzKCkpCiAgICBrZXlzLnNvcnQoKQoKICAgIHJldHVybiAnXG4nLmpvaW4oWwogICAgICAgICcjIGF1dG8tZ2VuZXJhdGVkIGZpbGUnLAogICAgICAgICdpbXBvcnQgZ2dtbC5mZmkgYXMgZmZpJywKICAgICAgICAnaW1wb3J0IG51bXB5IGFzIG5wJywKICAgICAgICAnY2xhc3MgbGliOicsCiAgICAgICAgKlt2LnNpZ3Nba10gZm9yIGsgaW4ga2V5c10KICAgIF0pCg=='),
    ('seamless/ggml/examples/python/ggml/__init__.py', 'IiIiCiAgUHl0aG9uIGJpbmRpbmdzIGZvciB0aGUgZ2dtbCBsaWJyYXJ5LgoKICBVc2FnZSBleGFtcGxlOgoKICAgICAgZnJvbSBnZ21sIGltcG9ydCBsaWIsIGZmaQogICAgICBmcm9tIGdnbWwudXRpbHMgaW1wb3J0IGluaXQsIGNvcHksIG51bXB5CiAgICAgIGltcG9ydCBudW1weSBhcyBucAoKICAgICAgY3R4ID0gaW5pdChtZW1fc2l6ZT0xMCoxMDI0KjEwMjQpCiAgICAgIG4gPSAxMDI0CiAgICAgIG5fdGhyZWFkcyA9IDQKCiAgICAgIGEgPSBsaWIuZ2dtbF9uZXdfdGVuc29yXzFkKGN0eCwgbGliLkdHTUxfVFlQRV9RNV9LLCBuKQogICAgICBiID0gbGliLmdnbWxfbmV3X3RlbnNvcl8xZChjdHgsIGxpYi5HR01MX1RZUEVfRjMyLCBuKQogICAgICBzdW0gPSBsaWIuZ2dtbF9hZGQoY3R4LCBhLCBiKQoKICAgICAgZ2YgPSBmZmkubmV3KCdzdHJ1Y3QgZ2dtbF9jZ3JhcGgqJykKICAgICAgbGliLmdnbWxfYnVpbGRfZm9yd2FyZF9leHBhbmQoZ2YsIHN1bSkKCiAgICAgIGNvcHkobnAuYXJyYXkoW2kgZm9yIGkgaW4gcmFuZ2UobildLCBucC5mbG9hdDMyKSwgYSkKICAgICAgY29weShucC5hcnJheShbaSoxMDAgZm9yIGkgaW4gcmFuZ2UobildLCBucC5mbG9hdDMyKSwgYikKICAgICAgbGliLmdnbWxfZ3JhcGhfY29tcHV0ZV93aXRoX2N0eChjdHgsIGdmLCBuX3RocmVhZHMpCgogICAgICBwcmludChudW1weShzdW0sIGFsbG93X2NvcHk9VHJ1ZSkpCgogIFNlZSBodHRwczovL2NmZmkucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2NkZWYuaHRtbCBmb3IgbW9yZSBvbiBjZmZpLgoiIiIKCnRyeToKICAgIGZyb20gZ2dtbC5jZmZpIGltcG9ydCBmZmkgYXMgZmZpCmV4Y2VwdCBJbXBvcnRFcnJvciBhcyBlOgogICAgcmFpc2UgSW1wb3J0RXJyb3IoZiJDb3VsZG4ndCBmaW5kIGdnbWwgYmluZGluZ3MgKHtlfSkuIFJ1biBgcHl0aG9uIHJlZ2VuZXJhdGUucHlgIG9yIGNoZWNrIHlvdXIgUFlUSE9OUEFUSC4iKQoKaW1wb3J0IG9zLCBwbGF0Zm9ybQoKX19leGFjdF9saWJyYXJ5ID0gb3MuZW52aXJvbi5nZXQoIkdHTUxfTElCUkFSWSIpCmlmIF9fZXhhY3RfbGlicmFyeToKICAgIF9fY2FuZGlkYXRlcyA9IFtfX2V4YWN0X2xpYnJhcnldCmVsaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gIldpbmRvd3MiOgogICAgX19jYW5kaWRhdGVzID0gWyJnZ21sX3NoYXJlZC5kbGwiLCAibGxhbWEuZGxsIl0KZWxzZToKICAgIF9fY2FuZGlkYXRlcyA9IFsibGliZ2dtbF9zaGFyZWQuc28iLCAibGlibGxhbWEuc28iXQogICAgaWYgcGxhdGZvcm0uc3lzdGVtKCkgPT0gIkRhcndpbiI6CiAgICAgICAgX19jYW5kaWRhdGVzICs9IFsibGliZ2dtbF9zaGFyZWQuZHlsaWIiLCAibGlibGxhbWEuZHlsaWIiXQoKZm9yIGksIG5hbWUgaW4gZW51bWVyYXRlKF9fY2FuZGlkYXRlcyk6CiAgICB0cnk6CiAgICAgICAgIyBUaGlzIGlzIHdoZXJlIGFsbCB0aGUgZnVuY3Rpb25zLCBlbnVtcyBhbmQgY29uc3RhbnRzIGFyZSBkZWZpbmVkCiAgICAgICAgbGliID0gZmZpLmRsb3BlbihuYW1lKQogICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgaWYgaSA8IGxlbihfX2NhbmRpZGF0ZXMpIC0gMToKICAgICAgICAgICAgY29udGludWUKICAgICAgICByYWlzZSBPU0Vycm9yKGYiQ291bGRuJ3QgZmluZCBnZ21sJ3Mgc2hhcmVkIGxpYnJhcnkgKHRyaWVkIG5hbWVzOiB7X19jYW5kaWRhdGVzfSkuIEFkZCBpdHMgZGlyZWN0b3J5IHRvIERZTERfTElCUkFSWV9QQVRIIChvbiBNYWMpIG9yIExEX0xJQlJBUllfUEFUSCwgb3IgZGVmaW5lIEdHTUxfTElCUkFSWS4iKQoKIyBUaGlzIGNvbnRhaW5zIHRoZSBjZmZpIGhlbHBlcnMgc3VjaCBhcyBuZXcsIGNhc3QsIHN0cmluZywgZXRjLgojIGh0dHBzOi8vY2ZmaS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvcmVmLmh0bWwjZmZpLWludGVyZmFjZQpmZmkgPSBmZmkK'),
    ('seamless/ggml/examples/python/ggml/cffi.py', ''),
    ('seamless/ggml/examples/python/ggml/utils.py', ''),
    ('seamless/demo/m4tv2/app.py', ''),
    ('seamless/demo/m4tv2/lang_list.py', 'IyBMYW5ndWFnZSBkaWN0Cmxhbmd1YWdlX2NvZGVfdG9fbmFtZSA9IHsKICAgICJhZnIiOiAiQWZyaWthYW5zIiwKICAgICJhbWgiOiAiQW1oYXJpYyIsCiAgICAiYXJiIjogIk1vZGVybiBTdGFuZGFyZCBBcmFiaWMiLAogICAgImFyeSI6ICJNb3JvY2NhbiBBcmFiaWMiLAogICAgImFyeiI6ICJFZ3lwdGlhbiBBcmFiaWMiLAogICAgImFzbSI6ICJBc3NhbWVzZSIsCiAgICAiYXN0IjogIkFzdHVyaWFuIiwKICAgICJhemoiOiAiTm9ydGggQXplcmJhaWphbmkiLAogICAgImJlbCI6ICJCZWxhcnVzaWFuIiwKICAgICJiZW4iOiAiQmVuZ2FsaSIsCiAgICAiYm9zIjogIkJvc25pYW4iLAogICAgImJ1bCI6ICJCdWxnYXJpYW4iLAogICAgImNhdCI6ICJDYXRhbGFuIiwKICAgICJjZWIiOiAiQ2VidWFubyIsCiAgICAiY2VzIjogIkN6ZWNoIiwKICAgICJja2IiOiAiQ2VudHJhbCBLdXJkaXNoIiwKICAgICJjbW4iOiAiTWFuZGFyaW4gQ2hpbmVzZSIsCiAgICAiY3ltIjogIldlbHNoIiwKICAgICJkYW4iOiAiRGFuaXNoIiwKICAgICJkZXUiOiAiR2VybWFuIiwKICAgICJlbGwiOiAiR3JlZWsiLAogICAgImVuZyI6ICJFbmdsaXNoIiwKICAgICJlc3QiOiAiRXN0b25pYW4iLAogICAgImV1cyI6ICJCYXNxdWUiLAogICAgImZpbiI6ICJGaW5uaXNoIiwKICAgICJmcmEiOiAiRnJlbmNoIiwKICAgICJnYXoiOiAiV2VzdCBDZW50cmFsIE9yb21vIiwKICAgICJnbGUiOiAiSXJpc2giLAogICAgImdsZyI6ICJHYWxpY2lhbiIsCiAgICAiZ3VqIjogIkd1amFyYXRpIiwKICAgICJoZWIiOiAiSGVicmV3IiwKICAgICJoaW4iOiAiSGluZGkiLAogICAgImhydiI6ICJDcm9hdGlhbiIsCiAgICAiaHVuIjogIkh1bmdhcmlhbiIsCiAgICAiaHllIjogIkFybWVuaWFuIiwKICAgICJpYm8iOiAiSWdibyIsCiAgICAiaW5kIjogIkluZG9uZXNpYW4iLAogICAgImlzbCI6ICJJY2VsYW5kaWMiLAogICAgIml0YSI6ICJJdGFsaWFuIiwKICAgICJqYXYiOiAiSmF2YW5lc2UiLAogICAgImpwbiI6ICJKYXBhbmVzZSIsCiAgICAia2FtIjogIkthbWJhIiwKICAgICJrYW4iOiAiS2FubmFkYSIsCiAgICAia2F0IjogIkdlb3JnaWFuIiwKICAgICJrYXoiOiAiS2F6YWtoIiwKICAgICJrZWEiOiAiS2FidXZlcmRpYW51IiwKICAgICJraGsiOiAiSGFsaCBNb25nb2xpYW4iLAogICAgImtobSI6ICJLaG1lciIsCiAgICAia2lyIjogIkt5cmd5eiIsCiAgICAia29yIjogIktvcmVhbiIsCiAgICAibGFvIjogIkxhbyIsCiAgICAibGl0IjogIkxpdGh1YW5pYW4iLAogICAgImx0eiI6ICJMdXhlbWJvdXJnaXNoIiwKICAgICJsdWciOiAiR2FuZGEiLAogICAgImx1byI6ICJMdW8iLAogICAgImx2cyI6ICJTdGFuZGFyZCBMYXR2aWFuIiwKICAgICJtYWkiOiAiTWFpdGhpbGkiLAogICAgIm1hbCI6ICJNYWxheWFsYW0iLAogICAgIm1hciI6ICJNYXJhdGhpIiwKICAgICJta2QiOiAiTWFjZWRvbmlhbiIsCiAgICAibWx0IjogIk1hbHRlc2UiLAogICAgIm1uaSI6ICJNZWl0ZWkiLAogICAgIm15YSI6ICJCdXJtZXNlIiwKICAgICJubGQiOiAiRHV0Y2giLAogICAgIm5ubyI6ICJOb3J3ZWdpYW4gTnlub3JzayIsCiAgICAibm9iIjogIk5vcndlZ2lhbiBCb2ttXHUwMGU1bCIsCiAgICAibnBpIjogIk5lcGFsaSIsCiAgICAibnlhIjogIk55YW5qYSIsCiAgICAib2NpIjogIk9jY2l0YW4iLAogICAgIm9yeSI6ICJPZGlhIiwKICAgICJwYW4iOiAiUHVuamFiaSIsCiAgICAicGJ0IjogIlNvdXRoZXJuIFBhc2h0byIsCiAgICAicGVzIjogIldlc3Rlcm4gUGVyc2lhbiIsCiAgICAicG9sIjogIlBvbGlzaCIsCiAgICAicG9yIjogIlBvcnR1Z3Vlc2UiLAogICAgInJvbiI6ICJSb21hbmlhbiIsCiAgICAicnVzIjogIlJ1c3NpYW4iLAogICAgInNsayI6ICJTbG92YWsiLAogICAgInNsdiI6ICJTbG92ZW5pYW4iLAogICAgInNuYSI6ICJTaG9uYSIsCiAgICAic25kIjogIlNpbmRoaSIsCiAgICAic29tIjogIlNvbWFsaSIsCiAgICAic3BhIjogIlNwYW5pc2giLAogICAgInNycCI6ICJTZXJiaWFuIiwKICAgICJzd2UiOiAiU3dlZGlzaCIsCiAgICAic3doIjogIlN3YWhpbGkiLAogICAgInRhbSI6ICJUYW1pbCIsCiAgICAidGVsIjogIlRlbHVndSIsCiAgICAidGdrIjogIlRhamlrIiwKICAgICJ0Z2wiOiAiVGFnYWxvZyIsCiAgICAidGhhIjogIlRoYWkiLAogICAgInR1ciI6ICJUdXJraXNoIiwKICAgICJ1a3IiOiAiVWtyYWluaWFuIiwKICAgICJ1cmQiOiAiVXJkdSIsCiAgICAidXpuIjogIk5vcnRoZXJuIFV6YmVrIiwKICAgICJ2aWUiOiAiVmlldG5hbWVzZSIsCiAgICAieGhvIjogIlhob3NhIiwKICAgICJ5b3IiOiAiWW9ydWJhIiwKICAgICJ5dWUiOiAiQ2FudG9uZXNlIiwKICAgICJ6bG0iOiAiQ29sbG9xdWlhbCBNYWxheSIsCiAgICAienNtIjogIlN0YW5kYXJkIE1hbGF5IiwKICAgICJ6dWwiOiAiWnVsdSIsCn0KTEFOR1VBR0VfTkFNRV9UT19DT0RFID0ge3Y6IGsgZm9yIGssIHYgaW4gbGFuZ3VhZ2VfY29kZV90b19uYW1lLml0ZW1zKCl9CgojIFNvdXJjZSBsYW5nczogUzJTVCAvIFMyVFQgLyBBU1IgZG9uJ3QgbmVlZCBzb3VyY2UgbGFuZwojIFQyVFQgLyBUMlNUIHVzZSB0aGlzCnRleHRfc291cmNlX2xhbmd1YWdlX2NvZGVzID0gWwogICAgImFmciIsCiAgICAiYW1oIiwKICAgICJhcmIiLAogICAgImFyeSIsCiAgICAiYXJ6IiwKICAgICJhc20iLAogICAgImF6aiIsCiAgICAiYmVsIiwKICAgICJiZW4iLAogICAgImJvcyIsCiAgICAiYnVsIiwKICAgICJjYXQiLAogICAgImNlYiIsCiAgICAiY2VzIiwKICAgICJja2IiLAogICAgImNtbiIsCiAgICAiY3ltIiwKICAgICJkYW4iLAogICAgImRldSIsCiAgICAiZWxsIiwKICAgICJlbmciLAogICAgImVzdCIsCiAgICAiZXVzIiwKICAgICJmaW4iLAogICAgImZyYSIsCiAgICAiZ2F6IiwKICAgICJnbGUiLAogICAgImdsZyIsCiAgICAiZ3VqIiwKICAgICJoZWIiLAogICAgImhpbiIsCiAgICAiaHJ2IiwKICAgICJodW4iLAogICAgImh5ZSIsCiAgICAiaWJvIiwKICAgICJpbmQiLAogICAgImlzbCIsCiAgICAiaXRhIiwKICAgICJqYXYiLAogICAgImpwbiIsCiAgICAia2FuIiwKICAgICJrYXQiLAogICAgImtheiIsCiAgICAia2hrIiwKICAgICJraG0iLAogICAgImtpciIsCiAgICAia29yIiwKICAgICJsYW8iLAogICAgImxpdCIsCiAgICAibHVnIiwKICAgICJsdW8iLAogICAgImx2cyIsCiAgICAibWFpIiwKICAgICJtYWwiLAogICAgIm1hciIsCiAgICAibWtkIiwKICAgICJtbHQiLAogICAgIm1uaSIsCiAgICAibXlhIiwKICAgICJubGQiLAogICAgIm5ubyIsCiAgICAibm9iIiwKICAgICJucGkiLAogICAgIm55YSIsCiAgICAib3J5IiwKICAgICJwYW4iLAogICAgInBidCIsCiAgICAicGVzIiwKICAgICJwb2wiLAogICAgInBvciIsCiAgICAicm9uIiwKICAgICJydXMiLAogICAgInNsayIsCiAgICAic2x2IiwKICAgICJzbmEiLAogICAgInNuZCIsCiAgICAic29tIiwKICAgICJzcGEiLAogICAgInNycCIsCiAgICAic3dlIiwKICAgICJzd2giLAogICAgInRhbSIsCiAgICAidGVsIiwKICAgICJ0Z2siLAogICAgInRnbCIsCiAgICAidGhhIiwKICAgICJ0dXIiLAogICAgInVrciIsCiAgICAidXJkIiwKICAgICJ1em4iLAogICAgInZpZSIsCiAgICAieW9yIiwKICAgICJ5dWUiLAogICAgInpzbSIsCiAgICAienVsIiwKXQpURVhUX1NPVVJDRV9MQU5HVUFHRV9OQU1FUyA9IHNvcnRlZChbbGFuZ3VhZ2VfY29kZV90b19uYW1lW2NvZGVdIGZvciBjb2RlIGluIHRleHRfc291cmNlX2xhbmd1YWdlX2NvZGVzXSkKCiMgVGFyZ2V0IGxhbmdzOgojIFMyU1QgLyBUMlNUCnMyc3RfdGFyZ2V0X2xhbmd1YWdlX2NvZGVzID0gWwogICAgImVuZyIsCiAgICAiYXJiIiwKICAgICJiZW4iLAogICAgImNhdCIsCiAgICAiY2VzIiwKICAgICJjbW4iLAogICAgImN5bSIsCiAgICAiZGFuIiwKICAgICJkZXUiLAogICAgImVzdCIsCiAgICAiZmluIiwKICAgICJmcmEiLAogICAgImhpbiIsCiAgICAiaW5kIiwKICAgICJpdGEiLAogICAgImpwbiIsCiAgICAia29yIiwKICAgICJtbHQiLAogICAgIm5sZCIsCiAgICAicGVzIiwKICAgICJwb2wiLAogICAgInBvciIsCiAgICAicm9uIiwKICAgICJydXMiLAogICAgInNsayIsCiAgICAic3BhIiwKICAgICJzd2UiLAogICAgInN3aCIsCiAgICAidGVsIiwKICAgICJ0Z2wiLAogICAgInRoYSIsCiAgICAidHVyIiwKICAgICJ1a3IiLAogICAgInVyZCIsCiAgICAidXpuIiwKICAgICJ2aWUiLApdClMyU1RfVEFSR0VUX0xBTkdVQUdFX05BTUVTID0gc29ydGVkKFtsYW5ndWFnZV9jb2RlX3RvX25hbWVbY29kZV0gZm9yIGNvZGUgaW4gczJzdF90YXJnZXRfbGFuZ3VhZ2VfY29kZXNdKQpUMlNUX1RBUkdFVF9MQU5HVUFHRV9OQU1FUyA9IFMyU1RfVEFSR0VUX0xBTkdVQUdFX05BTUVTCgojIFMyVFQgLyBUMlRUIC8gQVNSClMyVFRfVEFSR0VUX0xBTkdVQUdFX05BTUVTID0gVEVYVF9TT1VSQ0VfTEFOR1VBR0VfTkFNRVMKVDJUVF9UQVJHRVRfTEFOR1VBR0VfTkFNRVMgPSBURVhUX1NPVVJDRV9MQU5HVUFHRV9OQU1FUwpBU1JfVEFSR0VUX0xBTkdVQUdFX05BTUVTID0gVEVYVF9TT1VSQ0VfTEFOR1VBR0VfTkFNRVMK'),
    ('seamless/demo/m4tv1/app.py', ''),
    ('seamless/demo/expressive/app.py', ''),
    ('seamless/demo/expressive/utils.py', 'TEFOR1VBR0VfQ09ERV9UT19OQU1FID0gewogICAgImFmciI6ICJBZnJpa2FhbnMiLAogICAgImFtaCI6ICJBbWhhcmljIiwKICAgICJhcmIiOiAiTW9kZXJuIFN0YW5kYXJkIEFyYWJpYyIsCiAgICAiYXJ5IjogIk1vcm9jY2FuIEFyYWJpYyIsCiAgICAiYXJ6IjogIkVneXB0aWFuIEFyYWJpYyIsCiAgICAiYXNtIjogIkFzc2FtZXNlIiwKICAgICJhc3QiOiAiQXN0dXJpYW4iLAogICAgImF6aiI6ICJOb3J0aCBBemVyYmFpamFuaSIsCiAgICAiYmVsIjogIkJlbGFydXNpYW4iLAogICAgImJlbiI6ICJCZW5nYWxpIiwKICAgICJib3MiOiAiQm9zbmlhbiIsCiAgICAiYnVsIjogIkJ1bGdhcmlhbiIsCiAgICAiY2F0IjogIkNhdGFsYW4iLAogICAgImNlYiI6ICJDZWJ1YW5vIiwKICAgICJjZXMiOiAiQ3plY2giLAogICAgImNrYiI6ICJDZW50cmFsIEt1cmRpc2giLAogICAgImNtbiI6ICJNYW5kYXJpbiBDaGluZXNlIiwKICAgICJjeW0iOiAiV2Vsc2giLAogICAgImRhbiI6ICJEYW5pc2giLAogICAgImRldSI6ICJHZXJtYW4iLAogICAgImVsbCI6ICJHcmVlayIsCiAgICAiZW5nIjogIkVuZ2xpc2giLAogICAgImVzdCI6ICJFc3RvbmlhbiIsCiAgICAiZXVzIjogIkJhc3F1ZSIsCiAgICAiZmluIjogIkZpbm5pc2giLAogICAgImZyYSI6ICJGcmVuY2giLAogICAgImdheiI6ICJXZXN0IENlbnRyYWwgT3JvbW8iLAogICAgImdsZSI6ICJJcmlzaCIsCiAgICAiZ2xnIjogIkdhbGljaWFuIiwKICAgICJndWoiOiAiR3VqYXJhdGkiLAogICAgImhlYiI6ICJIZWJyZXciLAogICAgImhpbiI6ICJIaW5kaSIsCiAgICAiaHJ2IjogIkNyb2F0aWFuIiwKICAgICJodW4iOiAiSHVuZ2FyaWFuIiwKICAgICJoeWUiOiAiQXJtZW5pYW4iLAogICAgImlibyI6ICJJZ2JvIiwKICAgICJpbmQiOiAiSW5kb25lc2lhbiIsCiAgICAiaXNsIjogIkljZWxhbmRpYyIsCiAgICAiaXRhIjogIkl0YWxpYW4iLAogICAgImphdiI6ICJKYXZhbmVzZSIsCiAgICAianBuIjogIkphcGFuZXNlIiwKICAgICJrYW0iOiAiS2FtYmEiLAogICAgImthbiI6ICJLYW5uYWRhIiwKICAgICJrYXQiOiAiR2VvcmdpYW4iLAogICAgImtheiI6ICJLYXpha2giLAogICAgImtlYSI6ICJLYWJ1dmVyZGlhbnUiLAogICAgImtoayI6ICJIYWxoIE1vbmdvbGlhbiIsCiAgICAia2htIjogIktobWVyIiwKICAgICJraXIiOiAiS3lyZ3l6IiwKICAgICJrb3IiOiAiS29yZWFuIiwKICAgICJsYW8iOiAiTGFvIiwKICAgICJsaXQiOiAiTGl0aHVhbmlhbiIsCiAgICAibHR6IjogIkx1eGVtYm91cmdpc2giLAogICAgImx1ZyI6ICJHYW5kYSIsCiAgICAibHVvIjogIkx1byIsCiAgICAibHZzIjogIlN0YW5kYXJkIExhdHZpYW4iLAogICAgIm1haSI6ICJNYWl0aGlsaSIsCiAgICAibWFsIjogIk1hbGF5YWxhbSIsCiAgICAibWFyIjogIk1hcmF0aGkiLAogICAgIm1rZCI6ICJNYWNlZG9uaWFuIiwKICAgICJtbHQiOiAiTWFsdGVzZSIsCiAgICAibW5pIjogIk1laXRlaSIsCiAgICAibXlhIjogIkJ1cm1lc2UiLAogICAgIm5sZCI6ICJEdXRjaCIsCiAgICAibm5vIjogIk5vcndlZ2lhbiBOeW5vcnNrIiwKICAgICJub2IiOiAiTm9yd2VnaWFuIEJva21cdTAwZTVsIiwKICAgICJucGkiOiAiTmVwYWxpIiwKICAgICJueWEiOiAiTnlhbmphIiwKICAgICJvY2kiOiAiT2NjaXRhbiIsCiAgICAib3J5IjogIk9kaWEiLAogICAgInBhbiI6ICJQdW5qYWJpIiwKICAgICJwYnQiOiAiU291dGhlcm4gUGFzaHRvIiwKICAgICJwZXMiOiAiV2VzdGVybiBQZXJzaWFuIiwKICAgICJwb2wiOiAiUG9saXNoIiwKICAgICJwb3IiOiAiUG9ydHVndWVzZSIsCiAgICAicm9uIjogIlJvbWFuaWFuIiwKICAgICJydXMiOiAiUnVzc2lhbiIsCiAgICAic2xrIjogIlNsb3ZhayIsCiAgICAic2x2IjogIlNsb3ZlbmlhbiIsCiAgICAic25hIjogIlNob25hIiwKICAgICJzbmQiOiAiU2luZGhpIiwKICAgICJzb20iOiAiU29tYWxpIiwKICAgICJzcGEiOiAiU3BhbmlzaCIsCiAgICAic3JwIjogIlNlcmJpYW4iLAogICAgInN3ZSI6ICJTd2VkaXNoIiwKICAgICJzd2giOiAiU3dhaGlsaSIsCiAgICAidGFtIjogIlRhbWlsIiwKICAgICJ0ZWwiOiAiVGVsdWd1IiwKICAgICJ0Z2siOiAiVGFqaWsiLAogICAgInRnbCI6ICJUYWdhbG9nIiwKICAgICJ0aGEiOiAiVGhhaSIsCiAgICAidHVyIjogIlR1cmtpc2giLAogICAgInVrciI6ICJVa3JhaW5pYW4iLAogICAgInVyZCI6ICJVcmR1IiwKICAgICJ1em4iOiAiTm9ydGhlcm4gVXpiZWsiLAogICAgInZpZSI6ICJWaWV0bmFtZXNlIiwKICAgICJ4aG8iOiAiWGhvc2EiLAogICAgInlvciI6ICJZb3J1YmEiLAogICAgInl1ZSI6ICJDYW50b25lc2UiLAogICAgInpsbSI6ICJDb2xsb3F1aWFsIE1hbGF5IiwKICAgICJ6c20iOiAiU3RhbmRhcmQgTWFsYXkiLAogICAgInp1bCI6ICJadWx1IiwKfQo='),
    ('seamless/src/seamless_communication/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aAoKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IEZpbGVBc3NldE1ldGFkYXRhUHJvdmlkZXIsIGFzc2V0X3N0b3JlCgpfX3ZlcnNpb25fXyA9ICIwLjEuMCIKCgpkZWYgX3VwZGF0ZV9hc3NldF9zdG9yZSgpIC0+IE5vbmU6CiAgICBjYXJkc19kaXIgPSBQYXRoKF9fZmlsZV9fKS5wYXJlbnQuam9pbnBhdGgoImNhcmRzIikKCiAgICBhc3NldF9zdG9yZS5tZXRhZGF0YV9wcm92aWRlcnMuYXBwZW5kKEZpbGVBc3NldE1ldGFkYXRhUHJvdmlkZXIoY2FyZHNfZGlyKSkKCgpfdXBkYXRlX2Fzc2V0X3N0b3JlKCkK'),
    ('seamless/src/seamless_communication/store.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgpmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgSW5Qcm9jQXNzZXRNZXRhZGF0YVByb3ZpZGVyLCBhc3NldF9zdG9yZQoKCmRlZiBhZGRfZ2F0ZWRfYXNzZXRzKG1vZGVsX2RpcjogUGF0aCkgLT4gTm9uZToKICAgIGFzc2V0X3N0b3JlLmVudl9yZXNvbHZlcnMuYXBwZW5kKGxhbWJkYTogImdhdGVkIikKCiAgICBtb2RlbF9kaXIgPSBtb2RlbF9kaXIucmVzb2x2ZSgpCgogICAgZ2F0ZWRfbWV0YWRhdGEgPSBbCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJzZWFtbGVzc19leHByZXNzaXZpdHlAZ2F0ZWQiLAogICAgICAgICAgICAiY2hlY2twb2ludCI6IG1vZGVsX2Rpci5qb2lucGF0aCgibTJtX2V4cHJlc3NpdmVfdW5pdHkucHQiKSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAidm9jb2Rlcl9wcmV0c3NlbEBnYXRlZCIsCiAgICAgICAgICAgICJjaGVja3BvaW50IjogbW9kZWxfZGlyLmpvaW5wYXRoKCJwcmV0c3NlbF9tZWxoaWZpZ2FuX3dtLnB0IiksCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInZvY29kZXJfcHJldHNzZWxfMTZraHpAZ2F0ZWQiLAogICAgICAgICAgICAiY2hlY2twb2ludCI6IG1vZGVsX2Rpci5qb2lucGF0aCgicHJldHNzZWxfbWVsaGlmaWdhbl93bS0xNmtoei5wdCIpLAogICAgICAgIH0sCiAgICBdCgogICAgYXNzZXRfc3RvcmUubWV0YWRhdGFfcHJvdmlkZXJzLmFwcGVuZChJblByb2NBc3NldE1ldGFkYXRhUHJvdmlkZXIoZ2F0ZWRfbWV0YWRhdGEpKQo='),
    ('seamless/src/seamless_communication/inference/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLmdlbmVyYXRvciBpbXBvcnQgKAogICAgU2VxdWVuY2VHZW5lcmF0b3JPcHRpb25zIGFzIFNlcXVlbmNlR2VuZXJhdG9yT3B0aW9ucywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLmdlbmVyYXRvciBpbXBvcnQgVW5pdFlHZW5lcmF0b3IgYXMgVW5pdFlHZW5lcmF0b3IKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZS50cmFuc2xhdG9yIGltcG9ydCAoCiAgICBCYXRjaGVkU3BlZWNoT3V0cHV0IGFzIEJhdGNoZWRTcGVlY2hPdXRwdXQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZS50cmFuc2xhdG9yIGltcG9ydCBNb2RhbGl0eSBhcyBNb2RhbGl0eQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLnRyYW5zbGF0b3IgaW1wb3J0IFRhc2sgYXMgVGFzawpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLnRyYW5zbGF0b3IgaW1wb3J0IFRyYW5zbGF0b3IgYXMgVHJhbnNsYXRvcgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZS50cmFuc2NyaWJlciBpbXBvcnQgVHJhbnNjcmliZXIgYXMgVHJhbnNjcmliZXIK'),
    ('seamless/src/seamless_communication/inference/transcriber.py', ''),
    ('seamless/src/seamless_communication/inference/generator.py', ''),
    ('seamless/src/seamless_communication/inference/translator.py', ''),
    ('seamless/src/seamless_communication/cli/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/src/seamless_communication/cli/expressivity/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUu'),
    ('seamless/src/seamless_communication/cli/expressivity/data/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUu'),
    ('seamless/src/seamless_communication/cli/expressivity/data/prepare_mexpresso.py', ''),
    ('seamless/src/seamless_communication/cli/expressivity/evaluate/__init__.py', ''),
    ('seamless/src/seamless_communication/cli/expressivity/evaluate/post_process_pauserate.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBwYW5kYXMgYXMgcGQKaW1wb3J0IGNzdgppbXBvcnQgc2NpcHkKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QKCgpkZWYgZ2V0X3BhdXNlKHBhdXNlX2RhdGFfdHN2OiBzdHIpIC0+IERpY3Rbc3RyLCBmbG9hdF06CiAgICB1dHRfcGF1c2VfYWxpZ25fZGF0YSA9IHBkLnJlYWRfY3N2KAogICAgICAgIHBhdXNlX2RhdGFfdHN2LAogICAgICAgIHNlcD0iXHQiLAogICAgICAgIHF1b3Rpbmc9Y3N2LlFVT1RFX01JTklNQUwsCiAgICApCiAgICBtZXRyaWNzID0ge30KICAgIHBhdXNlX2R1cmF0aW9uX3dlaWdodCA9ICgKICAgICAgICB1dHRfcGF1c2VfYWxpZ25fZGF0YS50b3RhbF93ZWlnaHQgLyB1dHRfcGF1c2VfYWxpZ25fZGF0YS50b3RhbF93ZWlnaHQuc3VtKCkKICAgICkKICAgIGZvciBzY29yZV9uYW1lIGluIFsKICAgICAgICAid21lYW5fZHVyYXRpb25fc2NvcmUiLAogICAgICAgICJ3bWVhbl9hbGlnbm1lbnRfc2NvcmUiLAogICAgICAgICJ3bWVhbl9qb2ludF9zY29yZSIsCiAgICBdOgogICAgICAgIG1ldHJpY3Nbc2NvcmVfbmFtZV0gPSAoCiAgICAgICAgICAgIHV0dF9wYXVzZV9hbGlnbl9kYXRhW2Yie3Njb3JlX25hbWV9Il0gKiBwYXVzZV9kdXJhdGlvbl93ZWlnaHQKICAgICAgICApLnN1bSgpCiAgICByZXR1cm4gbWV0cmljcwoKCmRlZiBnZXRfcmF0ZSh0YXJnZXRfc3BlZWNoX3Rzdjogc3RyLCBzb3VyY2Vfc3BlZWNoX3Rzdjogc3RyKSAtPiBmbG9hdDoKICAgIHNwZWVjaF91bml0ID0gInN5bGxhYmxlIgoKICAgIHRhcmdldF9zcGVlY2hfZGYgPSBwZC5yZWFkX2NzdigKICAgICAgICB0YXJnZXRfc3BlZWNoX3Rzdiwgc2VwPSJcdCIsIHF1b3Rpbmc9Y3N2LlFVT1RFX01JTklNQUwKICAgICkuc2V0X2luZGV4KCJpZCIpCiAgICBzb3VyY2Vfc3BlZWNoX2RmID0gcGQucmVhZF9jc3YoCiAgICAgICAgc291cmNlX3NwZWVjaF90c3YsIHNlcD0iXHQiLCBxdW90aW5nPWNzdi5RVU9URV9NSU5JTUFMCiAgICApLnNldF9pbmRleCgiaWQiKQoKICAgICMgdXNpbmcgInN5bGxhYmxlIiBzcGVlY2ggdW5pdCBmb3IgcmF0ZSBjb21wdXRhdGlvbgogICAgc3JjX3NwZWVjaF9yYXRlID0gc291cmNlX3NwZWVjaF9kZltmInNwZWVjaF9yYXRlX3tzcGVlY2hfdW5pdH0iXS50b19udW1weSgpCiAgICB0Z3Rfc3BlZWNoX3JhdGUgPSB0YXJnZXRfc3BlZWNoX2RmW2Yic3BlZWNoX3JhdGVfe3NwZWVjaF91bml0fSJdLnRvX251bXB5KCkKICAgIHNyY190Z3Rfc3BlYXJtYW4gPSBzY2lweS5zdGF0cy5zcGVhcm1hbnIoc3JjX3NwZWVjaF9yYXRlLCB0Z3Rfc3BlZWNoX3JhdGUpCiAgICByZXR1cm4gc3JjX3RndF9zcGVhcm1hbi5jb3JyZWxhdGlvbiAgIyB0eXBlOiBpZ25vcmVbbm8tYW55LXJldHVybl0K'),
    ('seamless/src/seamless_communication/cli/expressivity/evaluate/evaluate.py', ''),
    ('seamless/src/seamless_communication/cli/expressivity/evaluate/run_asr_bleu.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gZmlyZSBpbXBvcnQgRmlyZQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLmV2YWxfdXRpbHMuY29tcHV0ZV9tZXRyaWNzIGltcG9ydCAoCiAgICBjb21wdXRlX3F1YWxpdHlfbWV0cmljcywKKQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGV2aWNlCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aAoKCmRlZiBydW5fYXNyX2JsZXVfZXhwcmVzc2l2ZV9tb2RlbCgKICAgIGdlbmVyYXRpb25fZGlyX3BhdGg6IHN0ciwKICAgIGdlbmVyYXRlX3Rzdl9maWxlbmFtZTogc3RyLAogICAgdGd0X2xhbmc6IHN0ciwKKToKICAgIGNvbXB1dGVfcXVhbGl0eV9tZXRyaWNzKAogICAgICAgIGYie2dlbmVyYXRpb25fZGlyX3BhdGh9L3tnZW5lcmF0ZV90c3ZfZmlsZW5hbWV9IiwKICAgICAgICBQYXRoKGdlbmVyYXRpb25fZGlyX3BhdGgpLAogICAgICAgIHRndF9sYW5nLAogICAgICAgICJTMlNUIiwKICAgICAgICBkZXZpY2U9RGV2aWNlKCJjdWRhIiksCiAgICAgICAgcmVmX3RleHRfY29sX25hbWU9InRndF90ZXh0IiwKICAgICAgICBwcmVkX3RleHRfY29sX25hbWU9InMydF9vdXQiLAogICAgICAgIHByZWRfYXVkaW9fY29sX25hbWU9Imh5cG9fYXVkaW8iLAogICAgKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBGaXJlKHJ1bl9hc3JfYmxldV9leHByZXNzaXZlX21vZGVsKQo='),
    ('seamless/src/seamless_communication/cli/expressivity/predict/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUu'),
    ('seamless/src/seamless_communication/cli/expressivity/predict/pretssel_generator.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QKCmltcG9ydCB0b3JjaApmcm9tIHRvcmNoLm5uIGltcG9ydCBNb2R1bGUKCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCgpmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgYXNzZXRfc3RvcmUKZnJvbSBmYWlyc2VxMi5kYXRhIGltcG9ydCAoCiAgICBDb2xsYXRlciwKICAgIFNlcXVlbmNlRGF0YSwKICAgIFZvY2FidWxhcnlJbmZvLAopCmZyb20gZmFpcnNlcTIubm4ucGFkZGluZyBpbXBvcnQgZ2V0X3NlcXNfYW5kX3BhZGRpbmdfbWFzawoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZSBpbXBvcnQgQmF0Y2hlZFNwZWVjaE91dHB1dApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmdlbmVyYXRvci5sb2FkZXIgaW1wb3J0IGxvYWRfcHJldHNzZWxfdm9jb2Rlcl9tb2RlbAoKCmNsYXNzIFByZXRzc2VsR2VuZXJhdG9yKE1vZHVsZSk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBwcmV0c3NlbF9uYW1lX29yX2NhcmQ6IHN0ciwKICAgICAgICB2b2NhYl9pbmZvOiBWb2NhYnVsYXJ5SW5mbywKICAgICAgICBkZXZpY2U6IERldmljZSwKICAgICAgICBkdHlwZTogRGF0YVR5cGUgPSB0b3JjaC5mbG9hdDE2LAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICAjIExvYWQgdGhlIG1vZGVsLgogICAgICAgIGlmIGRldmljZSA9PSB0b3JjaC5kZXZpY2UoImNwdSIpOgogICAgICAgICAgICBkdHlwZSA9IHRvcmNoLmZsb2F0MzIKCiAgICAgICAgc2VsZi5kZXZpY2UgPSBkZXZpY2UKICAgICAgICBzZWxmLmR0eXBlID0gZHR5cGUKCiAgICAgICAgc2VsZi5wcmV0c3NlbF9tb2RlbCA9IGxvYWRfcHJldHNzZWxfdm9jb2Rlcl9tb2RlbCgKICAgICAgICAgICAgcHJldHNzZWxfbmFtZV9vcl9jYXJkLAogICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1kdHlwZSwKICAgICAgICApCiAgICAgICAgc2VsZi5wcmV0c3NlbF9tb2RlbC5ldmFsKCkKCiAgICAgICAgdm9jb2Rlcl9tb2RlbF9jYXJkID0gYXNzZXRfc3RvcmUucmV0cmlldmVfY2FyZChwcmV0c3NlbF9uYW1lX29yX2NhcmQpCiAgICAgICAgc2VsZi5vdXRwdXRfc2FtcGxlX3JhdGUgPSB2b2NvZGVyX21vZGVsX2NhcmQuZmllbGQoInNhbXBsZV9yYXRlIikuYXNfKGludCkKCiAgICAgICAgc2VsZi52b2NhYl9pbmZvID0gdm9jYWJfaW5mbwogICAgICAgIHNlbGYudW5pdF9jb2xsYXRlID0gQ29sbGF0ZXIocGFkX3ZhbHVlPXZvY2FiX2luZm8ucGFkX2lkeCkKICAgICAgICBzZWxmLmR1cmF0aW9uX2NvbGxhdGUgPSBDb2xsYXRlcihwYWRfdmFsdWU9MCkKICAgICAgICBzZWxmLnVuaXRfZW9zX3Rva2VuID0gdG9yY2gudGVuc29yKFt2b2NhYl9pbmZvLmVvc19pZHhdLCBkZXZpY2U9ZGV2aWNlKQoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgcHJlZGljdCgKICAgICAgICBzZWxmLAogICAgICAgIHVuaXRzOiBMaXN0W0xpc3RbaW50XV0sCiAgICAgICAgdGd0X2xhbmc6IHN0ciwKICAgICAgICBwcm9zb2R5X2VuY29kZXJfaW5wdXQ6IFNlcXVlbmNlRGF0YSwKICAgICkgLT4gQmF0Y2hlZFNwZWVjaE91dHB1dDoKCiAgICAgICAgdW5pdHNfYmF0Y2gsIGR1cmF0aW9ucyA9IFtdLCBbXQogICAgICAgIGZvciB1IGluIHVuaXRzOgogICAgICAgICAgICB1bml0ID0gdG9yY2gudGVuc29yKHUpLnRvKHNlbGYudW5pdF9lb3NfdG9rZW4pCgogICAgICAgICAgICAjIGFkanVzdCB0aGUgY29udHJvbCBzeW1ib2xzIGZvciB0aGUgZW1iZWRkaW5nCiAgICAgICAgICAgIHVuaXQgKz0gNAogICAgICAgICAgICB1bml0ID0gdG9yY2guY2F0KFt1bml0LCBzZWxmLnVuaXRfZW9zX3Rva2VuXSwgZGltPTApCgogICAgICAgICAgICB1bml0LCBkdXJhdGlvbiA9IHRvcmNoLnVuaXF1ZV9jb25zZWN1dGl2ZSh1bml0LCByZXR1cm5fY291bnRzPVRydWUpCgogICAgICAgICAgICAjIGFkanVzdCBmb3IgdGhlIGxhc3QgZW9zIHRva2VuCiAgICAgICAgICAgIGR1cmF0aW9uWy0xXSA9IDAKCiAgICAgICAgICAgIHVuaXRzX2JhdGNoLmFwcGVuZCh1bml0KQogICAgICAgICAgICBkdXJhdGlvbnMuYXBwZW5kKGR1cmF0aW9uICogMikKCiAgICAgICAgc3BlZWNoX3VuaXRzID0gc2VsZi51bml0X2NvbGxhdGUodW5pdHNfYmF0Y2gpCiAgICAgICAgZHVyYXRpb25zID0gc2VsZi5kdXJhdGlvbl9jb2xsYXRlKGR1cmF0aW9ucylbInNlcXMiXQoKICAgICAgICB1bml0c190ZW5zb3IsIHVuaXRfcGFkZGluZ19tYXNrID0gZ2V0X3NlcXNfYW5kX3BhZGRpbmdfbWFzayhzcGVlY2hfdW5pdHMpCiAgICAgICAgcHJvc29keV9pbnB1dF9zZXFzLCBwcm9zb2R5X3BhZGRpbmdfbWFzayA9IGdldF9zZXFzX2FuZF9wYWRkaW5nX21hc2soCiAgICAgICAgICAgIHByb3NvZHlfZW5jb2Rlcl9pbnB1dAogICAgICAgICkKCiAgICAgICAgYXVkaW9fd2F2cyA9IHNlbGYucHJldHNzZWxfbW9kZWwoCiAgICAgICAgICAgIHVuaXRzX3RlbnNvciwKICAgICAgICAgICAgdGd0X2xhbmcsCiAgICAgICAgICAgIHByb3NvZHlfaW5wdXRfc2VxcywKICAgICAgICAgICAgcGFkZGluZ19tYXNrPXVuaXRfcGFkZGluZ19tYXNrLAogICAgICAgICAgICBwcm9zb2R5X3BhZGRpbmdfbWFzaz1wcm9zb2R5X3BhZGRpbmdfbWFzaywKICAgICAgICAgICAgZHVyYXRpb25zPWR1cmF0aW9ucywKICAgICAgICApCiAgICAgICAgcmV0dXJuIEJhdGNoZWRTcGVlY2hPdXRwdXQoCiAgICAgICAgICAgIHVuaXRzPXVuaXRzLAogICAgICAgICAgICBhdWRpb193YXZzPWF1ZGlvX3dhdnMsCiAgICAgICAgICAgIHNhbXBsZV9yYXRlPXNlbGYub3V0cHV0X3NhbXBsZV9yYXRlLAogICAgICAgICkK'),
    ('seamless/src/seamless_communication/cli/expressivity/predict/predict.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBhcmdwYXJzZQppbXBvcnQgbG9nZ2luZwppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoYXVkaW8KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgpmcm9tIGZhaXJzZXEyLmRhdGEgaW1wb3J0IFNlcXVlbmNlRGF0YQpmcm9tIGZhaXJzZXEyLmRhdGEuYXVkaW8gaW1wb3J0IFdhdmVmb3JtVG9GYmFua0NvbnZlcnRlcgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5leHByZXNzaXZpdHkucHJlZGljdC5wcmV0c3NlbF9nZW5lcmF0b3IgaW1wb3J0ICgKICAgIFByZXRzc2VsR2VuZXJhdG9yLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkubTR0LnByZWRpY3QgaW1wb3J0ICgKICAgIGFkZF9pbmZlcmVuY2VfYXJndW1lbnRzLAogICAgc2V0X2dlbmVyYXRpb25fb3B0cywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlIGltcG9ydCBUcmFuc2xhdG9yCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkgaW1wb3J0ICgKICAgIGxvYWRfZ2Ntdm5fc3RhdHMsCiAgICBsb2FkX3VuaXR5X3VuaXRfdG9rZW5pemVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdG9yZSBpbXBvcnQgYWRkX2dhdGVkX2Fzc2V0cwoKCkFVRElPX1NBTVBMRV9SQVRFID0gMTYwMDAKCgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5JTkZPLAogICAgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKGxldmVsbmFtZSlzIC0tICUobmFtZSlzOiAlKG1lc3NhZ2UpcyIsCikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmRlZiByZW1vdmVfcHJvc29keV90b2tlbnNfZnJvbV90ZXh0KHRleHQ6IHN0cikgLT4gc3RyOgogICAgIyBmaWx0ZXIgb3V0IHByb3NvZHkgdG9rZW5zLCB0aGVyZSBpcyBvbmx5IGVtcGhhc2lzICcqJywgYW5kIHBhdXNlICc9JwogICAgdGV4dCA9IHRleHQucmVwbGFjZSgiKiIsICIiKS5yZXBsYWNlKCI9IiwgIiIpCiAgICB0ZXh0ID0gIiAiLmpvaW4odGV4dC5zcGxpdCgpKQogICAgcmV0dXJuIHRleHQKCgpkZWYgbWFpbigpIC0+IE5vbmU6CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihkZXNjcmlwdGlvbj0iUnVubmluZyBTZWFtbGVzc0V4cHJlc3NpdmUgaW5mZXJlbmNlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCJpbnB1dCIsIHR5cGU9c3RyLCBoZWxwPSJBdWRpbyBXQVYgZmlsZSBwYXRoLiIpCgogICAgcGFyc2VyID0gYWRkX2luZmVyZW5jZV9hcmd1bWVudHMocGFyc2VyKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1nYXRlZC1tb2RlbC1kaXIiLAogICAgICAgIHR5cGU9UGF0aCwKICAgICAgICByZXF1aXJlZD1GYWxzZSwKICAgICAgICBoZWxwPSJTZWFtbGVzc0V4cHJlc3NpdmUgbW9kZWwgZGlyZWN0b3J5LiIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWR1cmF0aW9uX2ZhY3RvciIsCiAgICAgICAgdHlwZT1mbG9hdCwKICAgICAgICBoZWxwPSJUaGUgZHVyYXRpb24gZmFjdG9yIGZvciBOQVIgVDJVIG1vZGVsLiIsCiAgICAgICAgZGVmYXVsdD0xLjAsCiAgICApCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIGlmIG5vdCBhcmdzLnRndF9sYW5nIG9yIGFyZ3Mub3V0cHV0X3BhdGggaXMgTm9uZToKICAgICAgICByYWlzZSBFeGNlcHRpb24oCiAgICAgICAgICAgICItLXRndF9sYW5nLCAtLW91dHB1dF9wYXRoIG11c3QgYmUgcHJvdmlkZWQgZm9yIFNlYW1sZXNzRXhwcmVzc2l2ZSBpbmZlcmVuY2UuIgogICAgICAgICkKICAgICAgICAKICAgIGlmIGFyZ3MuZ2F0ZWRfbW9kZWxfZGlyOgogICAgICAgIGFkZF9nYXRlZF9hc3NldHMoYXJncy5nYXRlZF9tb2RlbF9kaXIpCiAgICAKICAgIGlmIHRvcmNoLmN1ZGEuaXNfYXZhaWxhYmxlKCk6CiAgICAgICAgZGV2aWNlID0gdG9yY2guZGV2aWNlKCJjdWRhOjAiKQogICAgICAgIGR0eXBlID0gdG9yY2guZmxvYXQxNgogICAgZWxzZToKICAgICAgICBkZXZpY2UgPSB0b3JjaC5kZXZpY2UoImNwdSIpCiAgICAgICAgZHR5cGUgPSB0b3JjaC5mbG9hdDMyCgogICAgbG9nZ2VyLmluZm8oZiJSdW5uaW5nIGluZmVyZW5jZSBvbiB7ZGV2aWNlPX0gd2l0aCB7ZHR5cGU9fS4iKQoKICAgIHVuaXRfdG9rZW5pemVyID0gbG9hZF91bml0eV91bml0X3Rva2VuaXplcihhcmdzLm1vZGVsX25hbWUpCiAgICAKICAgIHRyYW5zbGF0b3IgPSBUcmFuc2xhdG9yKAogICAgICAgIGFyZ3MubW9kZWxfbmFtZSwKICAgICAgICB2b2NvZGVyX25hbWVfb3JfY2FyZD1Ob25lLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApCgogICAgcHJldHNzZWxfZ2VuZXJhdG9yID0gUHJldHNzZWxHZW5lcmF0b3IoCiAgICAgICAgYXJncy52b2NvZGVyX25hbWUsCiAgICAgICAgdm9jYWJfaW5mbz11bml0X3Rva2VuaXplci52b2NhYl9pbmZvLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApCgogICAgZmJhbmtfZXh0cmFjdG9yID0gV2F2ZWZvcm1Ub0ZiYW5rQ29udmVydGVyKAogICAgICAgIG51bV9tZWxfYmlucz04MCwKICAgICAgICB3YXZlZm9ybV9zY2FsZT0yKioxNSwKICAgICAgICBjaGFubmVsX2xhc3Q9VHJ1ZSwKICAgICAgICBzdGFuZGFyZGl6ZT1GYWxzZSwKICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgIGR0eXBlPWR0eXBlLAogICAgKQoKICAgIF9nY212bl9tZWFuLCBfZ2Ntdm5fc3RkID0gbG9hZF9nY212bl9zdGF0cyhhcmdzLnZvY29kZXJfbmFtZSkKICAgIGdjbXZuX21lYW4gPSB0b3JjaC50ZW5zb3IoX2djbXZuX21lYW4sIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKQogICAgZ2Ntdm5fc3RkID0gdG9yY2gudGVuc29yKF9nY212bl9zdGQsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKQoKICAgIHdhdiwgc2FtcGxlX3JhdGUgPSB0b3JjaGF1ZGlvLmxvYWQoYXJncy5pbnB1dCkKICAgIHdhdiA9IHRvcmNoYXVkaW8uZnVuY3Rpb25hbC5yZXNhbXBsZSh3YXYsIG9yaWdfZnJlcT1zYW1wbGVfcmF0ZSwgbmV3X2ZyZXE9MTZfMDAwKQogICAgd2F2ID0gd2F2LnRyYW5zcG9zZSgwLCAxKQoKICAgIGRhdGEgPSBmYmFua19leHRyYWN0b3IoCiAgICAgICAgewogICAgICAgICAgICAid2F2ZWZvcm0iOiB3YXYsCiAgICAgICAgICAgICJzYW1wbGVfcmF0ZSI6IDE2MDAwLAogICAgICAgIH0KICAgICkKICAgIGZiYW5rID0gZGF0YVsiZmJhbmsiXQogICAgZ2Ntdm5fZmJhbmsgPSBmYmFuay5zdWJ0cmFjdChnY212bl9tZWFuKS5kaXZpZGUoZ2Ntdm5fc3RkKQogICAgc3RkLCBtZWFuID0gdG9yY2guc3RkX21lYW4oZmJhbmssIGRpbT0wKQogICAgZmJhbmsgPSBmYmFuay5zdWJ0cmFjdChtZWFuKS5kaXZpZGUoc3RkKQoKICAgIHNyYyA9IFNlcXVlbmNlRGF0YSgKICAgICAgICBzZXFzPWZiYW5rLnVuc3F1ZWV6ZSgwKSwKICAgICAgICBzZXFfbGVucz10b3JjaC5Mb25nVGVuc29yKFtmYmFuay5zaGFwZVswXV0pLAogICAgICAgIGlzX3JhZ2dlZD1GYWxzZSwKICAgICkKICAgIHNyY19nY212biA9IFNlcXVlbmNlRGF0YSgKICAgICAgICBzZXFzPWdjbXZuX2ZiYW5rLnVuc3F1ZWV6ZSgwKSwKICAgICAgICBzZXFfbGVucz10b3JjaC5Mb25nVGVuc29yKFtnY212bl9mYmFuay5zaGFwZVswXV0pLAogICAgICAgIGlzX3JhZ2dlZD1GYWxzZSwKICAgICkKCiAgICB0ZXh0X2dlbmVyYXRpb25fb3B0cywgdW5pdF9nZW5lcmF0aW9uX29wdHMgPSBzZXRfZ2VuZXJhdGlvbl9vcHRzKGFyZ3MpCgogICAgbG9nZ2VyLmluZm8oZiJ7dGV4dF9nZW5lcmF0aW9uX29wdHM9fSIpCiAgICBsb2dnZXIuaW5mbyhmInt1bml0X2dlbmVyYXRpb25fb3B0cz19IikKICAgIGxvZ2dlci5pbmZvKAogICAgICAgIGYidW5pdF9nZW5lcmF0aW9uX25ncmFtX2ZpbHRlcmluZz17YXJncy51bml0X2dlbmVyYXRpb25fbmdyYW1fZmlsdGVyaW5nfSIKICAgICkKCiAgICB0ZXh0X291dHB1dCwgdW5pdF9vdXRwdXQgPSB0cmFuc2xhdG9yLnByZWRpY3QoCiAgICAgICAgc3JjLAogICAgICAgICJzMnN0IiwKICAgICAgICBhcmdzLnRndF9sYW5nLAogICAgICAgIHRleHRfZ2VuZXJhdGlvbl9vcHRzPXRleHRfZ2VuZXJhdGlvbl9vcHRzLAogICAgICAgIHVuaXRfZ2VuZXJhdGlvbl9vcHRzPXVuaXRfZ2VuZXJhdGlvbl9vcHRzLAogICAgICAgIHVuaXRfZ2VuZXJhdGlvbl9uZ3JhbV9maWx0ZXJpbmc9YXJncy51bml0X2dlbmVyYXRpb25fbmdyYW1fZmlsdGVyaW5nLAogICAgICAgIGR1cmF0aW9uX2ZhY3Rvcj1hcmdzLmR1cmF0aW9uX2ZhY3RvciwKICAgICAgICBwcm9zb2R5X2VuY29kZXJfaW5wdXQ9c3JjX2djbXZuLAogICAgKQoKICAgIGFzc2VydCB1bml0X291dHB1dCBpcyBub3QgTm9uZQogICAgc3BlZWNoX291dHB1dCA9IHByZXRzc2VsX2dlbmVyYXRvci5wcmVkaWN0KAogICAgICAgIHVuaXRfb3V0cHV0LnVuaXRzLAogICAgICAgIHRndF9sYW5nPWFyZ3MudGd0X2xhbmcsCiAgICAgICAgcHJvc29keV9lbmNvZGVyX2lucHV0PXNyY19nY212biwKICAgICkKCiAgICBsb2dnZXIuaW5mbyhmIlNhdmluZyBleHByZXNzaXZlIHRyYW5zbGF0ZWQgYXVkaW8gaW4ge2FyZ3MudGd0X2xhbmd9IikKICAgIHRvcmNoYXVkaW8uc2F2ZSgKICAgICAgICBhcmdzLm91dHB1dF9wYXRoLAogICAgICAgIHNwZWVjaF9vdXRwdXQuYXVkaW9fd2F2c1swXVswXS50byh0b3JjaC5mbG9hdDMyKS5jcHUoKSwKICAgICAgICBzYW1wbGVfcmF0ZT1zcGVlY2hfb3V0cHV0LnNhbXBsZV9yYXRlLAogICAgKQoKICAgIHRleHRfb3V0ID0gcmVtb3ZlX3Byb3NvZHlfdG9rZW5zX2Zyb21fdGV4dChzdHIodGV4dF9vdXRwdXRbMF0pKQoKICAgIGxvZ2dlci5pbmZvKGYiVHJhbnNsYXRlZCB0ZXh0IGluIHthcmdzLnRndF9sYW5nfToge3RleHRfb3V0fSIpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo='),
    ('seamless/src/seamless_communication/cli/eval_utils/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLmV2YWxfdXRpbHMuY29tcHV0ZV9tZXRyaWNzIGltcG9ydCAoCiAgICBjb21wdXRlX3F1YWxpdHlfbWV0cmljcyBhcyBjb21wdXRlX3F1YWxpdHlfbWV0cmljcywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLmV2YWxfdXRpbHMuY29tcHV0ZV9tZXRyaWNzIGltcG9ydCAoCiAgICBnZXRfdG9rZW5pemVyIGFzIGdldF90b2tlbml6ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5ldmFsX3V0aWxzLmxhbmdfbWFwcGluZyBpbXBvcnQgKAogICAgTEFORzJfTEFORzMgYXMgTEFORzJfTEFORzMsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5ldmFsX3V0aWxzLmxhbmdfbWFwcGluZyBpbXBvcnQgKAogICAgTEFORzNfTEFORzIgYXMgTEFORzNfTEFORzIsCikK'),
    ('seamless/src/seamless_communication/cli/eval_utils/compute_metrics.py', ''),
    ('seamless/src/seamless_communication/cli/eval_utils/lang_mapping.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCkxBTkcyX0xBTkczID0gewogICAgImVuIjogImVuZyIsCiAgICAiYXIiOiAiYXJiIiwKICAgICJhcyI6ICJhc20iLAogICAgImJlIjogImJlbCIsCiAgICAiYmciOiAiYnVsIiwKICAgICJibiI6ICJiZW4iLAogICAgImNhIjogImNhdCIsCiAgICAiY2tiIjogImNrYiIsCiAgICAiY3MiOiAiY2VzIiwKICAgICJjeSI6ICJjeW0iLAogICAgImRhIjogImRhbiIsCiAgICAiZGUiOiAiZGV1IiwKICAgICJlbCI6ICJlbGwiLAogICAgImVzIjogInNwYSIsCiAgICAiZXQiOiAiZXN0IiwKICAgICJmYSI6ICJwZXMiLAogICAgImZpIjogImZpbiIsCiAgICAiZnIiOiAiZnJhIiwKICAgICJnYSI6ICJnbGUiLAogICAgImhpIjogImhpbiIsCiAgICAiaHUiOiAiaHVuIiwKICAgICJpZCI6ICJpbmQiLAogICAgIml0IjogIml0YSIsCiAgICAiamEiOiAianBuIiwKICAgICJrYSI6ICJrYXQiLAogICAgImt5IjogImtpciIsCiAgICAibGciOiAibHVnIiwKICAgICJsdCI6ICJsaXQiLAogICAgImx2IjogImx2cyIsCiAgICAibW4iOiAia2hrIiwKICAgICJtciI6ICJtYXIiLAogICAgIm10IjogIm1sdCIsCiAgICAibmwiOiAibmxkIiwKICAgICJwYSI6ICJwYW4iLAogICAgInBsIjogInBvbCIsCiAgICAicHQiOiAicG9yIiwKICAgICJybyI6ICJyb24iLAogICAgInJ1IjogInJ1cyIsCiAgICAic2siOiAic2xrIiwKICAgICJzbCI6ICJzbHYiLAogICAgInN2IjogInN3ZSIsCiAgICAic3ciOiAic3doIiwKICAgICJ0YSI6ICJ0YW0iLAogICAgInRoIjogInRoYSIsCiAgICAidHIiOiAidHVyIiwKICAgICJ1ayI6ICJ1a3IiLAogICAgInVyIjogInVyZCIsCiAgICAidXoiOiAidXpuIiwKICAgICJ2aSI6ICJ2aWUiLAogICAgInl1ZSI6ICJ5dWUiLAogICAgImFmIjogImFmciIsCiAgICAiaXMiOiAiaXNsIiwKICAgICJsYiI6ICJsdHoiLAogICAgIm5vIjogIm5vYiIsCiAgICAiZ2wiOiAiZ2xnIiwKICAgICJrZWEiOiAia2VhIiwKICAgICJicyI6ICJib3MiLAogICAgImhyIjogImhydiIsCiAgICAibWsiOiAibWtkIiwKICAgICJzciI6ICJzcnAiLAogICAgImh5IjogImh5ZSIsCiAgICAiYXoiOiAiYXpqIiwKICAgICJrayI6ICJrYXoiLAogICAgImtvIjogImtvciIsCiAgICAiZ3UiOiAiZ3VqIiwKICAgICJrbiI6ICJrYW4iLAogICAgIm5lIjogIm5waSIsCiAgICAib3IiOiAib3J5IiwKICAgICJzZCI6ICJzbmQiLAogICAgInRlIjogInRlbCIsCiAgICAiY2ViIjogImNlYiIsCiAgICAianYiOiAiamF2IiwKICAgICJtcyI6ICJ6bG0iLAogICAgIm1sIjogIm1hbCIsCiAgICAidGwiOiAidGdsIiwKICAgICJ0bCI6ICJmaWwiLAogICAgIm15IjogIm15YSIsCiAgICAia20iOiAia2htIiwKICAgICJsbyI6ICJsYW8iLAogICAgImhlIjogImhlYiIsCiAgICAicHMiOiAicGJ0IiwKICAgICJ0ZyI6ICJ0Z2siLAogICAgImFtIjogImFtaCIsCiAgICAiaWciOiAiaWJvIiwKICAgICJsbiI6ICJsaW4iLAogICAgIm5zbyI6ICJuc28iLAogICAgInNvIjogInNvbSIsCiAgICAieGgiOiAieGhvIiwKICAgICJ5byI6ICJ5b3IiLAogICAgInp1IjogInp1bCIsCiAgICAia2FtIjogImthbSIsCiAgICAibHVvIjogImx1byIsCiAgICAibnkiOiAibnlhIiwKICAgICJvbSI6ICJnYXoiLAogICAgInNuIjogInNuYSIsCiAgICAidW1iIjogInVtYiIsCiAgICAiZ2EtSUUiOiAiZ2xlIiwKICAgICJwYSI6ICJwYW4iLAogICAgInN2IjogInN3ZSIsCiAgICAiYXN0IjogImFzdCIsCiAgICAiZmYiOiAiZnVsIiwKICAgICJtaSI6ICJtcmkiLAogICAgImhhIjogImhhdSIsCiAgICAid28iOiAid29sIiwKICAgICJvYyI6ICJvY2kiLAogICAgImlsbyI6ICJpbG8iLAogICAgImJhIjogImJhayIsCiAgICAiYnIiOiAiYnJlIiwKICAgICJmeSI6ICJmcnkiLAogICAgInlpIjogInlpZCIsCiAgICAidG4iOiAidHNuIiwKICAgICJnZCI6ICJnbGEiLAogICAgImh0IjogImhhdCIsCiAgICAibWciOiAibWxnIiwKICAgICJucyI6ICJuc28iLAogICAgInNpIjogInNpbiIsCiAgICAic3EiOiAic3FpIiwKICAgICJzcyI6ICJzc3ciLAogICAgInN1IjogInN1biIsCiAgICAiemgiOiAiY21uIiwKICAgICJhYiI6ICJhYmsiLAogICAgImJhcyI6ICJiYXMiLAogICAgImNuaCI6ICJjbmgiLAogICAgImN2IjogImNodiIsCiAgICAiZHYiOiAiZGl2IiwKICAgICJlbyI6ICJlcG8iLAogICAgImV1IjogImV1cyIsCiAgICAiZnktTkwiOiAiZnJ5IiwKICAgICJnbiI6ICJncm4iLAogICAgImhzYiI6ICJoc2IiLAogICAgImh5IjogImh5ZSIsCiAgICAiaWEiOiAiaW5hIiwKICAgICJrYWIiOiAia2FiIiwKICAgICJrbXIiOiAia21yIiwKICAgICJtZGYiOiAibWRmIiwKICAgICJtaHIiOiAibWhyIiwKICAgICJteXYiOiAibXl2IiwKICAgICJuYW4tdHciOiAiaGJsIiwKICAgICJuZSI6ICJucGkiLAogICAgIm5uLU5PIjogIm5ubyIsCiAgICAicm0tc3Vyc2lsdiI6ICJybS1zdXJzaWx2IiwKICAgICJybS12YWxsYWRlciI6ICJybS12YWxsYWRlciIsCiAgICAicnciOiAia2luIiwKICAgICJzYWgiOiAic2FoIiwKICAgICJzYXQiOiAic2F0IiwKICAgICJzYyI6ICJzcmQiLAogICAgInRpZyI6ICJ0aWciLAogICAgInRvayI6ICJ0b2siLAogICAgInR0IjogInRhdCIsCiAgICAidWciOiAidWlnIiwKICAgICJ2b3QiOiAidm90IiwKICAgICJtcmoiOiAibXJqIiwKICAgICJza3IiOiAic2tyIiwKICAgICJ0aSI6ICJ0aXIiLAogICAgInR3IjogInR3aSIsCiAgICAiYm8iOiAiYm9kIiwKICAgICJmbyI6ICJmYW8iLAogICAgImd2IjogImdsdiIsCiAgICAiaGF3IjogImhhdyIsCiAgICAibGEiOiAibGF0IiwKICAgICJzYSI6ICJzYW4iLAogICAgInNjbyI6ICJzY28iLAogICAgIndhciI6ICJ3YXIiLAogICAgImhlIjogImhlYiIsCiAgICAianciOiAiamF2IiwKICAgICJubiI6ICJubm8iLAogICAgInRrIjogInR1ayIsCn0KTEFORzNfTEFORzIgPSB7djogayBmb3IgaywgdiBpbiBMQU5HMl9MQU5HMy5pdGVtcygpfQo='),
    ('seamless/src/seamless_communication/cli/m4t/__init__.py', ''),
    ('seamless/src/seamless_communication/cli/m4t/audio_to_units/audio_to_units.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojCiMgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBsb2dnaW5nCgppbXBvcnQgdG9yY2gKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdF9leHRyYWN0b3IgaW1wb3J0IFVuaXRFeHRyYWN0b3IKCmxvZ2dpbmcuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2luZy5JTkZPKQpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpkZWYgbWFpbigpOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoCiAgICAgICAgZGVzY3JpcHRpb249IkNvbnZlcnQgcmF3IGF1ZGlvIHRvIHVuaXRzIChhbmQgb3B0aW9uYWxseSBhdWRpbykgdXNpbmcgVW5pdEV4dHJhY3Rvci4iCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCJhdWRpbyIsIHR5cGU9c3RyLCBoZWxwPSJBdWRpbyBXQVYgZmlsZSBwYXRoLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWttZWFuc191cmkiLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIGhlbHA9IlVSTCBwYXRoIHRvIHRoZSBLLU1lYW5zIG1vZGVsLiIsCiAgICAgICAgZGVmYXVsdD0iaHR0cHM6Ly9kbC5mYmFpcHVibGljZmlsZXMuY29tL3NlYW1sZXNzTTRUL21vZGVscy91bml0X2V4dHJhY3Rpb24va21lYW5zXzEway5ucHkiLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1tb2RlbF9uYW1lIiwKICAgICAgICB0eXBlPXN0ciwKICAgICAgICBoZWxwPSJGZWF0dXJlIGV4dHJhY3Rpb24gbW9kZWwgbmFtZSAoYHhsc3IyXzFiX3YyYCkiLAogICAgICAgIGRlZmF1bHQ9Inhsc3IyXzFiX3YyIiwKICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0tb3V0X2xheWVyX251bWJlciIsCiAgICAgICAgdHlwZT1pbnQsCiAgICAgICAgaGVscD0iTGF5ZXIgbnVtYmVyIG9mIHRoZSBmZWF0dXJlIGV4dHJhY3Rpb24gbW9kZWwgdG8gcHVsbCBvdXQgZmVhdHVyZXMgZnJvbS4iLAogICAgICAgIGRlZmF1bHQ9MzUsCiAgICApCgogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICBpZiB0b3JjaC5jdWRhLmlzX2F2YWlsYWJsZSgpOgogICAgICAgIGRldmljZSA9IHRvcmNoLmRldmljZSgiY3VkYTowIikKICAgICAgICBsb2dnZXIuaW5mbygiUnVubmluZyB1bml0X2V4dHJhY3Rpb24gb24gdGhlIEdQVS4iKQogICAgZWxzZToKICAgICAgICBkZXZpY2UgPSB0b3JjaC5kZXZpY2UoImNwdSIpCiAgICAgICAgbG9nZ2VyLmluZm8oIlJ1bm5pbmcgdW5pdF9leHRyYWN0aW9uIG9uIHRoZSBDUFUuIikKCiAgICB1bml0X2V4dHJhY3RvciA9IFVuaXRFeHRyYWN0b3IoYXJncy5tb2RlbF9uYW1lLCBhcmdzLmttZWFuc191cmksIGRldmljZT1kZXZpY2UpCiAgICB1bml0cyA9IHVuaXRfZXh0cmFjdG9yLnByZWRpY3QoYXJncy5hdWRpbywgYXJncy5vdXRfbGF5ZXJfbnVtYmVyIC0gMSkKICAgIGxvZ2dlci5pbmZvKGYiQ29udmVydGVkIHRvIHVuaXRzOiB7dW5pdHN9IikKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg=='),
    ('seamless/src/seamless_communication/cli/m4t/audio_to_units/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCg=='),
    ('seamless/src/seamless_communication/cli/m4t/evaluate/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCg=='),
    ('seamless/src/seamless_communication/cli/m4t/evaluate/evaluate.py', ''),
    ('seamless/src/seamless_communication/cli/m4t/finetune/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCg=='),
    ('seamless/src/seamless_communication/cli/m4t/finetune/dataset.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgppbXBvcnQgYXJncGFyc2UKaW1wb3J0IGRhdGFjbGFzc2VzCmltcG9ydCBqc29uCmltcG9ydCBsb2dnaW5nCmltcG9ydCBvcwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSB0cWRtIGltcG9ydCB0cWRtCgppbXBvcnQgdG9yY2gKCmZyb20gZGF0YXNldHMgaW1wb3J0IGxvYWRfZGF0YXNldApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uZGF0YXNldHMuaHVnZ2luZ2ZhY2UgaW1wb3J0ICgKICAgIFNwZWVjaDJTcGVlY2hGbGV1cnNEYXRhc2V0QnVpbGRlciwKICAgIFNwZWVjaFRva2VuaXplciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXRfZXh0cmFjdG9yIGltcG9ydCBVbml0RXh0cmFjdG9yCgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5JTkZPLAogICAgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKGxldmVsbmFtZSlzIC0tICUobmFtZSlzOiAlKG1lc3NhZ2UpcyIsCikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJkYXRhc2V0IikKCgpTVVBQT1JURURfREFUQVNFVFMgPSBbJ2dvb2dsZS9mbGV1cnMnLCAnc3BlZWNoY29sYWIvZ2lnYXNwZWVjaCddCiIiIiBMaXN0IG9mIEh1Z2dpbmdmYWNlIERhdGFzZXRzIHRoYXQgd2Ugc3VwcG9ydCBhdCB0aGUgbW9tZW50CiIiIgoKIyBGdWxsIGxpc3Qgb2YgRkxFVVJTIGxhbmdjb2RlcyBpcyBhdmFpbGFibGUgYXQgaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kYXRhc2V0cy9nb29nbGUvZmxldXJzCiMgRnVsbCBsaXN0IG9mIE00VCBsYW5nY29kZXMgaXMgYXZhaWxhYmxlCiMgaW4gcGFwZXIgIlNlYW1sZXNzTTRU4oCUTWFzc2l2ZWx5IE11bHRpbGluZ3VhbCAmIE11bHRpbW9kYWwgTWFjaGluZSBUcmFuc2xhdGlvbiIgKFRhYmxlIDUpClVOSVRZX1RPX0ZMRVVSU19MQU5HX01BUFBJTkcgPSB7CiAgICAiZW5nIjogImVuX3VzIiwKICAgICJpdGEiOiAiaXRfaXQiLAogICAgImFmciI6ICJhZl96YSIsCiAgICAiYXNtIjogImFzX2luIiwKICAgICJiZWwiOiAiYmVfYnkiLAogICAgImJ1bCI6ICJiZ19iZyIsCiAgICAiYmVuIjogImJuX2luIiwKICAgICJjYXQiOiAiY2FfZXMiLAogICAgImNlcyI6ICJjc19jeiIsCiAgICAiZGFuIjogImRhX2RrIiwKICAgICJkZXUiOiAiZGVfZGUiLAogICAgImVsbCI6ICJlbF9nciIsCiAgICAiZmluIjogImZpX2ZpIiwKICAgICJmcmEiOiAiZnJfZnIiLAogICAgImdsZyI6ICJnbF9lcyIsCiAgICAiaGViIjogImhlX2lsIiwKICAgICJoaW4iOiAiaGlfaW4iLAogICAgImhydiI6ICJocl9ociIsCiAgICAiaHVuIjogImh1X2h1IiwKICAgICJpbmQiOiAiaWRfaWQiLAogICAgImlibyI6ICJpZ19uZyIsCiAgICAiaXNsIjogImlzX2lzIiwKICAgICJpdGEiOiAiaXRfaXQiLAogICAgImpwbiI6ICJqYV9qcCIsCiAgICAiamF2IjogImp2X2lkIiwKICAgICJrYXoiOiAia2tfa3oiLAogICAgImthbiI6ICJrbl9pbiIsCiAgICAia2lyIjogImt5X2tnIiwKICAgICJrb3IiOiAia29fa3IiLAogICAgImxpdCI6ICJsdF9sdCIsCiAgICAibWtkIjogIm1rX21rIiwKICAgICJtbHQiOiAibXRfbXQiLAogICAgIm15YSI6ICJteV9tbSIsCiAgICAibmxkIjogIm5sX25sIiwKICAgICJwYW4iOiAicGFfaW4iLAogICAgInBvbCI6ICJwbF9wbCIsCiAgICAicm9uIjogInJvX3JvIiwKICAgICJydXMiOiAicnVfcnUiLAogICAgInNuZCI6ICJzZF9pbiIsCiAgICAic2xrIjogInNrX3NrIiwKICAgICJzcGEiOiAiZXNfNDE5IiwKICAgICJzcnAiOiAic3JfcnMiLAogICAgInN3aCI6ICJzd19rZSIsCiAgICAidGFtIjogInRhX2luIiwKICAgICJ0ZWwiOiAidGVfaW4iLAogICAgInRoYSI6ICJ0aF90aCIsCiAgICAidHVyIjogInRyX3RyIiwKICAgICJ1a3IiOiAidWtfdWEiLAogICAgInVyZCI6ICJ1cl9wayIsCiAgICAidXpuIjogInV6X3V6IiwKICAgICJ2aWUiOiAidmlfdm4iLAogICAgInlvciI6ICJ5b19uZyIsCiAgICAienVsIjogInp1X3phIiwKfQoKCmRlZiBfY2hlY2tfbGFuZ19jb2RlX21hcHBpbmcobGFuZzogc3RyKSAtPiBOb25lOgogICAgaWYgbGFuZyBub3QgaW4gVU5JVFlfVE9fRkxFVVJTX0xBTkdfTUFQUElORzoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKAogICAgICAgICAgICBmIk5vIGxhbmd1YWdlIGNvZGUgbWFwcGluZyBmb3Ige2xhbmd9KE00VCktPj8/KEZMRVVScykuICIKICAgICAgICAgICAgIlBsZWFzZSBleHBhbmQgYFVOSVRZX1RPX0ZMRVVSU19MQU5HX01BUFBJTkdgIgogICAgICAgICkKCgpjbGFzcyBVbml0U3BlZWNoVG9rZW5pemVyKFNwZWVjaFRva2VuaXplcik6CiAgICBNT0RFTF9OQU1FID0gInhsc3IyXzFiX3YyIgogICAgS01FQU5TX01PREVMX1VSSSA9ICJodHRwczovL2RsLmZiYWlwdWJsaWNmaWxlcy5jb20vc2VhbWxlc3NNNFQvbW9kZWxzL3VuaXRfZXh0cmFjdGlvbi9rbWVhbnNfMTBrLm5weSIKICAgIE9VVFBVVF9MQVlFUl9JRFggPSAzNAoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBkZXZpY2U6IHRvcmNoLmRldmljZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5kZXZpY2UgPSBkZXZpY2UKICAgICAgICBzZWxmLnVuaXRfZXh0cmFjdG9yID0gVW5pdEV4dHJhY3RvcigKICAgICAgICAgICAgbW9kZWxfbmFtZV9vcl9jYXJkPXNlbGYuTU9ERUxfTkFNRSwKICAgICAgICAgICAga21lYW5zX3VyaT1zZWxmLktNRUFOU19NT0RFTF9VUkksCiAgICAgICAgICAgIGRldmljZT1zZWxmLmRldmljZSwKICAgICAgICApCgogICAgZGVmIGVuY29kZShzZWxmLCB3YXY6IHRvcmNoLlRlbnNvciwgc2FtcGxlX3JhdGU6IGludCkgLT4gdG9yY2guVGVuc29yOgogICAgICAgIHJldHVybiBzZWxmLnVuaXRfZXh0cmFjdG9yLnByZWRpY3QoCiAgICAgICAgICAgIHdhdi50byhzZWxmLmRldmljZSksCiAgICAgICAgICAgIG91dF9sYXllcl9pZHg9c2VsZi5PVVRQVVRfTEFZRVJfSURYLAogICAgICAgICAgICBzYW1wbGVfcmF0ZT1zYW1wbGVfcmF0ZSwKICAgICAgICApCgoKZGVmIGRvd25sb2FkX2ZsZXVycygKICAgIHNvdXJjZV9sYW5nOiBzdHIsCiAgICB0YXJnZXRfbGFuZzogc3RyLAogICAgc3BsaXQ6IHN0ciwKICAgIHNhdmVfZGlyZWN0b3J5OiBzdHIsCik6CiAgICBfY2hlY2tfbGFuZ19jb2RlX21hcHBpbmcoc291cmNlX2xhbmcpCiAgICBfY2hlY2tfbGFuZ19jb2RlX21hcHBpbmcodGFyZ2V0X2xhbmcpCiAgICBkZXZpY2UgPSAoCiAgICAgICAgdG9yY2guZGV2aWNlKCJjdWRhOjAiKSBpZiB0b3JjaC5jdWRhLmRldmljZV9jb3VudCgpID4gMCBlbHNlIHRvcmNoLmRldmljZSgiY3B1IikKICAgICkKICAgIHRva2VuaXplciA9IFVuaXRTcGVlY2hUb2tlbml6ZXIoZGV2aWNlPWRldmljZSkKICAgIGRhdGFzZXRfaXRlcmF0b3IgPSBTcGVlY2gyU3BlZWNoRmxldXJzRGF0YXNldEJ1aWxkZXIoCiAgICAgICAgc291cmNlX2xhbmc9VU5JVFlfVE9fRkxFVVJTX0xBTkdfTUFQUElOR1tzb3VyY2VfbGFuZ10sCiAgICAgICAgdGFyZ2V0X2xhbmc9VU5JVFlfVE9fRkxFVVJTX0xBTkdfTUFQUElOR1t0YXJnZXRfbGFuZ10sCiAgICAgICAgZGF0YXNldF9jYWNoZV9kaXI9c2F2ZV9kaXJlY3RvcnksCiAgICAgICAgc3BlZWNoX3Rva2VuaXplcj10b2tlbml6ZXIsCiAgICAgICAgc2tpcF9zb3VyY2VfYXVkaW89VHJ1ZSwgICMgZG9uJ3QgZXh0cmFjdCB1bml0cyBmcm9tIHNvdXJjZSBhdWRpbwogICAgICAgIHNraXBfdGFyZ2V0X2F1ZGlvPUZhbHNlLAogICAgICAgIHNwbGl0PXNwbGl0LAogICAgKQogICAgbWFuaWZlc3RfcGF0aDogc3RyID0gb3MucGF0aC5qb2luKHNhdmVfZGlyZWN0b3J5LCBmIntzcGxpdH1fbWFuaWZlc3QuanNvbiIpCiAgICB3aXRoIG9wZW4obWFuaWZlc3RfcGF0aCwgInciKSBhcyBmcF9vdXQ6CiAgICAgICAgZm9yIGlkeCwgc2FtcGxlIGluIGVudW1lcmF0ZShkYXRhc2V0X2l0ZXJhdG9yLl9faXRlcl9fKCksIHN0YXJ0PTEpOgogICAgICAgICAgICAjIGNvcnJlY3Rpb24gYXMgRmxldXJzRGF0YXNldEJ1aWxkZXIgcmV0dXJuIGZsZXVycyBsYW5nIGNvZGVzCiAgICAgICAgICAgIHNhbXBsZS5zb3VyY2UubGFuZyA9IHNvdXJjZV9sYW5nCiAgICAgICAgICAgIHNhbXBsZS50YXJnZXQubGFuZyA9IHRhcmdldF9sYW5nCiAgICAgICAgICAgIHNhbXBsZS50YXJnZXQud2F2ZWZvcm0gPSBOb25lICAjIGFscmVhZHkgZXh0cmFjdGVkIHVuaXRzCiAgICAgICAgICAgIGZwX291dC53cml0ZShqc29uLmR1bXBzKGRhdGFjbGFzc2VzLmFzZGljdChzYW1wbGUpKSArICJcbiIpCiAgICBsb2dnZXIuaW5mbyhmIlNhdmVkIHtpZHh9IHNhbXBsZXMgZm9yIHNwbGl0PXtzcGxpdH0gdG8ge21hbmlmZXN0X3BhdGh9IikKICAgIGxvZ2dlci5pbmZvKGYiTWFuaWZlc3Qgc2F2ZWQgdG86IHttYW5pZmVzdF9wYXRofSIpCgoKZGVmIGRvd25sb2FkX2dpZ2FzcGVlY2goc3Vic2V0OiBzdHIsIGh1Z2dpbmdmYWNlX3Rva2VuOiBzdHIsIHNhdmVfZGlyZWN0b3J5OiBzdHIpOgogICAgZHMgPSBsb2FkX2RhdGFzZXQoInNwZWVjaGNvbGFiL2dpZ2FzcGVlY2giLCBzdWJzZXQsIGNhY2hlX2Rpcj1zYXZlX2RpcmVjdG9yeSwgdG9rZW49aHVnZ2luZ2ZhY2VfdG9rZW4pCiAgICBmb3Igc3BsaXQgaW4gZHM6CiAgICAgICAgbWFuaWZlc3RfcGF0aCA9IG9zLnBhdGguam9pbihzYXZlX2RpcmVjdG9yeSwgZiJ7c3Vic2V0fV97c3BsaXR9X21hbmlmZXN0Lmpzb24iKQogICAgICAgIGxvZ2dlci5pbmZvKGYiUHJlcGFyaW5nIHtzcGxpdH0gc3BsaXQuLi4iKQogICAgICAgIHdpdGggb3BlbihtYW5pZmVzdF9wYXRoLCAidyIpIGFzIGY6CiAgICAgICAgICAgIGZvciBzYW1wbGUgaW4gdHFkbShkc1tzcGxpdF0pOgogICAgICAgICAgICAgICAgZi53cml0ZShqc29uLmR1bXBzKHsKICAgICAgICAgICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImlkIjogc2FtcGxlWyJzZWdtZW50X2lkIl0sCiAgICAgICAgICAgICAgICAgICAgInRleHQiOiBzYW1wbGVbInRleHQiXSwKICAgICAgICAgICAgICAgICAgICAibGFuZyI6ImVuZyIsCiAgICAgICAgICAgICAgICAgICAgImF1ZGlvX2xvY2FsX3BhdGgiOiBzYW1wbGVbImF1ZGlvIl1bInBhdGgiXSwKICAgICAgICAgICAgICAgICAgICAic2FtcGxpbmdfcmF0ZSI6IHNhbXBsZVsiYXVkaW8iXVsic2FtcGxpbmdfcmF0ZSJdLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ0YXJnZXQiOiB7CiAgICAgICAgICAgICAgICAgICAgImlkIjogc2FtcGxlWyJzZWdtZW50X2lkIl0sCiAgICAgICAgICAgICAgICAgICAgInRleHQiOiBzYW1wbGVbInRleHQiXSwKICAgICAgICAgICAgICAgICAgICAibGFuZyI6ICJlbmciLAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkgKyAiXG4iKQogICAgICAgIGxvZ2dlci5pbmZvKGYiTWFuaWZlc3QgZm9yIEdpZ2FTcGVlY2gte3N1YnNldH0te3NwbGl0fSBzYXZlZCB0bzoge21hbmlmZXN0X3BhdGh9IikKCgpkZWYgaW5pdF9wYXJzZXIoKSAtPiBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcjoKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKAogICAgICAgIGRlc2NyaXB0aW9uPSgKICAgICAgICAgICAgIkhlbHBlciBzY3JpcHQgdG8gZG93bmxvYWQgdHJhaW5pbmcvZXZhbHVhdGlvbiBkYXRhc2V0IChGTEVVUlMgb3IgR2lnYVNwZWVjaCksIgogICAgICAgICAgICAiZXh0cmFjdCB1bml0cyBmcm9tIHRhcmdldCBhdWRpbyBhbmQgc2F2ZSB0aGUgZGF0YXNldCBhcyBhIG1hbmlmZXN0ICIKICAgICAgICAgICAgImNvbnN1bWFibGUgYnkgYGZpbmV0dW5lLnB5YC4iCiAgICAgICAgKQogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1uYW1lIiwKICAgICAgICB0eXBlPXN0ciwKICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgICAgIGhlbHA9Ikh1Z2dpbmdGYWNlIG5hbWUgb2YgdGhlIGRhdGFzZXQgdG8gcHJlcGFyZS4iLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1zb3VyY2VfbGFuZyIsCiAgICAgICAgdHlwZT1zdHIsCiAgICAgICAgcmVxdWlyZWQ9VHJ1ZSwKICAgICAgICBoZWxwPSJNNFQgbGFuZ2NvZGUgb2YgdGhlIGRhdGFzZXQgU09VUkNFIGxhbmd1YWdlIiwKICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0tdGFyZ2V0X2xhbmciLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIHJlcXVpcmVkPVRydWUsCiAgICAgICAgaGVscD0iTTRUIGxhbmdjb2RlIG9mIHRoZSBkYXRhc2V0IFRBUkdFVCBsYW5ndWFnZSIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLXNwbGl0IiwKICAgICAgICB0eXBlPXN0ciwKICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgICAgIGhlbHA9IkRhdGFzZXQgc3BsaXQvc2hhcmQgdG8gZG93bmxvYWQgKGB0cmFpbmAsIGB2YWxpZGF0aW9uYCwgYHRlc3RgKSIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLXNhdmVfZGlyIiwKICAgICAgICB0eXBlPVBhdGgsCiAgICAgICAgcmVxdWlyZWQ9VHJ1ZSwKICAgICAgICBoZWxwPSJEaXJlY3Rvcnkgd2hlcmUgdGhlIGRhdGFzdGV0cyB3aWxsIGJlIHN0b3JlZCB3aXRoIEh1Z2dpbmdGYWNlIGRhdGFzZXRzIGNhY2hlIGZpbGVzIiwKICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0taHVnZ2luZ2ZhY2VfdG9rZW4iLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIHJlcXVpcmVkPUZhbHNlLAogICAgICAgIGRlZmF1bHQ9Tm9uZSwKICAgICAgICBoZWxwPSJZb3VyIEh1Z2dpbmdGYWNlIHRva2VuLCB0aGlzIGlzIG5lY2Vzc2FyeSBmb3Igc29tZSBkYXRhc2V0cyBsaWtlIEdpZ2FTcGVlY2guIiwKICAgICkKICAgIHJldHVybiBwYXJzZXIKCgpkZWYgbWFpbigpIC0+IE5vbmU6CiAgICBhcmdzID0gaW5pdF9wYXJzZXIoKS5wYXJzZV9hcmdzKCkKICAgIGFzc2VydCBhcmdzLm5hbWUgaW4gU1VQUE9SVEVEX0RBVEFTRVRTLCBcCiAgICAgICAgZiJUaGUgb25seSBzdXBwb3J0ZWQgZGF0YXNldHMgYXJlIGB7U1VQUE9SVEVEX0RBVEFTRVRTfWAuIFBsZWFzZSB1c2Ugb25lIG9mIHRoZXNlIGluIGAtLW5hbWVgLiIKCiAgICBpZiBhcmdzLm5hbWUgPT0gJ2dvb2dsZS9mbGV1cnMnOgogICAgICAgIGRvd25sb2FkX2ZsZXVycyhhcmdzLnNvdXJjZV9sYW5nLCBhcmdzLnRhcmdldF9sYW5nLCBhcmdzLnNwbGl0LCBhcmdzLnNhdmVfZGlyKQogICAgZWxpZiBhcmdzLm5hbWUgPT0gJ3NwZWVjaGNvbGFiL2dpZ2FzcGVlY2gnOgogICAgICAgIGFzc2VydCBhcmdzLmh1Z2dpbmdmYWNlX3Rva2VuIGlzIG5vdCBOb25lLCBcCiAgICAgICAgICAgICJZb3VyIEh1Z2dpbmdGYWNlIHRva2VuIGlzIG5lY2Vzc2FyeSBmb3IgR2lnYVNwZWVjaC4gUGxlYXNlIHJlYWQgdGhlIEdpZ2FTcGVlY2ggYWdyZWVtZW50LiIKICAgICAgICBkb3dubG9hZF9naWdhc3BlZWNoKGFyZ3Muc3BsaXQsIGFyZ3MuaHVnZ2luZ2ZhY2VfdG9rZW4sIGFyZ3Muc2F2ZV9kaXIpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo='),
    ('seamless/src/seamless_communication/cli/m4t/finetune/finetune.py', ''),
    ('seamless/src/seamless_communication/cli/m4t/finetune/dataloader.py', ''),
    ('seamless/src/seamless_communication/cli/m4t/finetune/dist_utils.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgppbXBvcnQgbG9nZ2luZwppbXBvcnQgb3MKZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZWRlbHRhCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CgppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoLmRpc3RyaWJ1dGVkIGFzIGRpc3QKaW1wb3J0IHRvcmNoLm11bHRpcHJvY2Vzc2luZwoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKZGVmIGlzX2Rpc3RfaW5pdGlhbGl6ZWQoKSAtPiBib29sOgogICAgaWYgbm90IGRpc3QuaXNfYXZhaWxhYmxlKCk6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBpZiBub3QgZGlzdC5pc19pbml0aWFsaXplZCgpOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIFRydWUKCgpkZWYgZ2V0X3JhbmsoKSAtPiBpbnQ6CiAgICBpZiBub3QgaXNfZGlzdF9pbml0aWFsaXplZCgpOgogICAgICAgIHJldHVybiAwCiAgICByZXR1cm4gZGlzdC5nZXRfcmFuaygpCgoKZGVmIGdldF9sb2NhbF9yYW5rKCkgLT4gaW50OgogICAgaWYgbm90IGlzX2Rpc3RfaW5pdGlhbGl6ZWQoKToKICAgICAgICByZXR1cm4gMAogICAgcmV0dXJuIGludChvcy5lbnZpcm9uWyJMT0NBTF9SQU5LIl0pCgoKZGVmIGdldF93b3JsZF9zaXplKCkgLT4gaW50OgogICAgaWYgbm90IGlzX2Rpc3RfaW5pdGlhbGl6ZWQoKToKICAgICAgICByZXR1cm4gMQogICAgcmV0dXJuIGRpc3QuZ2V0X3dvcmxkX3NpemUoKQoKCmRlZiBpc19tYWluX3Byb2Nlc3MoKSAtPiBib29sOgogICAgcmV0dXJuIGdldF9yYW5rKCkgPT0gMAoKCmRlZiBpbml0X2Rpc3RyaWJ1dGVkKGxvZ2dlcnM6IExpc3RbbG9nZ2luZy5Mb2dnZXJdKSAtPiBOb25lOgogICAgIiIiSW5pdGlhbGl6ZXMgdGhlIGRpc3RyaWJ1dGVkIGJhY2tlbmQiIiIKICAgIHRvcmNoLm11bHRpcHJvY2Vzc2luZy5zZXRfc3RhcnRfbWV0aG9kKCJzcGF3biIpCiAgICBpZiAiUkFOSyIgbm90IGluIG9zLmVudmlyb246CiAgICAgICAgbG9nZ2VyLmVycm9yKAogICAgICAgICAgICAiQ2Fubm90IGluaXQgZGlzcmlidXRlZCBjb250ZXh0LCBhcyBlbnZpcm9ubWVudCB2YXJhaWJsZXMgYXJlIG5vdCBzZXQuIgogICAgICAgICkKICAgICAgICByZXR1cm4KICAgIHJhbmsgPSBpbnQob3MuZW52aXJvblsiUkFOSyJdKQogICAgd29ybGRfc2l6ZSA9IGludChvcy5lbnZpcm9uWyJXT1JMRF9TSVpFIl0pCiAgICBsb2NhbF9yYW5rID0gaW50KG9zLmVudmlyb25bIkxPQ0FMX1JBTksiXSkKICAgIGxvZ2dlci5pbmZvKAogICAgICAgIGYiUmFuaz17cmFua30gbG9jYWwgcmFuaz17bG9jYWxfcmFua30sIHdvcmxkX3NpemU9e3dvcmxkX3NpemV9LCBpc19tYXN0ZXI9e3JhbmsgPT0gMH0iCiAgICApCiAgICBkaXN0LmluaXRfcHJvY2Vzc19ncm91cCgKICAgICAgICBiYWNrZW5kPSJuY2NsIiwKICAgICAgICBpbml0X21ldGhvZD0iZW52Oi8vIiwKICAgICAgICB3b3JsZF9zaXplPXdvcmxkX3NpemUsCiAgICAgICAgcmFuaz1yYW5rLAogICAgICAgIHRpbWVvdXQ9dGltZWRlbHRhKHNlY29uZHM9MTgwKSwKICAgICkKICAgIGxvZ2dlci5pbmZvKGYiU2V0dGluZyBjdWRhOntsb2NhbF9yYW5rfSBhcyBtYWluIGRldmljZSIpCiAgICBpZiBub3QgaXNfbWFpbl9wcm9jZXNzKCk6CiAgICAgICAgZm9yIHRvX211dGUgaW4gbG9nZ2VyczoKICAgICAgICAgICAgdG9fbXV0ZS5zZXRMZXZlbChsb2dnaW5nLkVSUk9SKQogICAgdG9yY2guY3VkYS5zZXRfZGV2aWNlKGxvY2FsX3JhbmspCiAgICBkaXN0LmJhcnJpZXIoKQo='),
    ('seamless/src/seamless_communication/cli/m4t/finetune/trainer.py', ''),
    ('seamless/src/seamless_communication/cli/m4t/predict/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLm00dC5wcmVkaWN0LnByZWRpY3QgaW1wb3J0ICgKICAgIGFkZF9pbmZlcmVuY2VfYXJndW1lbnRzIGFzIGFkZF9pbmZlcmVuY2VfYXJndW1lbnRzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkubTR0LnByZWRpY3QucHJlZGljdCBpbXBvcnQgKAogICAgc2V0X2dlbmVyYXRpb25fb3B0cyBhcyBzZXRfZ2VuZXJhdGlvbl9vcHRzLAopCg=='),
    ('seamless/src/seamless_communication/cli/m4t/predict/predict.py', ''),
    ('seamless/src/seamless_communication/cli/streaming/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/src/seamless_communication/cli/streaming/evaluate.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBhcmdwYXJzZQppbXBvcnQgbG9nZ2luZwoKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLnN0cmVhbWluZy5zY29yZXJzLnNlYW1sZXNzX3F1YWxpdHlfc2NvcmVyIGltcG9ydCAoCiAgICBTZWFtbGVzc1F1YWxpdHlTY29yZXIgYXMgU2VhbWxlc3NRdWFsaXR5U2NvcmVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnNlYW1sZXNzX3Myc3QgaW1wb3J0IFNlYW1sZXNzUzJTVEFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnNlYW1sZXNzX3N0cmVhbWluZ19zMnN0IGltcG9ydCAoCiAgICBTZWFtbGVzc1N0cmVhbWluZ1MyU1RBZ2VudCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5zZWFtbGVzc19zdHJlYW1pbmdfczJ0IGltcG9ydCAoCiAgICBTZWFtbGVzc1N0cmVhbWluZ1MyVEFnZW50LAopCgpmcm9tIHNpbXVsZXZhbC5jbGkgaW1wb3J0IGV2YWx1YXRlCgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5JTkZPLAogICAgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKGxldmVsbmFtZSlzIC0tICUobmFtZSlzOiAlKG1lc3NhZ2UpcyIsCikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmRlZiBtYWluKCkgLT4gTm9uZToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKAogICAgICAgIGFkZF9oZWxwPUZhbHNlLAogICAgICAgIGRlc2NyaXB0aW9uPSJTdHJlYW1pbmcgZXZhbHVhdGlvbiBvZiBTZWFtbGVzcyBVbml0WSBtb2RlbHMiLAogICAgICAgIGNvbmZsaWN0X2hhbmRsZXI9InJlc29sdmUiLAogICAgKQoKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0tdGFzayIsCiAgICAgICAgY2hvaWNlcz1bInMyc3QiLCAiczJ0dCIsICJhc3IiXSwKICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIGhlbHA9IlRhcmdldCBsYW5ndWFnZSB0byB0cmFuc2xhdGUvdHJhbnNjcmliZSBpbnRvLiIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWV4cHJlc3NpdmUiLAogICAgICAgIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsCiAgICAgICAgZGVmYXVsdD1GYWxzZSwKICAgICAgICBoZWxwPSJFeHByZXNzaXZlIHN0cmVhbWluZyBTMlNUIGluZmVyZW5jZSIsCiAgICApCgogICAgYXJncywgXyA9IHBhcnNlci5wYXJzZV9rbm93bl9hcmdzKCkKCiAgICBtb2RlbF9jb25maWdzID0gZGljdCgKICAgICAgICBzb3VyY2Vfc2VnbWVudF9zaXplPTMyMCwKICAgICAgICBkZXZpY2U9ImN1ZGE6MCIsCiAgICAgICAgZHR5cGU9ImZwMTYiLAogICAgICAgIG1pbl9zdGFydGluZ193YWl0X3cydmJlcnQ9MTkyLAogICAgICAgIGRlY2lzaW9uX3RocmVzaG9sZD0wLjUsCiAgICAgICAgbm9fZWFybHlfc3RvcD1UcnVlLAogICAgICAgIG1heF9sZW5fYT0wLAogICAgICAgIG1heF9sZW5fYj0xMDAsCiAgICApCgogICAgZXZhbF9jb25maWdzID0gZGljdChxdWFsaXR5X21ldHJpY3M9IlNFQU1MRVNTX1FVQUxJVFlfU0NPUkVSIikKICAgIGlmIGFyZ3MudGFzayA9PSAiczJzdCI6CiAgICAgICAgbW9kZWxfY29uZmlnc1sibWluX3VuaXRfY2h1bmtfc2l6ZSJdID0gNTAKICAgICAgICBldmFsX2NvbmZpZ3NbImxhdGVuY3lfbWV0cmljcyJdID0gIlN0YXJ0T2Zmc2V0IEVuZE9mZnNldCIKCiAgICAgICAgaWYgYXJncy5leHByZXNzaXZlOgogICAgICAgICAgICBhZ2VudF9jbGFzcyA9IFNlYW1sZXNzUzJTVEFnZW50CiAgICAgICAgZWxzZToKICAgICAgICAgICAgYWdlbnRfY2xhc3MgPSBTZWFtbGVzc1N0cmVhbWluZ1MyU1RBZ2VudAogICAgZWxpZiBhcmdzLnRhc2sgaW4gWyJzMnR0IiwgImFzciJdOgogICAgICAgIGFzc2VydCBhcmdzLmV4cHJlc3NpdmUgaXMgRmFsc2UsICJTMlRUIGluZmVyZW5jZSBjYW5ub3QgYmUgZXhwcmVzc2l2ZS4iCiAgICAgICAgYWdlbnRfY2xhc3MgPSBTZWFtbGVzc1N0cmVhbWluZ1MyVEFnZW50CiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tdW5pdHktbW9kZWwtbmFtZSIsCiAgICAgICAgICAgIHR5cGU9c3RyLAogICAgICAgICAgICBoZWxwPSJVbml0eSBtb2RlbCBuYW1lLiIsCiAgICAgICAgICAgIGRlZmF1bHQ9InNlYW1sZXNzX3N0cmVhbWluZ191bml0eSIsCiAgICAgICAgKQogICAgICAgIGFyZ3MsIF8gPSBwYXJzZXIucGFyc2Vfa25vd25fYXJncygpCiAgICAgICAgYXNzZXRfY2FyZCA9IGFzc2V0X3N0b3JlLnJldHJpZXZlX2NhcmQobmFtZT1hcmdzLnVuaXR5X21vZGVsX25hbWUpCiAgICAgICAgdG9rZW5pemVyX3VyaSA9IGFzc2V0X2NhcmQuZmllbGQoInRva2VuaXplciIpLmFzX3VyaSgpCiAgICAgICAgdG9rZW5pemVyX3BhdGggPSBkb3dubG9hZF9tYW5hZ2VyLmRvd25sb2FkX3Rva2VuaXplcigKICAgICAgICAgICAgdG9rZW5pemVyX3VyaSwgYXNzZXRfY2FyZC5uYW1lLCBmb3JjZT1GYWxzZSwgcHJvZ3Jlc3M9VHJ1ZQogICAgICAgICkKICAgICAgICBldmFsX2NvbmZpZ3NbImxhdGVuY3lfbWV0cmljcyJdID0gIkFMIExBQUwiCiAgICAgICAgZXZhbF9jb25maWdzWyJldmFsX2xhdGVuY3lfdW5pdCJdID0gInNwbSIKICAgICAgICBldmFsX2NvbmZpZ3NbImV2YWxfbGF0ZW5jeV9zcG1fbW9kZWwiXSA9IHRva2VuaXplcl9wYXRoCgogICAgYmFzZV9jb25maWcgPSBkaWN0KAogICAgICAgIGRhdGFsb2FkZXI9ImZhaXJzZXEyX3MydHQiLAogICAgICAgIGRhdGFsb2FkZXJfY2xhc3M9InNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmRhdGFsb2FkZXJzLnMydHQuU2ltdWxFdmFsU3BlZWNoVG9UZXh0RGF0YWxvYWRlciIsCiAgICApCgogICAgZXZhbHVhdGUoYWdlbnRfY2xhc3MsIHsqKmJhc2VfY29uZmlnLCAqKm1vZGVsX2NvbmZpZ3MsICoqZXZhbF9jb25maWdzfSwgcGFyc2VyKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK'),
    ('seamless/src/seamless_communication/cli/streaming/scorers/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/src/seamless_communication/cli/streaming/scorers/seamless_quality_scorer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBqc29uCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBPcHRpb25hbAoKaW1wb3J0IHBhbmRhcwpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGV2aWNlCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkuZXZhbF91dGlscyBpbXBvcnQgY29tcHV0ZV9xdWFsaXR5X21ldHJpY3MKZnJvbSBzaW11bGV2YWwuZXZhbHVhdG9yLmluc3RhbmNlIGltcG9ydCBMb2dJbnN0YW5jZQpmcm9tIHNpbXVsZXZhbC5ldmFsdWF0b3Iuc2NvcmVycy5xdWFsaXR5X3Njb3JlciBpbXBvcnQgKAogICAgUXVhbGl0eVNjb3JlciwKICAgIHJlZ2lzdGVyX3F1YWxpdHlfc2NvcmVyLAopCgoKQHJlZ2lzdGVyX3F1YWxpdHlfc2NvcmVyKCJTRUFNTEVTU19RVUFMSVRZX1NDT1JFUiIpCmNsYXNzIFNlYW1sZXNzUXVhbGl0eVNjb3JlcihRdWFsaXR5U2NvcmVyKTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICB0Z3RfbGFuZzogc3RyLAogICAgICAgIHRhc2s6IHN0ciwKICAgICAgICBvdXRwdXRfZGlyOiBzdHIsCiAgICAgICAgZGV2aWNlOiBEZXZpY2UgPSAiY3VkYTowIiwKICAgICAgICB3aGlzcGVyX21vZGVsX25hbWU6IHN0ciA9ICJsYXJnZSIsCiAgICAgICAgd2hpc3Blcl9ub3JtYWxpemVfdGV4dF9vdXRwdXQ6IE9wdGlvbmFsW2Jvb2xdID0gTm9uZSwKICAgICAgICByZWZfdGV4dF9jb2xfbmFtZTogc3RyID0gInJlZl90Z3RfdGV4dCIsCiAgICAgICAgcHJlZF90ZXh0X2NvbF9uYW1lOiBzdHIgPSAicHJlZF90Z3RfdGV4dCIsCiAgICAgICAgcHJlZF9hdWRpb19jb2xfbmFtZTogc3RyID0gInByZWRfdGd0X2F1ZGlvIiwKICAgICkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLnRndF9sYW5nID0gdGd0X2xhbmcKICAgICAgICBzZWxmLnRhc2sgPSB0YXNrLnVwcGVyKCkKICAgICAgICBzZWxmLmRldmljZSA9IGRldmljZQogICAgICAgIHNlbGYub3V0cHV0X2RpciA9IFBhdGgob3V0cHV0X2RpcikKICAgICAgICBzZWxmLndoaXNwZXJfbW9kZWxfbmFtZSA9IHdoaXNwZXJfbW9kZWxfbmFtZQogICAgICAgIHNlbGYud2hpc3Blcl9ub3JtYWxpemVfdGV4dF9vdXRwdXQgPSB3aGlzcGVyX25vcm1hbGl6ZV90ZXh0X291dHB1dAogICAgICAgIGlmIHNlbGYud2hpc3Blcl9ub3JtYWxpemVfdGV4dF9vdXRwdXQgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi53aGlzcGVyX25vcm1hbGl6ZV90ZXh0X291dHB1dCA9ICgKICAgICAgICAgICAgICAgIEZhbHNlIGlmIHNlbGYudGFzayBpbiBbIlMyVFQiLCAiUzJTVCIsICJUMlRUIl0gZWxzZSBUcnVlCiAgICAgICAgICAgICkKICAgICAgICBzZWxmLnJlZl90ZXh0X2NvbF9uYW1lID0gcmVmX3RleHRfY29sX25hbWUKICAgICAgICBzZWxmLnByZWRfdGV4dF9jb2xfbmFtZSA9IHByZWRfdGV4dF9jb2xfbmFtZQogICAgICAgIHNlbGYucHJlZF9hdWRpb19jb2xfbmFtZSA9IHByZWRfYXVkaW9fY29sX25hbWUKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgaW5zdGFuY2VzOiBEaWN0W2ludCwgTG9nSW5zdGFuY2VdKSAtPiBmbG9hdDoKICAgICAgICByZWZlcmVuY2VzID0gW2lucy5yZWZlcmVuY2UgZm9yIGlucyBpbiBpbnN0YW5jZXMudmFsdWVzKCldCiAgICAgICAgZGYgPSBwYW5kYXMuRGF0YUZyYW1lKHtzZWxmLnJlZl90ZXh0X2NvbF9uYW1lOiByZWZlcmVuY2VzfSkKICAgICAgICBpZiBzZWxmLnRhc2sgaW4gWyJBU1IiLCAiUzJUVCIsICJUMlRUIl06CiAgICAgICAgICAgIHByZWRpY3Rpb25zID0gW2lucy5wcmVkaWN0aW9uIGZvciBpbnMgaW4gaW5zdGFuY2VzLnZhbHVlcygpXQogICAgICAgICAgICBkZltzZWxmLnByZWRfdGV4dF9jb2xfbmFtZV0gPSBwcmVkaWN0aW9ucwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByZWRpY3Rpb25zID0gW2lucy5wcmVkaWN0aW9uIGZvciBpbnMgaW4gaW5zdGFuY2VzLnZhbHVlcygpXQogICAgICAgICAgICBkZltzZWxmLnByZWRfYXVkaW9fY29sX25hbWVdID0gcHJlZGljdGlvbnMKCiAgICAgICAgZGYudG9fY3N2KAogICAgICAgICAgICBzZWxmLm91dHB1dF9kaXIgLyAicmVzdWx0cy50c3YiLAogICAgICAgICAgICBzZXA9Ilx0IiwKICAgICAgICAgICAgcXVvdGluZz0zLAogICAgICAgICAgICBlbmNvZGluZz0idXRmLTgiLAogICAgICAgICkKICAgICAgICBmaWxlbmFtZSA9IGNvbXB1dGVfcXVhbGl0eV9tZXRyaWNzKAogICAgICAgICAgICBzZWxmLm91dHB1dF9kaXIgLyAicmVzdWx0cy50c3YiLAogICAgICAgICAgICBzZWxmLm91dHB1dF9kaXIsCiAgICAgICAgICAgIHNlbGYudGd0X2xhbmcsCiAgICAgICAgICAgIHNlbGYudGFzaywKICAgICAgICAgICAgc2VsZi5kZXZpY2UsCiAgICAgICAgICAgIHNlbGYud2hpc3Blcl9tb2RlbF9uYW1lLAogICAgICAgICAgICBzZWxmLndoaXNwZXJfbm9ybWFsaXplX3RleHRfb3V0cHV0LAogICAgICAgICAgICBzZWxmLnJlZl90ZXh0X2NvbF9uYW1lLAogICAgICAgICAgICBzZWxmLnByZWRfdGV4dF9jb2xfbmFtZSBpZiBzZWxmLnRhc2sgaW4gWyJBU1IiLCAiUzJUVCIsICJUMlRUIl0gZWxzZSBOb25lLAogICAgICAgICAgICBzZWxmLnByZWRfYXVkaW9fY29sX25hbWUsCiAgICAgICAgKQoKICAgICAgICB3aXRoIG9wZW4oc2VsZi5vdXRwdXRfZGlyIC8gZmlsZW5hbWUsICJyIikgYXMgZjoKICAgICAgICAgICAgY29ycHVzX21ldHJpY19zY29yZSA9IGpzb24ubG9hZChmKVsic2NvcmUiXQoKICAgICAgICByZXR1cm4gY29ycHVzX21ldHJpY19zY29yZSAgIyB0eXBlOiBpZ25vcmVbbm8tYW55LXJldHVybl0KCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgYWRkX2FyZ3MocGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLXRhc2siLCB0eXBlPXN0ciwgaGVscD0iVGFzayB0byBldmFsdWF0ZSIsIHJlcXVpcmVkPVRydWUpCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tdGd0LWxhbmciLAogICAgICAgICAgICB0eXBlPXN0ciwKICAgICAgICAgICAgaGVscD0iVGFyZ2V0IGxhbmd1YWdlIHRvIHRyYW5zbGF0ZS90cmFuc2NyaWJlIGludG8uIiwKICAgICAgICAgICAgcmVxdWlyZWQ9VHJ1ZSwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0td2hpc3Blci1tb2RlbC1uYW1lIiwgdHlwZT1zdHIsIGhlbHA9IldoaXNwZXIgbW9kZWwgbmFtZSIsIGRlZmF1bHQ9ImxhcmdlIgogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS13aGlzcGVyLW5vcm1hbGl6ZS10ZXh0LW91dHB1dCIsCiAgICAgICAgICAgIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsCiAgICAgICAgICAgIGhlbHA9Ik5vcm1hbGl6ZSB0ZXh0IG91dHB1dCIsCiAgICAgICAgICAgIGRlZmF1bHQ9Tm9uZSwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tcmVmLXRleHQtY29sLW5hbWUiLAogICAgICAgICAgICB0eXBlPXN0ciwKICAgICAgICAgICAgaGVscD0iUmVmZXJlbmNlIHRleHQgY29sdW1uIG5hbWUiLAogICAgICAgICAgICBkZWZhdWx0PSJyZWZfdGd0X3RleHQiLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1wcmVkLXRleHQtY29sLW5hbWUiLAogICAgICAgICAgICB0eXBlPXN0ciwKICAgICAgICAgICAgaGVscD0iUHJlZGljdGlvbiB0ZXh0IGNvbHVtbiBuYW1lIiwKICAgICAgICAgICAgZGVmYXVsdD0icHJlZF90Z3RfdGV4dCIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXByZWQtYXVkaW8tY29sLW5hbWUiLAogICAgICAgICAgICB0eXBlPXN0ciwKICAgICAgICAgICAgaGVscD0iUHJlZGljdGlvbiBhdWRpbyBjb2x1bW4gbmFtZSIsCiAgICAgICAgICAgIGRlZmF1bHQ9InByZWRfdGd0X2F1ZGlvIiwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9hcmdzKGNscywgYXJnczogTmFtZXNwYWNlKSAtPiBTZWFtbGVzc1F1YWxpdHlTY29yZXI6CiAgICAgICAgcmV0dXJuIGNscygKICAgICAgICAgICAgdGd0X2xhbmc9YXJncy50Z3RfbGFuZywKICAgICAgICAgICAgdGFzaz1hcmdzLnRhc2ssCiAgICAgICAgICAgIG91dHB1dF9kaXI9YXJncy5vdXRwdXQsCiAgICAgICAgICAgIGRldmljZT1nZXRhdHRyKGFyZ3MsICJkZXZpY2UiLCAiY3B1IiksCiAgICAgICAgICAgIHdoaXNwZXJfbW9kZWxfbmFtZT1hcmdzLndoaXNwZXJfbW9kZWxfbmFtZSwKICAgICAgICAgICAgd2hpc3Blcl9ub3JtYWxpemVfdGV4dF9vdXRwdXQ9YXJncy53aGlzcGVyX25vcm1hbGl6ZV90ZXh0X291dHB1dCwKICAgICAgICAgICAgcmVmX3RleHRfY29sX25hbWU9YXJncy5yZWZfdGV4dF9jb2xfbmFtZSwKICAgICAgICAgICAgcHJlZF90ZXh0X2NvbF9uYW1lPWFyZ3MucHJlZF90ZXh0X2NvbF9uYW1lLAogICAgICAgICAgICBwcmVkX2F1ZGlvX2NvbF9uYW1lPWFyZ3MucHJlZF9hdWRpb19jb2xfbmFtZSwKICAgICAgICApCg=='),
    ('seamless/src/seamless_communication/cli/toxicity/etox/asr_etox.py', ''),
    ('seamless/src/seamless_communication/cli/toxicity/etox/etox.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBhcmdwYXJzZQppbXBvcnQgc3lzCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24udG94aWNpdHkgaW1wb3J0IGxvYWRfZXRveF9iYWRfd29yZF9jaGVja2VyCgoKZGVmIG1haW4oKSAtPiBOb25lOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoCiAgICAgICAgZGVzY3JpcHRpb249IkVUT1ggd2lsbCBjb21wdXRlIHRoZSB0b3hpY2l0eSBsZXZlbCBvZiB0ZXh0IGlucHV0cyAoU1RESU4gPiBTVERPVVQpLiIKICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgImxhbmciLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIGhlbHA9Ikxhbmd1YWdlLCBsYW5ndWFnZSBvZiB0aGUgc3BlZWNoIHRvIHRyYW5zY3JpYmUiLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiaW5wdXQiLCBuYXJncz0iPyIsIHR5cGU9YXJncGFyc2UuRmlsZVR5cGUoInIiKSwgZGVmYXVsdD1zeXMuc3RkaW4KICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIm91dHB1dCIsIG5hcmdzPSI/IiwgdHlwZT1hcmdwYXJzZS5GaWxlVHlwZSgidyIpLCBkZWZhdWx0PXN5cy5zdGRvdXQKICAgICkKICAgIGFyZ3MsIF91bmtub3duID0gcGFyc2VyLnBhcnNlX2tub3duX2FyZ3MoKQoKICAgIGJhZF93b3JkX2NoZWNrZXIgPSBsb2FkX2V0b3hfYmFkX3dvcmRfY2hlY2tlcigibWludG94IikKCiAgICBwcmludCgidGV4dCIsICJ0b3hpY2l0eSIsICJiYWRfd29yZHMiLCBzZXA9Ilx0IiwgZmlsZT1hcmdzLm91dHB1dCkKICAgIGZvciBsaW5lIGluIGFyZ3MuaW5wdXQ6CiAgICAgICAgbCA9IGxpbmUucnN0cmlwKCkKICAgICAgICBiYWRfd29yZHMgPSBiYWRfd29yZF9jaGVja2VyLmdldF9iYWRfd29yZHMoCiAgICAgICAgICAgIHRleHQ9bCwKICAgICAgICAgICAgbGFuZz1hcmdzLmxhbmcsCiAgICAgICAgKQogICAgICAgIHByaW50KGwsIGxlbihiYWRfd29yZHMpLCAiLCIuam9pbihiYWRfd29yZHMpLCBzZXA9Ilx0IiwgZmlsZT1hcmdzLm91dHB1dCkKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg=='),
    ('seamless/src/seamless_communication/cli/toxicity/mutox/mutox_text.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBhcmdwYXJzZQppbXBvcnQgc3lzCgppbXBvcnQgdG9yY2gKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnRveGljaXR5Lm11dG94LmxvYWRlciBpbXBvcnQgbG9hZF9tdXRveF9tb2RlbApmcm9tIHNvbmFyLmluZmVyZW5jZV9waXBlbGluZXMudGV4dCBpbXBvcnQgVGV4dFRvRW1iZWRkaW5nTW9kZWxQaXBlbGluZQoKaW1wb3J0IGxvZ2dpbmcKCmxvZ2dpbmcuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICBmb3JtYXQ9IiUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgLS0gJShuYW1lKXM6ICUobWVzc2FnZSlzIiwKKQoKQ1BVX0RFVklDRSA9IHRvcmNoLmRldmljZSgiY3B1IikKCgpkZWYgbWFpbigpIC0+IE5vbmU6CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigKICAgICAgICBkZXNjcmlwdGlvbj0iTXV0b3ggVGV4dCB3aWxsIGNvbXB1dGUgYSB0b3hpY2l0eSBzY29yZSBmb3IgZWFjaCBzZW50ZW5jZSBpdCBpcyBwYXNzZWQuIgogICAgKQoKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgImxhbmciLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIGhlbHA9Ikxhbmd1YWdlIG9mIHRoZSBpbnB1dCB0ZXh0LCBubGxiIGZvcm1hdCB3aXRoIHNjcmlwdC4iLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiaW5wdXQiLCBuYXJncz0iPyIsIHR5cGU9YXJncGFyc2UuRmlsZVR5cGUoInIiKSwgZGVmYXVsdD1zeXMuc3RkaW4KICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIm91dHB1dCIsIG5hcmdzPSI/IiwgdHlwZT1hcmdwYXJzZS5GaWxlVHlwZSgidyIpLCBkZWZhdWx0PXN5cy5zdGRvdXQKICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0tYmF0Y2hfc2l6ZSIsCiAgICAgICAgdHlwZT1pbnQsCiAgICAgICAgaGVscD0iSW5mZXJlbmNlIGJhdGNoIHNpemUuIiwKICAgICAgICBkZWZhdWx0PTQsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWRldmljZSIsCiAgICAgICAgdHlwZT1zdHIsCiAgICAgICAgaGVscD0ibmFtZSBvZiB0aGUgZGV2aWNlIHRvIHVzZSB3aXRoIHRvcmNoLiIsCiAgICAgICAgcmVxdWlyZWQ9RmFsc2UsCiAgICApCiAgICBhcmdzLCBfdW5rbm93biA9IHBhcnNlci5wYXJzZV9rbm93bl9hcmdzKCkKCiAgICBpZiBhcmdzLmRldmljZSBpcyBub3QgTm9uZToKICAgICAgICBkZXZpY2UgPSB0b3JjaC5kZXZpY2UoYXJncy5kZXZpY2UpCiAgICAgICAgZHR5cGUgPSB0b3JjaC5mbG9hdDMyCiAgICAgICAgaWYgZGV2aWNlLnR5cGUgPT0gImN1ZGEiOgogICAgICAgICAgICBkdHlwZSA9IHRvcmNoLmZsb2F0MTYKICAgIGVsaWYgdG9yY2guY3VkYS5pc19hdmFpbGFibGUoKToKICAgICAgICBkZXZpY2UgPSB0b3JjaC5kZXZpY2UoImN1ZGE6MCIpCiAgICAgICAgZHR5cGUgPSB0b3JjaC5mbG9hdDE2CiAgICBlbHNlOgogICAgICAgIGRldmljZSA9IHRvcmNoLmRldmljZSgiY3B1IikKICAgICAgICBkdHlwZSA9IHRvcmNoLmZsb2F0MzIKCiAgICB0MnZlY19tb2RlbCA9IFRleHRUb0VtYmVkZGluZ01vZGVsUGlwZWxpbmUoCiAgICAgICAgZW5jb2Rlcj0idGV4dF9zb25hcl9iYXNpY19lbmNvZGVyIiwKICAgICAgICB0b2tlbml6ZXI9InRleHRfc29uYXJfYmFzaWNfZW5jb2RlciIsCiAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICkKCiAgICBjbGFzc2lmaWVyID0gbG9hZF9tdXRveF9tb2RlbCgKICAgICAgICAibXV0b3giLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApLmV2YWwoKQoKICAgIGRlZiB3cml0ZV9yZXN1bHQoYmF0Y2gpOgogICAgICAgIGVtYiA9IHQydmVjX21vZGVsLnByZWRpY3QoYmF0Y2gsIHNvdXJjZV9sYW5nPWFyZ3MubGFuZykKICAgICAgICBzY29yZXMgPSBjbGFzc2lmaWVyKGVtYi5oYWxmKCkpCiAgICAgICAgZm9yIHMsIHQgaW4gemlwKHNjb3JlcywgYmF0Y2gpOgogICAgICAgICAgICBwcmludCh0LCBzLml0ZW0oKSwgc2VwPSJcdCIsIGZpbGU9YXJncy5vdXRwdXQpCgogICAgd2l0aCB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpOgogICAgICAgIHByaW50KCJ0ZXh0IiwgInNjb3JlIiwgc2VwPSJcdCIsIGZpbGU9YXJncy5vdXRwdXQpCiAgICAgICAgYmF0Y2ggPSBbXQogICAgICAgIGZvciBsaW5lIGluIGFyZ3MuaW5wdXQ6CiAgICAgICAgICAgIGJhdGNoLmFwcGVuZChsaW5lLnJzdHJpcCgpKQogICAgICAgICAgICBpZiBsZW4oYmF0Y2gpID49IGFyZ3MuYmF0Y2hfc2l6ZToKICAgICAgICAgICAgICAgIHdyaXRlX3Jlc3VsdChiYXRjaCkKICAgICAgICAgICAgICAgIGJhdGNoID0gW10KCiAgICAgICAgaWYgbGVuKGJhdGNoKToKICAgICAgICAgICAgd3JpdGVfcmVzdWx0KGJhdGNoKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK'),
    ('seamless/src/seamless_communication/cli/toxicity/mutox/mutox_speech.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBhcmdwYXJzZQoKaW1wb3J0IHRvcmNoCmZyb20gdHFkbSBpbXBvcnQgdHFkbQpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKCmZyb20gc29uYXIuaW5mZXJlbmNlX3BpcGVsaW5lcy5zcGVlY2ggaW1wb3J0ICgKICAgIFNwZWVjaEluZmVyZW5jZVBhcmFtcywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24udG94aWNpdHkubXV0b3guc3BlZWNoX3BpcGVsaW5lIGltcG9ydCAoCiAgICBNdXRveFNwZWVjaENsYXNzaWZpZXJQaXBlbGluZSwKKQoKaW1wb3J0IGxvZ2dpbmcKCmxvZ2dpbmcuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICBmb3JtYXQ9IiUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgLS0gJShuYW1lKXM6ICUobWVzc2FnZSlzIiwKKQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKZGVmIG1haW4oKSAtPiBOb25lOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoCiAgICAgICAgZGVzY3JpcHRpb249Ik11dG94IHNwZWVjaCB3aWxsIGNvbXB1dGUgYSB0b3hpY2l0eSBzY29yZSBmb3IgZWFjaCBzcGVlY2ggc2VnbWVudCBpdCBpcyBwcm92aWRlZC4iCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICJkYXRhX2ZpbGUiLAogICAgICAgIHR5cGU9UGF0aCwKICAgICAgICBoZWxwPSJQYXRoIHRvIHRoZSBpbnB1dCBUU1YgbWFuaWZlc3QgdGhhdCBsaXN0IHRoZSBhdWRpbyBmaWxlcy4iLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAib3V0cHV0X2ZpbGUiLAogICAgICAgIHR5cGU9UGF0aCwKICAgICAgICBoZWxwPSJQYXRoIHRvIGEgVFNWIGZpbGUgd2hlcmUgdG8gc2F2ZSB0aGUgcmVzdWx0cy4iLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1sYW5nIiwKICAgICAgICB0eXBlPXN0ciwKICAgICAgICBoZWxwPSJMYW5ndWFnZSwgbGFuZ3VhZ2Ugb2YgdGhlIHNwZWVjaCBiZWluZyBwYXNzZWQgYXMgaW5wdXQsIHRocmVlIGxldHRlciBjb2RlIiwKICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1hdWRpb19yb290X2RpciIsCiAgICAgICAgdHlwZT1zdHIsCiAgICAgICAgaGVscD0iUm9vdCBkaXJlY3RvcnkgZm9yIHRoZSBhdWRpbyBmaWxlbmFtZXMgaW4gdGhlIGRhdGEgZmlsZS4iLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1hdWRpb19wYXRoX2luZGV4IiwKICAgICAgICB0eXBlPWludCwKICAgICAgICBoZWxwPSJJbmRleCBvZiB0aGUgY29sdW1uIHdoZXJlIHRoZSBhdWRpb2ZpbGUgaXMgbGlzdGVkIGluIHRoZSBpbnB1dCB0c3YuIiwKICAgICAgICBkZWZhdWx0PSJhdWRpbyIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWJhdGNoX3NpemUiLAogICAgICAgIHR5cGU9aW50LAogICAgICAgIGhlbHA9IkluZmVyZW5jZSBiYXRjaCBzaXplLiIsCiAgICAgICAgZGVmYXVsdD00LAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1uX3BhcmFsbGVsIiwKICAgICAgICB0eXBlPWludCwKICAgICAgICBoZWxwPSJOdW1iZXIgb2YgZGF0YSBsb2FkaW5nIGluIHBhcmFsbGVsLiIsCiAgICAgICAgZGVmYXVsdD00LAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1kZXZpY2UiLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIGhlbHA9Im5hbWUgb2YgdGhlIGRldmljZSB0byB1c2Ugd2l0aCB0b3JjaC4iLAogICAgICAgIHJlcXVpcmVkPUZhbHNlLAogICAgKQogICAgYXJncywgX3Vua25vd24gPSBwYXJzZXIucGFyc2Vfa25vd25fYXJncygpCgogICAgaWYgYXJncy5kZXZpY2UgaXMgbm90IE5vbmU6CiAgICAgICAgZGV2aWNlID0gdG9yY2guZGV2aWNlKGFyZ3MuZGV2aWNlKQogICAgICAgIGR0eXBlID0gdG9yY2guZmxvYXQzMgogICAgICAgIGlmIGRldmljZS50eXBlID09ICJjdWRhIjoKICAgICAgICAgICAgZHR5cGUgPSB0b3JjaC5mbG9hdDE2CiAgICBlbGlmIHRvcmNoLmN1ZGEuaXNfYXZhaWxhYmxlKCk6CiAgICAgICAgZGV2aWNlID0gdG9yY2guZGV2aWNlKCJjdWRhOjAiKQogICAgICAgIGR0eXBlID0gdG9yY2guZmxvYXQxNgogICAgICAgIGxvZ2dlci5pbmZvKCJ1c2luZyBjdWRhOjAsICVzIiwgZHR5cGUpCiAgICBlbHNlOgogICAgICAgIGRldmljZSA9IHRvcmNoLmRldmljZSgiY3B1IikKICAgICAgICBkdHlwZSA9IHRvcmNoLmZsb2F0MzIKICAgICAgICBsb2dnZXIuaW5mbygibm8gZ3B1LCB1c2luZyBjcHUiKQoKICAgIGxvZ2dlci5pbmZvKCJsb2FkaW5nIG1vZGVscy4iKQoKICAgIHBpcGVsaW5lX2J1aWxkZXIgPSBNdXRveFNwZWVjaENsYXNzaWZpZXJQaXBlbGluZS5sb2FkX21vZGVsX2Zyb21fbmFtZSgKICAgICAgICBtdXRveF9jbGFzc2lmaWVyX25hbWU9Im11dG94IiwKICAgICAgICBlbmNvZGVyX25hbWU9ZiJzb25hcl9zcGVlY2hfZW5jb2Rlcl97YXJncy5sYW5nfSIsCiAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICkKCiAgICBwaXBlbGluZSA9IHBpcGVsaW5lX2J1aWxkZXIuYnVpbGRfcGlwZWxpbmUoCiAgICAgICAgU3BlZWNoSW5mZXJlbmNlUGFyYW1zKAogICAgICAgICAgICBkYXRhX2ZpbGU9YXJncy5kYXRhX2ZpbGUsCiAgICAgICAgICAgIGF1ZGlvX3Jvb3RfZGlyPWFyZ3MuYXVkaW9fcm9vdF9kaXIsCiAgICAgICAgICAgIGF1ZGlvX3BhdGhfaW5kZXg9YXJncy5hdWRpb19wYXRoX2luZGV4LAogICAgICAgICAgICB0YXJnZXRfbGFuZz1hcmdzLmxhbmcsCiAgICAgICAgICAgIGJhdGNoX3NpemU9YXJncy5iYXRjaF9zaXplLAogICAgICAgICAgICBwYWRfaWR4PTAsCiAgICAgICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgICAgIGZiYW5rX2R0eXBlPXRvcmNoLmZsb2F0MzIsCiAgICAgICAgICAgIG5fcGFyYWxsZWw9YXJncy5uX3BhcmFsbGVsLAogICAgICAgICkKICAgICkKCiAgICBsb2dnZXIuaW5mbygicHJvY2Vzc2luZy4iKQoKICAgIHdpdGggb3BlbihhcmdzLm91dHB1dF9maWxlLCAidyIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIG91dGY6CiAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICJpbnB1dF9hdWRpb19wYXRoIiwKICAgICAgICAgICAgInNjb3JlIiwKICAgICAgICAgICAgc2VwPSJcdCIsCiAgICAgICAgICAgIGZpbGU9b3V0ZiwKICAgICAgICApCiAgICAgICAgZm9yIGV4YW1wbGUgaW4gdHFkbShwaXBlbGluZSk6CiAgICAgICAgICAgIGV4ID0gZXhhbXBsZVsiYXVkaW8iXQogICAgICAgICAgICBmb3IgaWR4LCBwYXRoIGluIGVudW1lcmF0ZShleFsicGF0aCJdKToKICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgIHN0cihwYXRoKSwKICAgICAgICAgICAgICAgICAgICBleFsiZGF0YSJdW2lkeF0uaXRlbSgpLAogICAgICAgICAgICAgICAgICAgIHNlcD0iXHQiLAogICAgICAgICAgICAgICAgICAgIGZpbGU9b3V0ZiwKICAgICAgICAgICAgICAgICkKCiAgICBsb2dnZXIuaW5mbyhmIkRvbmUsIG91dHB1dHMgYXJlIGluIHthcmdzLm91dHB1dF9maWxlfS4iKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK'),
    ('seamless/src/seamless_communication/streaming/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/src/seamless_communication/streaming/dataloaders/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuZGF0YWxvYWRlcnMuczJ0dCBpbXBvcnQgKAogICAgU2ltdWxFdmFsU3BlZWNoVG9UZXh0RGF0YWxvYWRlciBhcyBTaW11bEV2YWxTcGVlY2hUb1RleHREYXRhbG9hZGVyLAopCg=='),
    ('seamless/src/seamless_communication/streaming/dataloaders/s2tt.py', ''),
    ('seamless/src/seamless_communication/streaming/agents/seamless_streaming_s2t.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmRldG9rZW5pemVyIGltcG9ydCBEZXRva2VuaXplckFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9mZmxpbmVfdzJ2X2JlcnRfZW5jb2RlciBpbXBvcnQgKAogICAgT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV9mZWF0dXJlX2V4dHJhY3RvciBpbXBvcnQgKAogICAgT25saW5lRmVhdHVyZUV4dHJhY3RvckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV90ZXh0X2RlY29kZXIgaW1wb3J0ICgKICAgIE1NQVNwZWVjaFRvVGV4dERlY29kZXJBZ2VudCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5zaWxlcm9fdmFkIGltcG9ydCBTaWxlcm9WQURBZ2VudApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy51bml0eV9waXBlbGluZSBpbXBvcnQgVW5pdFlBZ2VudFBpcGVsaW5lCgoKY2xhc3MgU2VhbWxlc3NTdHJlYW1pbmdTMlREZXRva0FnZW50KFVuaXRZQWdlbnRQaXBlbGluZSk6CiAgICBwaXBlbGluZSA9IFsKICAgICAgICBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQsCiAgICAgICAgT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50LAogICAgICAgIE1NQVNwZWVjaFRvVGV4dERlY29kZXJBZ2VudCwKICAgICAgICBEZXRva2VuaXplckFnZW50LAogICAgXQoKCmNsYXNzIFNlYW1sZXNzU3RyZWFtaW5nUzJUQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgTU1BU3BlZWNoVG9UZXh0RGVjb2RlckFnZW50LAogICAgXQoKCmNsYXNzIFNlYW1sZXNzU3RyZWFtaW5nUzJUVkFEQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIFNpbGVyb1ZBREFnZW50LAogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgTU1BU3BlZWNoVG9UZXh0RGVjb2RlckFnZW50LAogICAgICAgIERldG9rZW5pemVyQWdlbnQsCiAgICBdCg=='),
    ('seamless/src/seamless_communication/streaming/agents/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCg=='),
    ('seamless/src/seamless_communication/streaming/agents/detokenizer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIsIE5hbWVzcGFjZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0Cgpmcm9tIHNpbXVsZXZhbC5hZ2VudHMgaW1wb3J0IFRleHRUb1RleHRBZ2VudApmcm9tIHNpbXVsZXZhbC5hZ2VudHMuYWN0aW9ucyBpbXBvcnQgQWN0aW9uLCBSZWFkQWN0aW9uLCBXcml0ZUFjdGlvbgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5jb21tb24gaW1wb3J0ICgKICAgIEFnZW50U3RhdGVzLAogICAgTm9VcGRhdGVUYXJnZXRNaXhpbiwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5vbmxpbmVfdGV4dF9kZWNvZGVyIGltcG9ydCAoCiAgICBVbml0WVRleHREZWNvZGVyT3V0cHV0LAopCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNlZ21lbnQsIEVtcHR5U2VnbWVudAoKCmNsYXNzIERldG9rZW5pemVyQWdlbnQoTm9VcGRhdGVUYXJnZXRNaXhpbiwgVGV4dFRvVGV4dEFnZW50KTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgX19pbml0X18oc2VsZiwgYXJnczogTmFtZXNwYWNlKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGFyZ3MpCiAgICAgICAgc2VsZi5kZXRva2VuaXplX29ubHkgPSBhcmdzLmRldG9rZW5pemVfb25seQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21fYXJncyhjbHMsIGFyZ3M6IE5hbWVzcGFjZSwgKiprd2FyZ3M6IERpY3Rbc3RyLCBBbnldKSAtPiBEZXRva2VuaXplckFnZW50OgogICAgICAgIHJldHVybiBjbHMoYXJncykKCiAgICBkZWYgYWRkX2FyZ3MocGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1kZXRva2VuaXplLW9ubHkiLAogICAgICAgICAgICBhY3Rpb249InN0b3JlX3RydWUiLAogICAgICAgICAgICBkZWZhdWx0PVRydWUsCiAgICAgICAgICAgIGhlbHA9IlJ1biBkZXRva2VuaXphdGlvbiB3aXRob3V0IHdhaXRpbmcgZm9yIGEgbmV3IHRva2VuLiIsCiAgICAgICAgKQoKICAgIGRlZiBwb2xpY3koc2VsZiwgc3RhdGVzOiBBZ2VudFN0YXRlcykgLT4gQWN0aW9uOgogICAgICAgIHBvc3NpYmxlX2Z1bGxfd29yZHMgPSBzZWxmLmRlY29kZSgiICIuam9pbihbeCBmb3IgeCBpbiBzdGF0ZXMuc291cmNlXSkpCgogICAgICAgIGlmIHNlbGYuZGV0b2tlbml6ZV9vbmx5IGFuZCBsZW4oc3RhdGVzLnNvdXJjZSkgPiAwOgogICAgICAgICAgICBzdGF0ZXMuc291cmNlID0gW10KICAgICAgICAgICAgaWYgbGVuKHBvc3NpYmxlX2Z1bGxfd29yZHMpID09IDAgYW5kIG5vdCBzdGF0ZXMuc291cmNlX2ZpbmlzaGVkOgogICAgICAgICAgICAgICAgcmV0dXJuIFJlYWRBY3Rpb24oKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIFdyaXRlQWN0aW9uKHBvc3NpYmxlX2Z1bGxfd29yZHMsIHN0YXRlcy5zb3VyY2VfZmluaXNoZWQpCgogICAgICAgIGlmIHN0YXRlcy5zb3VyY2VfZmluaXNoZWQ6CiAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbihwb3NzaWJsZV9mdWxsX3dvcmRzLCBUcnVlKQogICAgICAgIGVsaWYgbGVuKHBvc3NpYmxlX2Z1bGxfd29yZHMuc3BsaXQoKSkgPiAxOgogICAgICAgICAgICBmdWxsX3dvcmQgPSBwb3NzaWJsZV9mdWxsX3dvcmRzLnNwbGl0KClbMF0KICAgICAgICAgICAgc3RhdGVzLnNvdXJjZSA9IHN0YXRlcy5zb3VyY2VbLTE6XQogICAgICAgICAgICByZXR1cm4gV3JpdGVBY3Rpb24oZnVsbF93b3JkLCBmaW5pc2hlZD1GYWxzZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gUmVhZEFjdGlvbigpCgogICAgZGVmIGRlY29kZShzZWxmLCB4OiBzdHIpIC0+IHN0cjoKICAgICAgICByZXR1cm4geC5yZXBsYWNlKCIgIiwgIiIpLnJlcGxhY2UoIlx1MjU4MSIsICIgIikuc3RyaXAoKQoKCmNsYXNzIFVuaXRZRGV0b2tlbml6ZXJBZ2VudFN0YXRlcyhBZ2VudFN0YXRlcyk6CiAgICBkZWYgdXBkYXRlX3NvdXJjZShzZWxmLCBzZWdtZW50OiBTZWdtZW50KSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIEV4dHJhY3QgdG9rZW5zIGZyb20gVW5pdFlUZXh0RGVjb2Rlck91dHB1dAogICAgICAgICIiIgogICAgICAgIHNlbGYuc291cmNlX2ZpbmlzaGVkID0gc2VnbWVudC5maW5pc2hlZAogICAgICAgIGlmIGlzaW5zdGFuY2Uoc2VnbWVudCwgRW1wdHlTZWdtZW50KToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgIyBUZXh0U2VnbWVudAogICAgICAgIHNlZ21lbnRfY29udGVudDogVW5pdFlUZXh0RGVjb2Rlck91dHB1dCA9IHNlZ21lbnQuY29udGVudAogICAgICAgIHRva2VuID0gc2VnbWVudF9jb250ZW50LnRva2VucwogICAgICAgIHNlbGYuc291cmNlICs9IHRva2VuCgoKY2xhc3MgVW5pdFlEZXRva2VuaXplckFnZW50KERldG9rZW5pemVyQWdlbnQpOgogICAgZGVmIGJ1aWxkX3N0YXRlcyhzZWxmKSAtPiBVbml0WURldG9rZW5pemVyQWdlbnRTdGF0ZXM6CiAgICAgICAgcmV0dXJuIFVuaXRZRGV0b2tlbml6ZXJBZ2VudFN0YXRlcygpCg=='),
    ('seamless/src/seamless_communication/streaming/agents/online_feature_extractor.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBtYXRoCmltcG9ydCB0b3JjaAoKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIsIE5hbWVzcGFjZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBMaXN0Cgpmcm9tIGZhaXJzZXEyLmRhdGEuYXVkaW8gaW1wb3J0IFdhdmVmb3JtVG9GYmFua0NvbnZlcnRlciwgV2F2ZWZvcm1Ub0ZiYW5rSW5wdXQKCmZyb20gc2ltdWxldmFsLmFnZW50cyBpbXBvcnQgU3BlZWNoVG9TcGVlY2hBZ2VudApmcm9tIHNpbXVsZXZhbC5hZ2VudHMuYWN0aW9ucyBpbXBvcnQgQWN0aW9uLCBSZWFkQWN0aW9uLCBXcml0ZUFjdGlvbgpmcm9tIHNpbXVsZXZhbC5kYXRhLnNlZ21lbnRzIGltcG9ydCBTZWdtZW50LCBTcGVlY2hTZWdtZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmNvbW1vbiBpbXBvcnQgQWdlbnRTdGF0ZXMKCgpTSElGVF9TSVpFID0gMTAKV0lORE9XX1NJWkUgPSAyNQpTQU1QTEVfUkFURSA9IDE2MDAwCkZFQVRVUkVfRElNID0gODAKCgpjbGFzcyBGZWF0dXJlU3RhdGVzKEFnZW50U3RhdGVzKTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgcmVzZXQoc2VsZikgLT4gTm9uZToKICAgICAgICBzdXBlcigpLnJlc2V0KCkKICAgICAgICBzZWxmLnByZXZpb3VzX3Jlc2lkdWFsX3NhbXBsZXM6IExpc3RbZmxvYXRdID0gW10KICAgICAgICBzZWxmLnRndF9sYW5nID0gTm9uZQoKICAgIGRlZiB1cGRhdGVfc291cmNlKHNlbGYsIHNlZ21lbnQ6IFNlZ21lbnQpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgVXBkYXRlIHN0YXRlcyBmcm9tIGlucHV0IHNlZ21lbnQKICAgICAgICBBcmdzOgogICAgICAgICAgICBzZWdtZW50ICh+c2ltdWxldmFsLmFnZW50cy5zZWdtZW50cy5TZWdtZW50KTogaW5wdXQgc2VnbWVudAogICAgICAgICIiIgogICAgICAgIHNlbGYuc291cmNlX2ZpbmlzaGVkID0gc2VnbWVudC5maW5pc2hlZAogICAgICAgIGlmIHNlbGYudGd0X2xhbmcgaXMgTm9uZSBhbmQgc2VnbWVudC50Z3RfbGFuZyBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi50Z3RfbGFuZyA9IHNlZ21lbnQudGd0X2xhbmcKICAgICAgICBpZiBub3Qgc2VnbWVudC5pc19lbXB0eToKICAgICAgICAgICAgc2VsZi5zb3VyY2UuYXBwZW5kKHNlZ21lbnQuY29udGVudCkKCgpjbGFzcyBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQoU3BlZWNoVG9TcGVlY2hBZ2VudCk6ICAjIHR5cGU6IGlnbm9yZQogICAgIiIiCiAgICBFeHRyYWN0IHNwZWVjaCBmZWF0dXJlcyBvbiB0aGUgZmx5LgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFyZ3M6IE5hbWVzcGFjZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhhcmdzKQogICAgICAgIHNlbGYuc2hpZnRfc2l6ZSA9IGFyZ3Muc2hpZnRfc2l6ZQogICAgICAgIHNlbGYud2luZG93X3NpemUgPSBhcmdzLndpbmRvd19zaXplCiAgICAgICAgYXNzZXJ0IHNlbGYud2luZG93X3NpemUgPj0gc2VsZi5zaGlmdF9zaXplCgogICAgICAgIHNlbGYuc2FtcGxlX3JhdGUgPSBhcmdzLnNhbXBsZV9yYXRlCiAgICAgICAgc2VsZi5mZWF0dXJlX2RpbSA9IGFyZ3MuZmVhdHVyZV9kaW0KICAgICAgICBzZWxmLm51bV9zYW1wbGVzX3Blcl9zaGlmdCA9IGludChzZWxmLnNoaWZ0X3NpemUgKiBzZWxmLnNhbXBsZV9yYXRlIC8gMTAwMCkKICAgICAgICBzZWxmLm51bV9zYW1wbGVzX3Blcl93aW5kb3cgPSBpbnQoc2VsZi53aW5kb3dfc2l6ZSAqIHNlbGYuc2FtcGxlX3JhdGUgLyAxMDAwKQogICAgICAgIHNlbGYubGVuX21zX3RvX3NhbXBsZXMgPSBsYW1iZGEgeDogeCAqIHNlbGYuc2FtcGxlX3JhdGUgLyAxMDAwCgogICAgICAgIHNlbGYuY29udmVydF90b19mYmFuayA9IFdhdmVmb3JtVG9GYmFua0NvbnZlcnRlcigKICAgICAgICAgICAgbnVtX21lbF9iaW5zPTgwLAogICAgICAgICAgICB3YXZlZm9ybV9zY2FsZT0yKioxNSBpZiBhcmdzLmRlbm9ybWFsaXplIGVsc2UgMS4wLAogICAgICAgICAgICBzdGFuZGFyZGl6ZT1GYWxzZSwKICAgICAgICAgICAgZGV2aWNlPWFyZ3MuZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1hcmdzLmR0eXBlLAogICAgICAgICkKCiAgICBkZWYgYnVpbGRfc3RhdGVzKHNlbGYpIC0+IEZlYXR1cmVTdGF0ZXM6CiAgICAgICAgcmV0dXJuIEZlYXR1cmVTdGF0ZXMoKQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBhZGRfYXJncyhwYXJzZXI6IEFyZ3VtZW50UGFyc2VyKSAtPiBOb25lOgogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXNoaWZ0LXNpemUiLAogICAgICAgICAgICB0eXBlPWludCwKICAgICAgICAgICAgZGVmYXVsdD1TSElGVF9TSVpFLAogICAgICAgICAgICBoZWxwPSJTaGlmdCBzaXplIG9mIGZlYXR1cmUgZXh0cmFjdGlvbiB3aW5kb3cuIiwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0td2luZG93LXNpemUiLAogICAgICAgICAgICB0eXBlPWludCwKICAgICAgICAgICAgZGVmYXVsdD1XSU5ET1dfU0laRSwKICAgICAgICAgICAgaGVscD0iV2luZG93IHNpemUgb2YgZmVhdHVyZSBleHRyYWN0aW9uIHdpbmRvdy4iLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1mZWF0dXJlLWRpbSIsCiAgICAgICAgICAgIHR5cGU9aW50LAogICAgICAgICAgICBkZWZhdWx0PUZFQVRVUkVfRElNLAogICAgICAgICAgICBoZWxwPSJBY291c3RpYyBmZWF0dXJlIGRpbWVuc2lvbi4iLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1kZW5vcm1hbGl6ZSIsCiAgICAgICAgICAgIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsCiAgICAgICAgICAgIGhlbHA9ImRlbm9ybWFsaXplZCB0byAxNi1iaXQgc2lnbmVkIGludGVnZXJzIiwKICAgICAgICApCgogICAgZGVmIHBvbGljeShzZWxmLCBzdGF0ZXM6IEZlYXR1cmVTdGF0ZXMpIC0+IEFjdGlvbjoKICAgICAgICBpZiBsZW4oc3RhdGVzLnNvdXJjZSkgPT0gMDoKICAgICAgICAgICAgaWYgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbih7fSwgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKCiAgICAgICAgc2FtcGxlcyA9IHN0YXRlcy5zb3VyY2VbLTFdCgogICAgICAgIHNhbXBsZXMgPSBzdGF0ZXMucHJldmlvdXNfcmVzaWR1YWxfc2FtcGxlcyArIHNhbXBsZXMKICAgICAgICBpZiBsZW4oc2FtcGxlcykgPCBzZWxmLm51bV9zYW1wbGVzX3Blcl93aW5kb3c6CiAgICAgICAgICAgIHN0YXRlcy5wcmV2aW91c19yZXNpZHVhbF9zYW1wbGVzID0gc2FtcGxlcwogICAgICAgICAgICByZXR1cm4gUmVhZEFjdGlvbigpCgogICAgICAgICMgbnVtX2ZyYW1lcyBpcyB0aGUgbnVtYmVyIG9mIGZyYW1lcyBmcm9tIHRoZSBuZXcgc2VnbWVudAogICAgICAgIG51bV9mcmFtZXMgPSBtYXRoLmZsb29yKAogICAgICAgICAgICAobGVuKHNhbXBsZXMpIC0gc2VsZi5sZW5fbXNfdG9fc2FtcGxlcyhzZWxmLndpbmRvd19zaXplIC0gc2VsZi5zaGlmdF9zaXplKSkKICAgICAgICAgICAgLyBzZWxmLm51bV9zYW1wbGVzX3Blcl9zaGlmdAogICAgICAgICkKCiAgICAgICAgIyB0aGUgbnVtYmVyIG9mIGZyYW1lcyB1c2VkIGZvciBmZWF0dXJlIGV4dHJhY3Rpb24KICAgICAgICAjIGluY2x1ZGluZyBzb21lIHBhcnQgb2YgdGhlIHByZXZpb3VzIHNlZ21lbnQKICAgICAgICBlZmZlY3RpdmVfbnVtX3NhbXBsZXMgPSBpbnQoCiAgICAgICAgICAgIG51bV9mcmFtZXMgKiBzZWxmLmxlbl9tc190b19zYW1wbGVzKHNlbGYuc2hpZnRfc2l6ZSkKICAgICAgICAgICAgKyBzZWxmLmxlbl9tc190b19zYW1wbGVzKHNlbGYud2luZG93X3NpemUgLSBzZWxmLnNoaWZ0X3NpemUpCiAgICAgICAgKQoKICAgICAgICBpbnB1dF9zYW1wbGVzID0gc2FtcGxlc1s6ZWZmZWN0aXZlX251bV9zYW1wbGVzXQogICAgICAgIHN0YXRlcy5wcmV2aW91c19yZXNpZHVhbF9zYW1wbGVzID0gc2FtcGxlc1sKICAgICAgICAgICAgbnVtX2ZyYW1lcyAqIHNlbGYubnVtX3NhbXBsZXNfcGVyX3NoaWZ0IDoKICAgICAgICBdCgogICAgICAgIGRhdGE6IFdhdmVmb3JtVG9GYmFua0lucHV0ID0gewogICAgICAgICAgICAid2F2ZWZvcm0iOiB0b3JjaC50ZW5zb3IoaW5wdXRfc2FtcGxlcykudW5zcXVlZXplKDApLAogICAgICAgICAgICAic2FtcGxlX3JhdGUiOiBzZWxmLnNhbXBsZV9yYXRlLAogICAgICAgIH0KCiAgICAgICAgb3V0cHV0ID0gc2VsZi5jb252ZXJ0X3RvX2ZiYW5rKGRhdGEpWyJmYmFuayJdCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigKICAgICAgICAgICAgU3BlZWNoU2VnbWVudCgKICAgICAgICAgICAgICAgIGNvbnRlbnQ9b3V0cHV0LAogICAgICAgICAgICAgICAgdGd0X2xhbmc9c3RhdGVzLnRndF9sYW5nLAogICAgICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9hcmdzKGNscywgYXJnczogQW55LCAqKmt3YXJnczogQW55KSAtPiBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQ6CiAgICAgICAgcmV0dXJuIGNscyhhcmdzKQo='),
    ('seamless/src/seamless_communication/streaming/agents/pretssel_vocoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBsb2dnaW5nCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBBbnksIERpY3QsIExpc3QKCmltcG9ydCB0b3JjaApmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgYXNzZXRfc3RvcmUKZnJvbSBmYWlyc2VxMi5kYXRhLmF1ZGlvIGltcG9ydCBXYXZlZm9ybVRvRmJhbmtDb252ZXJ0ZXIsIFdhdmVmb3JtVG9GYmFua0lucHV0CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuZ2VuZXJhdG9yLmxvYWRlciBpbXBvcnQgbG9hZF9wcmV0c3NlbF92b2NvZGVyX21vZGVsCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkgaW1wb3J0IGxvYWRfZ2Ntdm5fc3RhdHMKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0b3JlIGltcG9ydCBhZGRfZ2F0ZWRfYXNzZXRzCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmNvbW1vbiBpbXBvcnQgKAogICAgQWdlbnRTdGF0ZXMsCiAgICBOb1VwZGF0ZVRhcmdldE1peGluLAopCmZyb20gc2ltdWxldmFsLmFnZW50cyBpbXBvcnQgVGV4dFRvU3BlZWNoQWdlbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IFJlYWRBY3Rpb24sIFdyaXRlQWN0aW9uCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNwZWVjaFNlZ21lbnQKCmxvZ2dpbmcuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICBmb3JtYXQ9IiUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgLS0gJShuYW1lKXM6ICUobWVzc2FnZSlzIiwKKQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKY2xhc3MgUHJldHNzZWxWb2NvZGVyQWdlbnQoTm9VcGRhdGVUYXJnZXRNaXhpbiwgVGV4dFRvU3BlZWNoQWdlbnQpOiAgIyB0eXBlOiBpZ25vcmUKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBhcmdzOiBOYW1lc3BhY2UpIC0+IE5vbmU6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhhcmdzKQoKICAgICAgICBpZiBhcmdzLmdhdGVkX21vZGVsX2RpcjoKICAgICAgICAgICAgYWRkX2dhdGVkX2Fzc2V0cyhhcmdzLmdhdGVkX21vZGVsX2RpcikKCiAgICAgICAgbG9nZ2VyLmluZm8oCiAgICAgICAgICAgIGYiTG9hZGluZyB0aGUgVm9jb2RlciBtb2RlbDoge2FyZ3Mudm9jb2Rlcl9uYW1lfSBvbiBkZXZpY2U9e2FyZ3MuZGV2aWNlfSwgZHR5cGU9e2FyZ3MuZHR5cGV9IgogICAgICAgICkKICAgICAgICBhc3NlcnQgInByZXRzc2VsIiBpbiBhcmdzLnZvY29kZXJfbmFtZQogICAgICAgIHNlbGYudm9jb2RlciA9IGxvYWRfcHJldHNzZWxfdm9jb2Rlcl9tb2RlbCgKICAgICAgICAgICAgYXJncy52b2NvZGVyX25hbWUsIGRldmljZT1hcmdzLmRldmljZSwgZHR5cGU9YXJncy5kdHlwZQogICAgICAgICkKICAgICAgICBzZWxmLnZvY29kZXIuZXZhbCgpCgogICAgICAgIHZvY29kZXJfbW9kZWxfY2FyZCA9IGFzc2V0X3N0b3JlLnJldHJpZXZlX2NhcmQoYXJncy52b2NvZGVyX25hbWUpCiAgICAgICAgc2VsZi52b2NvZGVyX3NhbXBsZV9yYXRlID0gdm9jb2Rlcl9tb2RlbF9jYXJkLmZpZWxkKCJzYW1wbGVfcmF0ZSIpLmFzXyhpbnQpCiAgICAgICAgc2VsZi52b2NvZGVyX2xhbmdzID0gdm9jb2Rlcl9tb2RlbF9jYXJkLmZpZWxkKCJtb2RlbF9jb25maWciKS5maWVsZCgibGFuZ3MiKS5hc19saXN0KHN0cikKCiAgICAgICAgc2VsZi51cHN0cmVhbV9pZHggPSBhcmdzLnVwc3RyZWFtX2lkeAogICAgICAgIHNlbGYuc2FtcGxlX3JhdGUgPSBhcmdzLnNhbXBsZV9yYXRlICAjIGlucHV0IHNhbXBsZSByYXRlCiAgICAgICAgc2VsZi50Z3RfbGFuZyA9IGFyZ3MudGd0X2xhbmcKICAgICAgICBzZWxmLmNvbnZlcnRfdG9fZmJhbmsgPSBXYXZlZm9ybVRvRmJhbmtDb252ZXJ0ZXIoCiAgICAgICAgICAgIG51bV9tZWxfYmlucz04MCwKICAgICAgICAgICAgd2F2ZWZvcm1fc2NhbGU9MioqMTUsCiAgICAgICAgICAgIGNoYW5uZWxfbGFzdD1UcnVlLAogICAgICAgICAgICBzdGFuZGFyZGl6ZT1GYWxzZSwKICAgICAgICAgICAgZGV2aWNlPWFyZ3MuZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1hcmdzLmR0eXBlLAogICAgICAgICkKCiAgICAgICAgX2djbXZuX21lYW4sIF9nY212bl9zdGQgPSBsb2FkX2djbXZuX3N0YXRzKGFyZ3Mudm9jb2Rlcl9uYW1lKQogICAgICAgIHNlbGYuZ2Ntdm5fbWVhbiA9IHRvcmNoLnRlbnNvcigKICAgICAgICAgICAgX2djbXZuX21lYW4sIGRldmljZT1hcmdzLmRldmljZSwgZHR5cGU9YXJncy5kdHlwZQogICAgICAgICkKICAgICAgICBzZWxmLmdjbXZuX3N0ZCA9IHRvcmNoLnRlbnNvcihfZ2Ntdm5fc3RkLCBkZXZpY2U9YXJncy5kZXZpY2UsIGR0eXBlPWFyZ3MuZHR5cGUpCgogICAgZGVmIGdjbXZuX25vcm1hbGl6ZShzZWxmLCBzZXFzOiB0b3JjaC5UZW5zb3IpIC0+IHRvcmNoLlRlbnNvcjoKICAgICAgICByZXN1bHQ6IHRvcmNoLlRlbnNvciA9IHNlcXMuc3VidHJhY3Qoc2VsZi5nY212bl9tZWFuKS5kaXZpZGUoc2VsZi5nY212bl9zdGQpCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogQWdlbnRTdGF0ZXMpIC0+IFdyaXRlQWN0aW9uOgogICAgICAgICIiIgogICAgICAgIFRoZSBwb2xpY3kgaXMgYWx3YXlzIHdyaXRlIGlmIHRoZXJlIGlzIGEgd2F2ZWZvcm0KICAgICAgICAiIiIKICAgICAgICB1bml0cyA9IHN0YXRlcy5zb3VyY2UKCiAgICAgICAgaWYgbGVuKHVuaXRzKSA9PSAwIG9yIGxlbih1bml0c1swXSkgPT0gMDoKICAgICAgICAgICAgaWYgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbihjb250ZW50PVtdLCBmaW5pc2hlZD1UcnVlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIFJlYWRBY3Rpb24oKQoKICAgICAgICB1bml0ID0gdW5pdHNbMF1bMF0KCiAgICAgICAgIyBhZGp1c3QgdGhlIGNvbnRyb2wgc3ltYm9scyBmb3IgdGhlIGVtYmVkZGluZwogICAgICAgIHVuaXQgKz0gNAoKICAgICAgICB1bml0LCBkdXJhdGlvbiA9IHRvcmNoLnVuaXF1ZV9jb25zZWN1dGl2ZSh1bml0LCByZXR1cm5fY291bnRzPVRydWUpCgogICAgICAgIGR1cmF0aW9uICo9IDIKCiAgICAgICAgaWYgaXNpbnN0YW5jZShzdGF0ZXMudXBzdHJlYW1fc3RhdGVzW3NlbGYudXBzdHJlYW1faWR4XS5zb3VyY2UsIGxpc3QpOgogICAgICAgICAgICBzb3VyY2U6IExpc3RbZmxvYXRdID0gc3VtKAogICAgICAgICAgICAgICAgc3RhdGVzLnVwc3RyZWFtX3N0YXRlc1tzZWxmLnVwc3RyZWFtX2lkeF0uc291cmNlLCBbXQogICAgICAgICAgICApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc291cmNlID0gc3RhdGVzLnVwc3RyZWFtX3N0YXRlc1tzZWxmLnVwc3RyZWFtX2lkeF0uc291cmNlCgogICAgICAgIGF1ZGlvX2RpY3Q6IFdhdmVmb3JtVG9GYmFua0lucHV0ID0gewogICAgICAgICAgICAid2F2ZWZvcm0iOiB0b3JjaC50ZW5zb3IoCiAgICAgICAgICAgICAgICBzb3VyY2UsIGR0eXBlPXRvcmNoLmZsb2F0MzIsIGRldmljZT1zZWxmLmRldmljZQogICAgICAgICAgICApLnVuc3F1ZWV6ZSgxKSwKICAgICAgICAgICAgInNhbXBsZV9yYXRlIjogc2VsZi5zYW1wbGVfcmF0ZSwKICAgICAgICB9CgogICAgICAgIGZlYXRzID0gc2VsZi5jb252ZXJ0X3RvX2ZiYW5rKGF1ZGlvX2RpY3QpWyJmYmFuayJdCgogICAgICAgIGZlYXRzID0gc2VsZi5nY212bl9ub3JtYWxpemUoZmVhdHMpCgogICAgICAgIHRndF9sYW5nID0gc3RhdGVzLnRndF9sYW5nIGlmIHN0YXRlcy50Z3RfbGFuZyBlbHNlIHNlbGYudGd0X2xhbmcKCiAgICAgICAgCiAgICAgICAgaWYgdGd0X2xhbmcgbm90IGluIHNlbGYudm9jb2Rlcl9sYW5nczoKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJ7dGd0X2xhbmd9IG5vdCBzdXBwb3J0ZWQhIikKICAgICAgICAgICAgY29udGVudCA9IFtdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2F2ID0gc2VsZi52b2NvZGVyKAogICAgICAgICAgICAgICAgdW5pdCwKICAgICAgICAgICAgICAgIHRndF9sYW5nPXRndF9sYW5nLAogICAgICAgICAgICAgICAgcHJvc29keV9pbnB1dF9zZXFzPWZlYXRzLAogICAgICAgICAgICAgICAgZHVyYXRpb25zPWR1cmF0aW9uLnVuc3F1ZWV6ZSgwKSwKICAgICAgICAgICAgICAgIG5vcm1hbGl6ZV9iZWZvcmU9VHJ1ZSwKICAgICAgICAgICAgKQogICAgICAgICAgICBjb250ZW50ID0gd2F2WzBdWzBdWzBdLnRvbGlzdCgpCgogICAgICAgIHN0YXRlcy5zb3VyY2UgPSBbXQoKICAgICAgICByZXR1cm4gV3JpdGVBY3Rpb24oCiAgICAgICAgICAgIFNwZWVjaFNlZ21lbnQoCiAgICAgICAgICAgICAgICBjb250ZW50PWNvbnRlbnQsCiAgICAgICAgICAgICAgICBmaW5pc2hlZD1zdGF0ZXMuc291cmNlX2ZpbmlzaGVkLAogICAgICAgICAgICAgICAgc2FtcGxlX3JhdGU9c2VsZi52b2NvZGVyX3NhbXBsZV9yYXRlLAogICAgICAgICAgICAgICAgdGd0X2xhbmc9dGd0X2xhbmcsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGZpbmlzaGVkPXN0YXRlcy5zb3VyY2VfZmluaXNoZWQsCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGFkZF9hcmdzKGNscywgcGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1nYXRlZC1tb2RlbC1kaXIiLAogICAgICAgICAgICB0eXBlPVBhdGgsCiAgICAgICAgICAgIHJlcXVpcmVkPUZhbHNlLAogICAgICAgICAgICBoZWxwPSJTZWFtbGVzc0V4cHJlc3NpdmUgbW9kZWwgZGlyZWN0b3J5LiIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXZvY29kZXItbmFtZSIsCiAgICAgICAgICAgIHR5cGU9c3RyLAogICAgICAgICAgICBoZWxwPSJWb2NvZGVyIG5hbWUgLSB2b2NvZGVyX3ByZXRzc2VsIG9yIHZvY29kZXJfcHJldHNzZWxfMTZraHoiLAogICAgICAgICAgICBkZWZhdWx0PSJ2b2NvZGVyX3ByZXRzc2VsIiwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tdXBzdHJlYW0taWR4IiwKICAgICAgICAgICAgdHlwZT1pbnQsCiAgICAgICAgICAgIGRlZmF1bHQ9MCwKICAgICAgICAgICAgaGVscD0iaW5kZXggb2YgZW5jb2RlciBzdGF0ZXMgd2hlcmUgc3RhdGVzLnNvdXJjZSBjb250YWlucyBpbnB1dCBhdWRpbyIsCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21fYXJncygKICAgICAgICBjbHMsIGFyZ3M6IE5hbWVzcGFjZSwgKiprd2FyZ3M6IERpY3Rbc3RyLCBBbnldCiAgICApIC0+IFByZXRzc2VsVm9jb2RlckFnZW50OgogICAgICAgIHJldHVybiBjbHMoYXJncykK'),
    ('seamless/src/seamless_communication/streaming/agents/silero_vad.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKaW1wb3J0IGxvZ2dpbmcKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmltcG9ydCBxdWV1ZQppbXBvcnQgcmFuZG9tCmltcG9ydCB0aW1lCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSBvcyBpbXBvcnQgU0VFS19FTkQKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgTGlzdCwgT3B0aW9uYWwsIFVuaW9uCgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHRvcmNoCmltcG9ydCBzb3VuZGZpbGUKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMuY29tbW9uIGltcG9ydCAoCiAgICBBZ2VudFN0YXRlcywKICAgIEVhcmx5U3RvcHBpbmdNaXhpbiwKKQpmcm9tIHNpbXVsZXZhbC5hZ2VudHMgaW1wb3J0IFNwZWVjaFRvU3BlZWNoQWdlbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IEFjdGlvbiwgUmVhZEFjdGlvbiwgV3JpdGVBY3Rpb24KZnJvbSBzaW11bGV2YWwuZGF0YS5zZWdtZW50cyBpbXBvcnQgRW1wdHlTZWdtZW50LCBTZWdtZW50LCBTcGVlY2hTZWdtZW50Cgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5JTkZPLAogICAgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKGxldmVsbmFtZSlzIC0tICUobmFtZSlzOiAlKG1lc3NhZ2UpcyIsCikKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgpTUEVFQ0hfUFJPQl9USFJFU0hPTEQgPSAwLjYKCgpjbGFzcyBTaWxlcm9WQURTdGF0ZXMoRWFybHlTdG9wcGluZ01peGluLCBBZ2VudFN0YXRlcyk6ICAjIHR5cGU6IGlnbm9yZQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFyZ3M6IE5hbWVzcGFjZSkgLT4gTm9uZToKICAgICAgICBzZWxmLm1vZGVsLCB1dGlscyA9IHRvcmNoLmh1Yi5sb2FkKAogICAgICAgICAgICByZXBvX29yX2Rpcj0ic25ha2VyczQvc2lsZXJvLXZhZCIsCiAgICAgICAgICAgIG1vZGVsPSJzaWxlcm9fdmFkIiwKICAgICAgICAgICAgZm9yY2VfcmVsb2FkPUZhbHNlLAogICAgICAgICAgICBvbm54PUZhbHNlLAogICAgICAgICkKCiAgICAgICAgKAogICAgICAgICAgICBzZWxmLmdldF9zcGVlY2hfdGltZXN0YW1wcywKICAgICAgICAgICAgc2VsZi5zYXZlX2F1ZGlvLAogICAgICAgICAgICBzZWxmLnJlYWRfYXVkaW8sCiAgICAgICAgICAgIHNlbGYuVkFESXRlcmF0b3IsCiAgICAgICAgICAgIHNlbGYuY29sbGVjdF9jaHVua3MsCiAgICAgICAgKSA9IHV0aWxzCiAgICAgICAgc2VsZi5zaWxlbmNlX2xpbWl0X21zID0gYXJncy5zaWxlbmNlX2xpbWl0X21zCiAgICAgICAgc2VsZi5zcGVlY2hfc29mdF9saW1pdF9tcyA9IGFyZ3Muc3BlZWNoX3NvZnRfbGltaXRfbXMKICAgICAgICBzZWxmLndpbmRvd19zaXplX3NhbXBsZXMgPSBhcmdzLndpbmRvd19zaXplX3NhbXBsZXMKICAgICAgICBzZWxmLmNodW5rX3NpemVfc2FtcGxlcyA9IGFyZ3MuY2h1bmtfc2l6ZV9zYW1wbGVzCiAgICAgICAgc2VsZi5zYW1wbGVfcmF0ZSA9IGFyZ3Muc2FtcGxlX3JhdGUKICAgICAgICBzZWxmLmluaXRfc3BlZWNoX3Byb2IgPSBhcmdzLmluaXRfc3BlZWNoX3Byb2IKICAgICAgICBzZWxmLmRlYnVnID0gYXJncy5kZWJ1ZwogICAgICAgIHNlbGYudGVzdF9pbnB1dF9zZWdtZW50c193YXYgPSBOb25lCiAgICAgICAgc2VsZi5kZWJ1Z19sb2coYXJncykKICAgICAgICBzZWxmLmlucHV0X3F1ZXVlOiBxdWV1ZS5RdWV1ZVtTZWdtZW50XSA9IHF1ZXVlLlF1ZXVlKCkKICAgICAgICBzZWxmLm5leHRfaW5wdXRfcXVldWU6IHF1ZXVlLlF1ZXVlW1NlZ21lbnRdID0gcXVldWUuUXVldWUoKQogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQoKICAgIGRlZiBjbGVhcl9xdWV1ZXMoc2VsZikgLT4gTm9uZToKICAgICAgICB3aGlsZSBub3Qgc2VsZi5pbnB1dF9xdWV1ZS5lbXB0eSgpOgogICAgICAgICAgICBzZWxmLmlucHV0X3F1ZXVlLmdldF9ub3dhaXQoKQogICAgICAgICAgICBzZWxmLmlucHV0X3F1ZXVlLnRhc2tfZG9uZSgpCiAgICAgICAgIyBtb3ZlIGV2ZXJ5dGhpbmcgZnJvbSBuZXh0X2lucHV0X3F1ZXVlIHRvIGlucHV0X3F1ZXVlCiAgICAgICAgd2hpbGUgbm90IHNlbGYubmV4dF9pbnB1dF9xdWV1ZS5lbXB0eSgpOgogICAgICAgICAgICBjaHVuayA9IHNlbGYubmV4dF9pbnB1dF9xdWV1ZS5nZXRfbm93YWl0KCkKICAgICAgICAgICAgc2VsZi5uZXh0X2lucHV0X3F1ZXVlLnRhc2tfZG9uZSgpCiAgICAgICAgICAgIHNlbGYuaW5wdXRfcXVldWUucHV0X25vd2FpdChjaHVuaykKCiAgICBkZWYgcmVzZXQoc2VsZikgLT4gTm9uZToKICAgICAgICBzdXBlcigpLnJlc2V0KCkKICAgICAgICAjIFRPRE86IGluIHNlYW1sZXNzX3NlcnZlciwgcmVwb3J0IGxhdGVuY3kgZm9yIGVhY2ggbmV3IHNlZ21lbnQKICAgICAgICBzZWxmLmZpcnN0X2lucHV0X3RzOiBPcHRpb25hbFtmbG9hdF0gPSBOb25lCiAgICAgICAgc2VsZi5zaWxlbmNlX2FjY19tcyA9IDAKICAgICAgICBzZWxmLnNwZWVjaF9hY2NfbXMgPSAwCiAgICAgICAgc2VsZi5pbnB1dF9jaHVuazogbnAubmRhcnJheVtBbnksIG5wLmR0eXBlW25wLmludDE2XV0gPSBucC5lbXB0eSgKICAgICAgICAgICAgMCwgZHR5cGU9bnAuaW50MTYKICAgICAgICApCiAgICAgICAgc2VsZi5pc19mcmVzaF9zdGF0ZSA9IFRydWUKICAgICAgICBzZWxmLmNsZWFyX3F1ZXVlcygpCiAgICAgICAgc2VsZi5tb2RlbC5yZXNldF9zdGF0ZXMoKQogICAgICAgIHNlbGYuY29uc2VjdXRpdmVfc2lsZW5jZV9kZWNheV9jb3VudCA9IDAKCiAgICBkZWYgcmVzZXRfZWFybHkoc2VsZikgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBEb24ndCByZXNldCBzdGF0ZSBiZWZvcmUgRU9TCiAgICAgICAgIiIiCiAgICAgICAgcGFzcwoKICAgIGRlZiBnZXRfc3BlZWNoX3Byb2JfZnJvbV9ucF9mbG9hdDMyKAogICAgICAgIHNlbGYsIHNlZ21lbnQ6IG5wLm5kYXJyYXlbQW55LCBucC5kdHlwZVtucC5mbG9hdDMyXV0KICAgICkgLT4gTGlzdFtBbnldOgogICAgICAgIHQgPSB0b3JjaC5mcm9tX251bXB5KHNlZ21lbnQpCiAgICAgICAgc3BlZWNoX3Byb2JzID0gW10KICAgICAgICAjIFRPRE86IHJ1biBzZWxmLm1vZGVsIGluIGJhdGNoPwogICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbih0KSwgc2VsZi53aW5kb3dfc2l6ZV9zYW1wbGVzKToKICAgICAgICAgICAgY2h1bmsgPSB0W2kgOiBpICsgc2VsZi53aW5kb3dfc2l6ZV9zYW1wbGVzXQogICAgICAgICAgICBpZiBsZW4oY2h1bmspIDwgc2VsZi53aW5kb3dfc2l6ZV9zYW1wbGVzOgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgc3BlZWNoX3Byb2IgPSBzZWxmLm1vZGVsKGNodW5rLCBzZWxmLnNhbXBsZV9yYXRlKS5pdGVtKCkKICAgICAgICAgICAgc3BlZWNoX3Byb2JzLmFwcGVuZChzcGVlY2hfcHJvYikKICAgICAgICByZXR1cm4gc3BlZWNoX3Byb2JzCgogICAgZGVmIGRlYnVnX2xvZyhzZWxmLCBtOiBBbnkpIC0+IE5vbmU6CiAgICAgICAgaWYgc2VsZi5kZWJ1ZzoKICAgICAgICAgICAgbG9nZ2VyLmluZm8obSkKCiAgICBkZWYgcHJvY2Vzc19zcGVlY2goCiAgICAgICAgc2VsZiwKICAgICAgICBzZWdtZW50OiBVbmlvbltucC5uZGFycmF5W0FueSwgbnAuZHR5cGVbbnAuZmxvYXQzMl1dLCBTZWdtZW50XSwKICAgICAgICB0Z3RfbGFuZzogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICApIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgUHJvY2VzcyBhIGZ1bGwgb3IgcGFydGlhbCBzcGVlY2ggY2h1bmsKICAgICAgICAiIiIKICAgICAgICBxdWV1ZSA9IHNlbGYuaW5wdXRfcXVldWUKICAgICAgICBpZiBzZWxmLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgIyBjdXJyZW50IHNvdXJjZSBpcyBmaW5pc2hlZCwgYnV0IG5leHQgc3BlZWNoIHN0YXJ0cyB0byBjb21lIGluIGFscmVhZHkKICAgICAgICAgICAgc2VsZi5kZWJ1Z19sb2coInVzZSBuZXh0X2lucHV0X3F1ZXVlIikKICAgICAgICAgICAgcXVldWUgPSBzZWxmLm5leHRfaW5wdXRfcXVldWUKCiAgICAgICAgaWYgc2VsZi5maXJzdF9pbnB1dF90cyBpcyBOb25lOgogICAgICAgICAgICBzZWxmLmZpcnN0X2lucHV0X3RzID0gdGltZS50aW1lKCkgKiAxMDAwCgogICAgICAgIHdoaWxlIGxlbihzZWdtZW50KSA+IDA6CiAgICAgICAgICAgICMgYWRkIGNodW5rcyB0byBzdGF0ZXMuYnVmZmVyCiAgICAgICAgICAgIGkgPSBzZWxmLmNodW5rX3NpemVfc2FtcGxlcyAtIGxlbihzZWxmLmlucHV0X2NodW5rKQogICAgICAgICAgICBzZWxmLmlucHV0X2NodW5rID0gbnAuY29uY2F0ZW5hdGUoKHNlbGYuaW5wdXRfY2h1bmssIHNlZ21lbnRbOmldKSkKICAgICAgICAgICAgc2VnbWVudCA9IHNlZ21lbnRbaTpdCiAgICAgICAgICAgIHNlbGYuaXNfZnJlc2hfc3RhdGUgPSBGYWxzZQogICAgICAgICAgICBpZiBsZW4oc2VsZi5pbnB1dF9jaHVuaykgPT0gc2VsZi5jaHVua19zaXplX3NhbXBsZXM6CiAgICAgICAgICAgICAgICBxdWV1ZS5wdXRfbm93YWl0KAogICAgICAgICAgICAgICAgICAgIFNwZWVjaFNlZ21lbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9c2VsZi5pbnB1dF9jaHVuaywgZmluaXNoZWQ9RmFsc2UsIHRndF9sYW5nPXRndF9sYW5nCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgc2VsZi5pbnB1dF9jaHVuayA9IG5wLmVtcHR5KDAsIGR0eXBlPW5wLmludDE2KQoKICAgIGRlZiBjaGVja19zaWxlbmNlX2FjYyhzZWxmLCB0Z3RfbGFuZzogT3B0aW9uYWxbc3RyXSA9IE5vbmUpIC0+IE5vbmU6CiAgICAgICAgc2lsZW5jZV9saW1pdF9tcyA9IHNlbGYuc2lsZW5jZV9saW1pdF9tcwogICAgICAgIGlmIHNlbGYuc3BlZWNoX2FjY19tcyA+PSBzZWxmLnNwZWVjaF9zb2Z0X2xpbWl0X21zOgogICAgICAgICAgICBzZWxmLmRlYnVnX2xvZygiaW5jcmVhc2Ugc3BlZWNoIHRocmVzaG9sZCIpCiAgICAgICAgICAgIHNpbGVuY2VfbGltaXRfbXMgPSBzZWxmLnNpbGVuY2VfbGltaXRfbXMgLy8gMgogICAgICAgIHNlbGYuZGVidWdfbG9nKGYic2lsZW5jZV9hY2NfbXM6IHtzZWxmLnNpbGVuY2VfYWNjX21zfSIpCiAgICAgICAgaWYgc2VsZi5zaWxlbmNlX2FjY19tcyA+PSBzaWxlbmNlX2xpbWl0X21zOgogICAgICAgICAgICBzZWxmLmRlYnVnX2xvZygiPT09IGVuZCBvZiBzZWdtZW50IikKICAgICAgICAgICAgIyBzb3VyY2UgdXR0ZXJhbmNlIGZpbmlzaGVkCiAgICAgICAgICAgIHNlbGYuc2lsZW5jZV9hY2NfbXMgPSAwCiAgICAgICAgICAgIHNlbGYuc3BlZWNoX2FjY19tcyA9IDAKICAgICAgICAgICAgaWYgc2VsZi5pbnB1dF9jaHVuay5zaXplID4gMDoKICAgICAgICAgICAgICAgICMgZmx1c2ggcGFydGlhbCBpbnB1dF9jaHVuawogICAgICAgICAgICAgICAgc2VsZi5pbnB1dF9xdWV1ZS5wdXRfbm93YWl0KAogICAgICAgICAgICAgICAgICAgIFNwZWVjaFNlZ21lbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9c2VsZi5pbnB1dF9jaHVuaywgdGd0X2xhbmc9dGd0X2xhbmcsIGZpbmlzaGVkPVRydWUKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBzZWxmLmlucHV0X2NodW5rID0gbnAuZW1wdHkoMCwgZHR5cGU9bnAuaW50MTYpCiAgICAgICAgICAgIHNlbGYuaW5wdXRfcXVldWUucHV0X25vd2FpdChFbXB0eVNlZ21lbnQoZmluaXNoZWQ9VHJ1ZSkpCiAgICAgICAgICAgIHNlbGYuc291cmNlX2ZpbmlzaGVkID0gVHJ1ZQogICAgICAgICAgICBzZWxmLmRlYnVnX3dyaXRlX3dhdihucC5lbXB0eSgwLCBkdHlwZT1ucC5pbnQxNiksIGZpbmlzaGVkPVRydWUpCgogICAgZGVmIGRlY2F5X3NpbGVuY2VfYWNjX21zKHNlbGYpIC0+IE5vbmU6CiAgICAgICAgaWYgc2VsZi5jb25zZWN1dGl2ZV9zaWxlbmNlX2RlY2F5X2NvdW50IDw9IDI6CiAgICAgICAgICAgIHNlbGYuc2lsZW5jZV9hY2NfbXMgPSBzZWxmLnNpbGVuY2VfYWNjX21zIC8vIDIKICAgICAgICAgICAgc2VsZi5jb25zZWN1dGl2ZV9zaWxlbmNlX2RlY2F5X2NvdW50ICs9IDEKCiAgICBkZWYgdXBkYXRlX3NvdXJjZSgKICAgICAgICBzZWxmLCBzZWdtZW50OiBVbmlvbltucC5uZGFycmF5W0FueSwgbnAuZHR5cGVbbnAuZmxvYXQzMl1dLCBTZWdtZW50XQogICAgKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIERlZmF1bHQgdmFsdWUgZm9yIHRoZSBzZWdtZW50IGluIHRoZSB1cGRhdGVfc291cmNlIG1ldGhvZCBpcyBhIHNlZ21lbnQKICAgICAgICBDbGFzcywgZm9yIHNvbWUgcmVhc29uIHRoaXMgaW50ZXJmYWNlIGRpZG4ndCBhbGlnbiB3aXRoIG90aGVyIGludGVyZmFjZXMKICAgICAgICBBZGRpbmcgdGhpcyBjaGFuZ2UgaGVyZSB0byBzdXBwb3J0IGJvdGggbnAubmRhcnJheSBhbmQgU2VnbWVudCBjbGFzcwogICAgICAgICIiIgogICAgICAgIHRndF9sYW5nID0gTm9uZQogICAgICAgIGlmIGlzaW5zdGFuY2Uoc2VnbWVudCwgU3BlZWNoU2VnbWVudCk6CiAgICAgICAgICAgIHNlbGYuc2FtcGxlX3JhdGUgPSBzZWdtZW50LnNhbXBsZV9yYXRlCiAgICAgICAgICAgIGlmIGhhc2F0dHIoc2VnbWVudCwgInRndF9sYW5nIikgYW5kIHNlZ21lbnQudGd0X2xhbmcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICB0Z3RfbGFuZyA9IHNlZ21lbnQudGd0X2xhbmcKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzZWdtZW50LmNvbnRlbnQsIG5wLm5kYXJyYXkpOgogICAgICAgICAgICAgICAgc2VnbWVudCA9IG5wLmFycmF5KHNlZ21lbnQuY29udGVudCwgZHR5cGU9bnAuZmxvYXQzMikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlZ21lbnQgPSBzZWdtZW50LmNvbnRlbnQKICAgICAgICBzcGVlY2hfcHJvYnMgPSBzZWxmLmdldF9zcGVlY2hfcHJvYl9mcm9tX25wX2Zsb2F0MzIoc2VnbWVudCkKICAgICAgICBjaHVua19zaXplX21zID0gbGVuKHNlZ21lbnQpICogMTAwMCAvIHNlbGYuc2FtcGxlX3JhdGUKICAgICAgICB3aW5kb3dfc2l6ZV9tcyA9IHNlbGYud2luZG93X3NpemVfc2FtcGxlcyAqIDEwMDAgLyBzZWxmLnNhbXBsZV9yYXRlCiAgICAgICAgY29uc2VjdXRpdmVfc2lsZW5jZV9kZWNheSA9IEZhbHNlCiAgICAgICAgaWYgc2VsZi5pc19mcmVzaF9zdGF0ZSBhbmQgc2VsZi5pbml0X3NwZWVjaF9wcm9iID4gMDoKICAgICAgICAgICAgdGhyZXNob2xkID0gU1BFRUNIX1BST0JfVEhSRVNIT0xEICsgc2VsZi5pbml0X3NwZWVjaF9wcm9iCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdGhyZXNob2xkID0gU1BFRUNIX1BST0JfVEhSRVNIT0xECiAgICAgICAgaWYgYWxsKGkgPD0gdGhyZXNob2xkIGZvciBpIGluIHNwZWVjaF9wcm9icyk6CiAgICAgICAgICAgIGlmIHNlbGYuc291cmNlX2ZpbmlzaGVkOgogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIHNlbGYuZGVidWdfbG9nKCJnb3Qgc2lsZW50IGNodW5rIikKICAgICAgICAgICAgaWYgbm90IHNlbGYuaXNfZnJlc2hfc3RhdGU6CiAgICAgICAgICAgICAgICBzZWxmLnNpbGVuY2VfYWNjX21zICs9IGNodW5rX3NpemVfbXMKICAgICAgICAgICAgICAgIHNlbGYuY2hlY2tfc2lsZW5jZV9hY2ModGd0X2xhbmcpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsaWYgc3BlZWNoX3Byb2JzWy0xXSA8PSB0aHJlc2hvbGQ6CiAgICAgICAgICAgIHNlbGYuZGVidWdfbG9nKCI9PT0gc3RhcnQgb2Ygc2lsZW5jZSBjaHVuayIpCiAgICAgICAgICAgICMgYmVnaW5uaW5nID0gc3BlZWNoLCBlbmQgPSBzaWxlbmNlCiAgICAgICAgICAgICMgcGFzcyB0byBwcm9jZXNzX3NwZWVjaCBhbmQgYWNjdW11bGF0ZSBzaWxlbmNlCiAgICAgICAgICAgIHNlbGYuc3BlZWNoX2FjY19tcyArPSBjaHVua19zaXplX21zCiAgICAgICAgICAgIGNvbnNlY3V0aXZlX3NpbGVuY2VfZGVjYXkgPSBUcnVlCiAgICAgICAgICAgIHNlbGYuZGVjYXlfc2lsZW5jZV9hY2NfbXMoKQogICAgICAgICAgICBzZWxmLnByb2Nlc3Nfc3BlZWNoKHNlZ21lbnQsIHRndF9sYW5nKQogICAgICAgICAgICAjIGFjY3VtdWxhdGUgY29udGlndW91cyBzaWxlbmNlCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihzcGVlY2hfcHJvYnMpIC0gMSwgLTEsIC0xKToKICAgICAgICAgICAgICAgIGlmIHNwZWVjaF9wcm9ic1tpXSA+IHRocmVzaG9sZDoKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgc2VsZi5zaWxlbmNlX2FjY19tcyArPSB3aW5kb3dfc2l6ZV9tcwogICAgICAgICAgICBzZWxmLmNoZWNrX3NpbGVuY2VfYWNjKHRndF9sYW5nKQogICAgICAgIGVsaWYgc3BlZWNoX3Byb2JzWzBdIDw9IHRocmVzaG9sZDoKICAgICAgICAgICAgc2VsZi5kZWJ1Z19sb2coIj09PSBzdGFydCBvZiBzcGVlY2ggY2h1bmsiKQogICAgICAgICAgICAjIGJlZ2lubmluZyA9IHNpbGVuY2UsIGVuZCA9IHNwZWVjaAogICAgICAgICAgICAjIGFjY3VtdWxhdGUgc2lsZW5jZSAsIHBhc3MgbmV4dCB0byBwcm9jZXNzX3NwZWVjaAogICAgICAgICAgICBmb3IgaSBpbiByYW5nZSgwLCBsZW4oc3BlZWNoX3Byb2JzKSk6CiAgICAgICAgICAgICAgICBpZiBzcGVlY2hfcHJvYnNbaV0gPiB0aHJlc2hvbGQ6CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIHNlbGYuc2lsZW5jZV9hY2NfbXMgKz0gd2luZG93X3NpemVfbXMKICAgICAgICAgICAgIyB0cnkgbm90IHRvIHNwbGl0IHJpZ2h0IGJlZm9yZSBzcGVlY2gKICAgICAgICAgICAgc2VsZi5zaWxlbmNlX2FjY19tcyA9IHNlbGYuc2lsZW5jZV9hY2NfbXMgLy8gMgogICAgICAgICAgICBzZWxmLmNoZWNrX3NpbGVuY2VfYWNjKHRndF9sYW5nKQogICAgICAgICAgICBzZWxmLnNwZWVjaF9hY2NfbXMgKz0gY2h1bmtfc2l6ZV9tcwogICAgICAgICAgICBzZWxmLnByb2Nlc3Nfc3BlZWNoKHNlZ21lbnQsIHRndF9sYW5nKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuc3BlZWNoX2FjY19tcyArPSBjaHVua19zaXplX21zCiAgICAgICAgICAgIHNlbGYuZGVidWdfbG9nKCI9PT09PT09PSBnb3Qgc3BlZWNoIGNodW5rIikKICAgICAgICAgICAgY29uc2VjdXRpdmVfc2lsZW5jZV9kZWNheSA9IFRydWUKICAgICAgICAgICAgc2VsZi5kZWNheV9zaWxlbmNlX2FjY19tcygpCiAgICAgICAgICAgIHNlbGYucHJvY2Vzc19zcGVlY2goc2VnbWVudCwgdGd0X2xhbmcpCiAgICAgICAgaWYgbm90IGNvbnNlY3V0aXZlX3NpbGVuY2VfZGVjYXk6CiAgICAgICAgICAgIHNlbGYuY29uc2VjdXRpdmVfc2lsZW5jZV9kZWNheV9jb3VudCA9IDAKCiAgICBkZWYgZGVidWdfd3JpdGVfd2F2KAogICAgICAgIHNlbGYsIGNodW5rOiBucC5uZGFycmF5W0FueSwgQW55XSwgZmluaXNoZWQ6IGJvb2wgPSBGYWxzZQogICAgKSAtPiBOb25lOgogICAgICAgIGlmIHNlbGYudGVzdF9pbnB1dF9zZWdtZW50c193YXYgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYudGVzdF9pbnB1dF9zZWdtZW50c193YXYuc2VlaygwLCBTRUVLX0VORCkKICAgICAgICAgICAgc2VsZi50ZXN0X2lucHV0X3NlZ21lbnRzX3dhdi53cml0ZShjaHVuaykKICAgICAgICAgICAgaWYgZmluaXNoZWQ6CiAgICAgICAgICAgICAgICBNT0RFTF9TQU1QTEVfUkFURSA9IDE2XzAwMAogICAgICAgICAgICAgICAgZGVidWdfdHMgPSBmInt0aW1lLnRpbWUoKX1fe3JhbmRvbS5yYW5kaW50KDEwMDAsIDk5OTkpfSIKICAgICAgICAgICAgICAgIHNlbGYudGVzdF9pbnB1dF9zZWdtZW50c193YXYgPSBzb3VuZGZpbGUuU291bmRGaWxlKAogICAgICAgICAgICAgICAgICAgIFBhdGgoc2VsZi50ZXN0X2lucHV0X3NlZ21lbnRzX3dhdi5uYW1lKS5wYXJlbnQKICAgICAgICAgICAgICAgICAgICAvIGYie2RlYnVnX3RzfV90ZXN0X2lucHV0X3NlZ21lbnRzLndhdiIsCiAgICAgICAgICAgICAgICAgICAgbW9kZT0idysiLAogICAgICAgICAgICAgICAgICAgIGZvcm1hdD0iV0FWIiwKICAgICAgICAgICAgICAgICAgICBzYW1wbGVyYXRlPU1PREVMX1NBTVBMRV9SQVRFLAogICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzPTEsCiAgICAgICAgICAgICAgICApCgoKY2xhc3MgU2lsZXJvVkFEQWdlbnQoU3BlZWNoVG9TcGVlY2hBZ2VudCk6ICAjIHR5cGU6IGlnbm9yZQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFyZ3M6IE5hbWVzcGFjZSkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGFyZ3MpCiAgICAgICAgc2VsZi5jaHVua19zaXplX3NhbXBsZXMgPSBhcmdzLmNodW5rX3NpemVfc2FtcGxlcwogICAgICAgIHNlbGYuYXJncyA9IGFyZ3MKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgYWRkX2FyZ3MocGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS13aW5kb3ctc2l6ZS1zYW1wbGVzIiwKICAgICAgICAgICAgZGVmYXVsdD01MTIsICAjIHNhbXBsaW5nX3JhdGUgLy8gMTAwMCAqIDMyID0+IDMyIG1zIGF0IDE2MDAwIHNhbXBsZSByYXRlCiAgICAgICAgICAgIHR5cGU9aW50LAogICAgICAgICAgICBoZWxwPSJXaW5kb3cgc2l6ZSBmb3IgcGFzc2luZyBzYW1wbGVzIHRvIFZBRCIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLWNodW5rLXNpemUtc2FtcGxlcyIsCiAgICAgICAgICAgIGRlZmF1bHQ9NTEyMCwgICMgc2FtcGxpbmdfcmF0ZSAvLyAxMDAwICogMzIwID0+IDMyMCBtcyBhdCAxNjAwMCBzYW1wbGUgcmF0ZQogICAgICAgICAgICB0eXBlPWludCwKICAgICAgICAgICAgaGVscD0iQ2h1bmsgc2l6ZSBmb3IgcGFzc2luZyBzYW1wbGVzIHRvIG1vZGVsIiwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tc2lsZW5jZS1saW1pdC1tcyIsCiAgICAgICAgICAgIGRlZmF1bHQ9NzAwLAogICAgICAgICAgICB0eXBlPWludCwKICAgICAgICAgICAgaGVscD0ic2VuZCBFT1MgdG8gdGhlIGlucHV0X3F1ZXVlIGFmdGVyIHRoaXMgYW1vdW50IG9mIHNpbGVuY2UiLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1zcGVlY2gtc29mdC1saW1pdC1tcyIsCiAgICAgICAgICAgIGRlZmF1bHQ9MTJfMDAwLCAgIyBhZnRlciAxNXMsIGluY3JlYXNlIHRoZSBzcGVlY2ggdGhyZXNob2xkCiAgICAgICAgICAgIHR5cGU9aW50LAogICAgICAgICAgICBoZWxwPSJhZnRlciB0aGlzIGFtb3VudCBvZiBzcGVlY2gsIGRlY3JlYXNlIHRoZSBzcGVlY2ggdGhyZXNob2xkIChzZWdtZW50IG1vcmUgYWdncmVzc2l2ZWx5KSIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLWluaXQtc3BlZWNoLXByb2IiLAogICAgICAgICAgICBkZWZhdWx0PTAuMTUsCiAgICAgICAgICAgIHR5cGU9ZmxvYXQsCiAgICAgICAgICAgIGhlbHA9IkluY3JlYXNlIHRoZSBpbml0aWFsIHNwZWVjaCBwcm9iYWJpbGl0eSB0aHJlc2hvbGQgYnkgdGhpcyBtdWNoIGF0IHRoZSBzdGFydCBvZiBzcGVlY2giLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1kZWJ1ZyIsCiAgICAgICAgICAgIGRlZmF1bHQ9RmFsc2UsCiAgICAgICAgICAgIHR5cGU9Ym9vbCwKICAgICAgICAgICAgaGVscD0iRW5hYmxlIGRlYnVnIGxvZ3MiLAogICAgICAgICkKCiAgICBkZWYgYnVpbGRfc3RhdGVzKHNlbGYpIC0+IFNpbGVyb1ZBRFN0YXRlczoKICAgICAgICByZXR1cm4gU2lsZXJvVkFEU3RhdGVzKHNlbGYuYXJncykKCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogU2lsZXJvVkFEU3RhdGVzKSAtPiBBY3Rpb246CiAgICAgICAgc3RhdGVzLmRlYnVnX2xvZygKICAgICAgICAgICAgZiJxdWV1ZSBzaXplOiB7c3RhdGVzLmlucHV0X3F1ZXVlLnFzaXplKCl9LCBpbnB1dF9jaHVuayBzaXplOiB7bGVuKHN0YXRlcy5pbnB1dF9jaHVuayl9IgogICAgICAgICkKICAgICAgICBjb250ZW50OiBucC5uZGFycmF5W0FueSwgQW55XSA9IG5wLmVtcHR5KDAsIGR0eXBlPW5wLmludDE2KQogICAgICAgIGlzX2ZpbmlzaGVkID0gc3RhdGVzLnNvdXJjZV9maW5pc2hlZAogICAgICAgIHRndF9sYW5nID0gTm9uZQogICAgICAgIHdoaWxlIG5vdCBzdGF0ZXMuaW5wdXRfcXVldWUuZW1wdHkoKToKICAgICAgICAgICAgY2h1bmsgPSBzdGF0ZXMuaW5wdXRfcXVldWUuZ2V0X25vd2FpdCgpCiAgICAgICAgICAgIHN0YXRlcy5pbnB1dF9xdWV1ZS50YXNrX2RvbmUoKQogICAgICAgICAgICBpZiB0Z3RfbGFuZyBpcyBOb25lOgogICAgICAgICAgICAgICAgdGd0X2xhbmcgPSBjaHVuay50Z3RfbGFuZwogICAgICAgICAgICBjb250ZW50ID0gbnAuY29uY2F0ZW5hdGUoKGNvbnRlbnQsIGNodW5rLmNvbnRlbnQpKQoKICAgICAgICBzdGF0ZXMuZGVidWdfd3JpdGVfd2F2KGNvbnRlbnQpCgogICAgICAgIGlmIGxlbihjb250ZW50KSA9PSAwOiAgIyBlbXB0eSBxdWV1ZQogICAgICAgICAgICBpZiBub3Qgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgTk9URTogdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB0aGlzIGxvZ2ljIGlzIGEgc2FmZWd1YXJkCiAgICAgICAgICAgICAgICBzZWdtZW50ID0gRW1wdHlTZWdtZW50KGZpbmlzaGVkPVRydWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VnbWVudCA9IFNwZWVjaFNlZ21lbnQoCiAgICAgICAgICAgICAgICBjb250ZW50PWNvbnRlbnQudG9saXN0KCksCiAgICAgICAgICAgICAgICBmaW5pc2hlZD1pc19maW5pc2hlZCwKICAgICAgICAgICAgICAgIHRndF9sYW5nPXRndF9sYW5nLAogICAgICAgICAgICApCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbihzZWdtZW50LCBmaW5pc2hlZD1pc19maW5pc2hlZCkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX2FyZ3MoY2xzLCBhcmdzOiBOYW1lc3BhY2UsICoqa3dhcmdzOiBOb25lKSAtPiBTaWxlcm9WQURBZ2VudDoKICAgICAgICByZXR1cm4gY2xzKGFyZ3MpCg=='),
    ('seamless/src/seamless_communication/streaming/agents/seamless_s2st.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5kZXRva2VuaXplciBpbXBvcnQgVW5pdFlEZXRva2VuaXplckFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9mZmxpbmVfdzJ2X2JlcnRfZW5jb2RlciBpbXBvcnQgKAogICAgT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV9mZWF0dXJlX2V4dHJhY3RvciBpbXBvcnQgKAogICAgT25saW5lRmVhdHVyZUV4dHJhY3RvckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV90ZXh0X2RlY29kZXIgaW1wb3J0ICgKICAgIFVuaXRZTU1BVGV4dERlY29kZXJBZ2VudCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5vbmxpbmVfdW5pdF9kZWNvZGVyIGltcG9ydCAoCiAgICBOQVJVbml0WVVuaXREZWNvZGVyQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMucHJldHNzZWxfdm9jb2RlciBpbXBvcnQgKAogICAgUHJldHNzZWxWb2NvZGVyQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMuZHVhbF92b2NvZGVyX2FnZW50IGltcG9ydCAoCiAgICBEdWFsVm9jb2RlckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnNpbGVyb192YWQgaW1wb3J0IFNpbGVyb1ZBREFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnVuaXR5X3BpcGVsaW5lIGltcG9ydCAoCiAgICBVbml0WUFnZW50UGlwZWxpbmUsCiAgICBVbml0WUFnZW50VHJlZVBpcGVsaW5lLAopCgoKY2xhc3MgU2VhbWxlc3NTMlNUQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50LAogICAgICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudCwKICAgICAgICBQcmV0c3NlbFZvY29kZXJBZ2VudCwKICAgIF0KCgpjbGFzcyBTZWFtbGVzc1MyU1RKb2ludFZBREFnZW50KFVuaXRZQWdlbnRUcmVlUGlwZWxpbmUpOgogICAgcGlwZWxpbmUgPSB7CiAgICAgICAgU2lsZXJvVkFEQWdlbnQ6IFtPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnRdLAogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudDogW09mZmxpbmVXYXYyVmVjQmVydEVuY29kZXJBZ2VudF0sCiAgICAgICAgT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50OiBbVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50XSwKICAgICAgICBVbml0WU1NQVRleHREZWNvZGVyQWdlbnQ6IFtVbml0WURldG9rZW5pemVyQWdlbnQsIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudF0sCiAgICAgICAgVW5pdFlEZXRva2VuaXplckFnZW50OiBbXSwKICAgICAgICBOQVJVbml0WVVuaXREZWNvZGVyQWdlbnQ6IFtQcmV0c3NlbFZvY29kZXJBZ2VudF0sCiAgICAgICAgUHJldHNzZWxWb2NvZGVyQWdlbnQ6IFtdLAogICAgfQoKCmNsYXNzIFNlYW1sZXNzUzJTVER1YWxWb2NvZGVyVkFEQWdlbnQoVW5pdFlBZ2VudFRyZWVQaXBlbGluZSk6CiAgICBwaXBlbGluZSA9IHsKICAgICAgICBTaWxlcm9WQURBZ2VudDogW09ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudF0sCiAgICAgICAgT25saW5lRmVhdHVyZUV4dHJhY3RvckFnZW50OiBbT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50XSwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQ6IFtVbml0WU1NQVRleHREZWNvZGVyQWdlbnRdLAogICAgICAgIFVuaXRZTU1BVGV4dERlY29kZXJBZ2VudDogW1VuaXRZRGV0b2tlbml6ZXJBZ2VudCwgTkFSVW5pdFlVbml0RGVjb2RlckFnZW50XSwKICAgICAgICBVbml0WURldG9rZW5pemVyQWdlbnQ6IFtdLAogICAgICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudDogW0R1YWxWb2NvZGVyQWdlbnRdLAogICAgICAgIER1YWxWb2NvZGVyQWdlbnQ6IFtdLAogICAgfQo='),
    ('seamless/src/seamless_communication/streaming/agents/dual_vocoder_agent.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKaW1wb3J0IGNvcHkKCmltcG9ydCBsb2dnaW5nCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueQoKZnJvbSBzaW11bGV2YWwuYWdlbnRzIGltcG9ydCBUZXh0VG9TcGVlY2hBZ2VudApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5jb21tb24gaW1wb3J0IEFnZW50U3RhdGVzCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNlZ21lbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IEFjdGlvbgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMucHJldHNzZWxfdm9jb2RlciBpbXBvcnQgKAogICAgUHJldHNzZWxWb2NvZGVyQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMub25saW5lX3ZvY29kZXIgaW1wb3J0IFZvY29kZXJBZ2VudAoKbG9nZ2luZy5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dpbmcuSU5GTywKICAgIGZvcm1hdD0iJShhc2N0aW1lKXMgJShsZXZlbG5hbWUpcyAtLSAlKG5hbWUpczogJShtZXNzYWdlKXMiLAopCgpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpjbGFzcyBEdWFsVm9jb2RlclN0YXRlcyhBZ2VudFN0YXRlcyk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwgdm9jb2Rlcl9zdGF0ZXM6IEFnZW50U3RhdGVzLCBleHByX3ZvY29kZXJfc3RhdGVzOiBBZ2VudFN0YXRlcwogICAgKSAtPiBOb25lOgogICAgICAgIHNlbGYudm9jb2Rlcl9zdGF0ZXMgPSB2b2NvZGVyX3N0YXRlcwogICAgICAgIHNlbGYuZXhwcl92b2NvZGVyX3N0YXRlcyA9IGV4cHJfdm9jb2Rlcl9zdGF0ZXMKICAgICAgICBzZWxmLmNvbmZpZzogRGljdFtzdHIsIEFueV0gPSB7fQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIHRhcmdldF9maW5pc2hlZChzZWxmKTogICMgdHlwZTogaWdub3JlCiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgc2VsZi52b2NvZGVyX3N0YXRlcy50YXJnZXRfZmluaXNoZWQKICAgICAgICAgICAgb3Igc2VsZi5leHByX3ZvY29kZXJfc3RhdGVzLnRhcmdldF9maW5pc2hlZAogICAgICAgICkKCiAgICBkZWYgcmVzZXQoc2VsZikgLT4gTm9uZToKICAgICAgICBzZWxmLnZvY29kZXJfc3RhdGVzLnJlc2V0KCkKICAgICAgICBzZWxmLmV4cHJfdm9jb2Rlcl9zdGF0ZXMucmVzZXQoKQogICAgICAgIHNlbGYuY29uZmlnID0ge30KCiAgICBkZWYgdXBkYXRlX3NvdXJjZShzZWxmLCBzZWdtZW50OiBTZWdtZW50KSAtPiBOb25lOgogICAgICAgIHNlbGYudm9jb2Rlcl9zdGF0ZXMudXBkYXRlX2NvbmZpZyhzZWdtZW50LmNvbmZpZykKICAgICAgICBzZWxmLnZvY29kZXJfc3RhdGVzLnVwZGF0ZV9zb3VyY2Uoc2VnbWVudCkKICAgICAgICBzZWxmLmV4cHJfdm9jb2Rlcl9zdGF0ZXMudXBkYXRlX2NvbmZpZyhzZWdtZW50LmNvbmZpZykKICAgICAgICBzZWxmLmV4cHJfdm9jb2Rlcl9zdGF0ZXMudXBkYXRlX3NvdXJjZShzZWdtZW50KQoKICAgIGRlZiB1cGRhdGVfdGFyZ2V0KHNlbGYsIHNlZ21lbnQ6IFNlZ21lbnQpIC0+IE5vbmU6CiAgICAgICAgc2VsZi52b2NvZGVyX3N0YXRlcy51cGRhdGVfdGFyZ2V0KHNlZ21lbnQpCiAgICAgICAgc2VsZi5leHByX3ZvY29kZXJfc3RhdGVzLnVwZGF0ZV90YXJnZXQoc2VnbWVudCkKCgpjbGFzcyBEdWFsVm9jb2RlckFnZW50KFRleHRUb1NwZWVjaEFnZW50KTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBhcmdzOiBOYW1lc3BhY2UsCiAgICAgICAgdm9jb2RlcjogVm9jb2RlckFnZW50LAogICAgICAgIGV4cHJfdm9jb2RlcjogUHJldHNzZWxWb2NvZGVyQWdlbnQsCiAgICApIC0+IE5vbmU6CiAgICAgICAgc2VsZi52b2NvZGVyID0gdm9jb2RlcgogICAgICAgIHNlbGYuZXhwcl92b2NvZGVyID0gZXhwcl92b2NvZGVyCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhhcmdzKQogICAgICAgIHNlbGYuZXhwcmVzc2l2ZSA9IGFyZ3MuZXhwcmVzc2l2ZQoKICAgIGRlZiBidWlsZF9zdGF0ZXMoc2VsZikgLT4gRHVhbFZvY29kZXJTdGF0ZXM6CiAgICAgICAgcmV0dXJuIER1YWxWb2NvZGVyU3RhdGVzKAogICAgICAgICAgICBzZWxmLnZvY29kZXIuYnVpbGRfc3RhdGVzKCksIHNlbGYuZXhwcl92b2NvZGVyLmJ1aWxkX3N0YXRlcygpCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGFkZF9hcmdzKGNscywgcGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBQcmV0c3NlbFZvY29kZXJBZ2VudC5hZGRfYXJncyhwYXJzZXIpCiAgICAgICAgVm9jb2RlckFnZW50LmFkZF9hcmdzKHBhcnNlcikKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1leHByLXZvY29kZXItbmFtZSIsCiAgICAgICAgICAgIHR5cGU9c3RyLAogICAgICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgICAgICAgICBoZWxwPSJleHByZXNzaXZlIHZvY29kZXIgbmFtZSAtIHZvY29kZXJfcHJldHNzZWwgb3Igdm9jb2Rlcl9wcmV0c3NlbF8xNmtoeiIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLWV4cHJlc3NpdmUiLAogICAgICAgICAgICBhY3Rpb249InN0b3JlX3RydWUiLAogICAgICAgICAgICBoZWxwPSJXaGV0aGVyIHRvIHVzZSBleHByZXNzaXZlIHZvY29kZXIgKG92ZXJyaWRhYmxlIGluIHNlZ21lbnQuY29uZmlnKSIsCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21fYXJncyhjbHMsIGFyZ3M6IE5hbWVzcGFjZSwgKiprd2FyZ3M6IERpY3Rbc3RyLCBBbnldKSAtPiBEdWFsVm9jb2RlckFnZW50OgogICAgICAgIHZvY29kZXIgPSBWb2NvZGVyQWdlbnQuZnJvbV9hcmdzKGFyZ3MpCiAgICAgICAgZXhwcl9hcmdzID0gY29weS5kZWVwY29weShhcmdzKQogICAgICAgIGV4cHJfYXJncy52b2NvZGVyX25hbWUgPSBhcmdzLmV4cHJfdm9jb2Rlcl9uYW1lCiAgICAgICAgZXhwcl92b2NvZGVyID0gUHJldHNzZWxWb2NvZGVyQWdlbnQuZnJvbV9hcmdzKGV4cHJfYXJncykKICAgICAgICByZXR1cm4gY2xzKGFyZ3MsIHZvY29kZXIsIGV4cHJfdm9jb2RlcikKCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogQWdlbnRTdGF0ZXMpIC0+IEFjdGlvbjoKICAgICAgICBleHByZXNzaXZlID0gc2VsZi5leHByZXNzaXZlCiAgICAgICAgaWYgc3RhdGVzLmNvbmZpZyBpcyBub3QgTm9uZSBhbmQgImV4cHJlc3NpdmUiIGluIHN0YXRlcy5jb25maWc6CiAgICAgICAgICAgIGV4cHJlc3NpdmUgPSBzdGF0ZXMuY29uZmlnWyJleHByZXNzaXZlIl0KICAgICAgICBpZiBleHByZXNzaXZlOgogICAgICAgICAgICBzdGF0ZXMuZXhwcl92b2NvZGVyX3N0YXRlcy51cHN0cmVhbV9zdGF0ZXMgPSBzdGF0ZXMudXBzdHJlYW1fc3RhdGVzCiAgICAgICAgICAgIGFjdGlvbiA9IHNlbGYuZXhwcl92b2NvZGVyLnBvbGljeShzdGF0ZXMuZXhwcl92b2NvZGVyX3N0YXRlcykKICAgICAgICAgICAgaWYgbGVuKHN0YXRlcy5leHByX3ZvY29kZXJfc3RhdGVzLnNvdXJjZSkgPT0gMDoKICAgICAgICAgICAgICAgIHN0YXRlcy52b2NvZGVyX3N0YXRlcy5zb3VyY2UgPSBbXQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGFjdGlvbiA9IHNlbGYudm9jb2Rlci5wb2xpY3koc3RhdGVzLnZvY29kZXJfc3RhdGVzKQogICAgICAgICAgICBpZiBsZW4oc3RhdGVzLnZvY29kZXJfc3RhdGVzLnNvdXJjZSkgPT0gMDoKICAgICAgICAgICAgICAgIHN0YXRlcy5leHByX3ZvY29kZXJfc3RhdGVzLnNvdXJjZSA9IFtdCiAgICAgICAgcmV0dXJuIGFjdGlvbgo='),
    ('seamless/src/seamless_communication/streaming/agents/seamless_streaming_s2st.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmRldG9rZW5pemVyIGltcG9ydCBVbml0WURldG9rZW5pemVyQWdlbnQKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMub2ZmbGluZV93MnZfYmVydF9lbmNvZGVyIGltcG9ydCAoCiAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMub25saW5lX2ZlYXR1cmVfZXh0cmFjdG9yIGltcG9ydCAoCiAgICBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMub25saW5lX3RleHRfZGVjb2RlciBpbXBvcnQgKAogICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV91bml0X2RlY29kZXIgaW1wb3J0ICgKICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5vbmxpbmVfdm9jb2RlciBpbXBvcnQgVm9jb2RlckFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnNpbGVyb192YWQgaW1wb3J0IFNpbGVyb1ZBREFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnVuaXR5X3BpcGVsaW5lIGltcG9ydCAoCiAgICBVbml0WUFnZW50UGlwZWxpbmUsCiAgICBVbml0WUFnZW50VHJlZVBpcGVsaW5lLAopCgoKY2xhc3MgU2VhbWxlc3NTdHJlYW1pbmdTMlNUQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50LAogICAgICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudCwKICAgICAgICBWb2NvZGVyQWdlbnQsCiAgICBdCgoKY2xhc3MgU2VhbWxlc3NTdHJlYW1pbmdTMlNUVkFEQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIFNpbGVyb1ZBREFnZW50LAogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50LAogICAgICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudCwKICAgICAgICBWb2NvZGVyQWdlbnQsCiAgICBdCgoKY2xhc3MgU2VhbWxlc3NTdHJlYW1pbmdTMlNUSm9pbnRWQURBZ2VudChVbml0WUFnZW50VHJlZVBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gewogICAgICAgIFNpbGVyb1ZBREFnZW50OiBbT25saW5lRmVhdHVyZUV4dHJhY3RvckFnZW50XSwKICAgICAgICBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQ6IFtPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnRdLAogICAgICAgIE9mZmxpbmVXYXYyVmVjQmVydEVuY29kZXJBZ2VudDogW1VuaXRZTU1BVGV4dERlY29kZXJBZ2VudF0sCiAgICAgICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50OiBbVW5pdFlEZXRva2VuaXplckFnZW50LCBOQVJVbml0WVVuaXREZWNvZGVyQWdlbnRdLAogICAgICAgIFVuaXRZRGV0b2tlbml6ZXJBZ2VudDogW10sCiAgICAgICAgTkFSVW5pdFlVbml0RGVjb2RlckFnZW50OiBbVm9jb2RlckFnZW50XSwKICAgICAgICBWb2NvZGVyQWdlbnQ6IFtdLAogICAgfQo='),
    ('seamless/src/seamless_communication/streaming/agents/online_vocoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBsb2dnaW5nCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdAoKaW1wb3J0IHRvcmNoCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci5sb2FkZXIgaW1wb3J0IGxvYWRfdm9jb2Rlcl9tb2RlbApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5jb21tb24gaW1wb3J0IEFnZW50U3RhdGVzCmZyb20gc2ltdWxldmFsLmFnZW50cyBpbXBvcnQgVGV4dFRvU3BlZWNoQWdlbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IFJlYWRBY3Rpb24sIFdyaXRlQWN0aW9uCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNwZWVjaFNlZ21lbnQKCmxvZ2dpbmcuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICBmb3JtYXQ9IiUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgLS0gJShuYW1lKXM6ICUobWVzc2FnZSlzIiwKKQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKY2xhc3MgVm9jb2RlckFnZW50KFRleHRUb1NwZWVjaEFnZW50KTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgX19pbml0X18oc2VsZiwgYXJnczogTmFtZXNwYWNlKSAtPiBOb25lOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oYXJncykKCiAgICAgICAgbG9nZ2VyLmluZm8oCiAgICAgICAgICAgIGYiTG9hZGluZyB0aGUgVm9jb2RlciBtb2RlbDoge2FyZ3Mudm9jb2Rlcl9uYW1lfSBvbiBkZXZpY2U9e2FyZ3MuZGV2aWNlfSwgZHR5cGU9e2FyZ3MuZHR5cGV9IgogICAgICAgICkKICAgICAgICBzZWxmLnZvY29kZXIgPSBsb2FkX3ZvY29kZXJfbW9kZWwoCiAgICAgICAgICAgIGFyZ3Mudm9jb2Rlcl9uYW1lLCBkZXZpY2U9YXJncy5kZXZpY2UsIGR0eXBlPWFyZ3MuZHR5cGUKICAgICAgICApCiAgICAgICAgc2VsZi52b2NvZGVyLmV2YWwoKQoKICAgICAgICBzZWxmLnNhbXBsZV9yYXRlID0gYXJncy5zYW1wbGVfcmF0ZQogICAgICAgIHNlbGYudGd0X2xhbmcgPSBhcmdzLnRndF9sYW5nCiAgICAgICAgc2VsZi5zcGVha2VyX2lkID0gYXJncy52b2NvZGVyX3NwZWFrZXJfaWQKCiAgICBAdG9yY2guaW5mZXJlbmNlX21vZGUoKQogICAgZGVmIHBvbGljeShzZWxmLCBzdGF0ZXM6IEFnZW50U3RhdGVzKSAtPiBXcml0ZUFjdGlvbjoKICAgICAgICAiIiIKICAgICAgICBUaGUgcG9saWN5IGlzIGFsd2F5cyB3cml0ZSBpZiB0aGVyZSBhcmUgdW5pdHMKICAgICAgICAiIiIKICAgICAgICB1bml0cyA9IHN0YXRlcy5zb3VyY2UKCiAgICAgICAgaWYgbGVuKHVuaXRzKSA9PSAwIG9yIGxlbih1bml0c1swXSkgPT0gMDoKICAgICAgICAgICAgaWYgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbihbXSwgZmluaXNoZWQ9VHJ1ZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKCiAgICAgICAgdGd0X2xhbmcgPSBzdGF0ZXMudGd0X2xhbmcgaWYgc3RhdGVzLnRndF9sYW5nIGVsc2Ugc2VsZi50Z3RfbGFuZwogICAgICAgIHUgPSB1bml0c1swXVswXQoKICAgICAgICB3YXYgPSBzZWxmLnZvY29kZXIodSwgdGd0X2xhbmcsIHNlbGYuc3BlYWtlcl9pZCwgZHVyX3ByZWRpY3Rpb249RmFsc2UpCiAgICAgICAgc3RhdGVzLnNvdXJjZSA9IFtdCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigKICAgICAgICAgICAgU3BlZWNoU2VnbWVudCgKICAgICAgICAgICAgICAgIGNvbnRlbnQ9d2F2WzBdWzBdLnRvbGlzdCgpLAogICAgICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICAgICAgICAgIHNhbXBsZV9yYXRlPXNlbGYuc2FtcGxlX3JhdGUsCiAgICAgICAgICAgICAgICB0Z3RfbGFuZz10Z3RfbGFuZywKICAgICAgICAgICAgKSwKICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgYWRkX2FyZ3MoY2xzLCBwYXJzZXI6IEFyZ3VtZW50UGFyc2VyKSAtPiBOb25lOgogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXZvY29kZXItbmFtZSIsCiAgICAgICAgICAgIHR5cGU9c3RyLAogICAgICAgICAgICBoZWxwPSJWb2NvZGVyIG5hbWUuIiwKICAgICAgICAgICAgZGVmYXVsdD0idm9jb2Rlcl92MiIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXZvY29kZXItc3BlYWtlci1pZCIsCiAgICAgICAgICAgIHR5cGU9aW50LAogICAgICAgICAgICByZXF1aXJlZD1GYWxzZSwKICAgICAgICAgICAgZGVmYXVsdD0tMSwKICAgICAgICAgICAgaGVscD0iVm9jb2RlciBzcGVha2VyIGlkIiwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9hcmdzKGNscywgYXJnczogTmFtZXNwYWNlLCAqKmt3YXJnczogRGljdFtzdHIsIEFueV0pIC0+IFZvY29kZXJBZ2VudDoKICAgICAgICByZXR1cm4gY2xzKGFyZ3MpCg=='),
    ('seamless/src/seamless_communication/streaming/agents/offline_w2v_bert_encoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIsIE5hbWVzcGFjZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0CgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5kYXRhIGltcG9ydCBTZXF1ZW5jZURhdGEKZnJvbSBmYWlyc2VxMi5kYXRhLmRhdGFfcGlwZWxpbmUgaW1wb3J0IENvbGxhdGVyCmZyb20gZmFpcnNlcTIuZGF0YS50ZXh0IGltcG9ydCBUZXh0VG9rZW5pemVyCmZyb20gZmFpcnNlcTIubW9kZWxzLndhdjJ2ZWMyIGltcG9ydCBXYXYyVmVjMkVuY29kZXJDb25maWcKZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBnZXRfc2Vxc19hbmRfcGFkZGluZ19tYXNrCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubW9kZWwgaW1wb3J0IFVuaXRZTW9kZWwKZnJvbSBzaW11bGV2YWwuYWdlbnRzIGltcG9ydCBTcGVlY2hUb1NwZWVjaEFnZW50CmZyb20gc2ltdWxldmFsLmFnZW50cy5hY3Rpb25zIGltcG9ydCBBY3Rpb24sIFJlYWRBY3Rpb24sIFdyaXRlQWN0aW9uCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNwZWVjaFNlZ21lbnQKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMuY29tbW9uIGltcG9ydCAoCiAgICBBZ2VudFN0YXRlcywKICAgIE5vVXBkYXRlVGFyZ2V0TWl4aW4sCikKCgpjbGFzcyBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQoTm9VcGRhdGVUYXJnZXRNaXhpbiwgU3BlZWNoVG9TcGVlY2hBZ2VudCk6ICAjIHR5cGU6IGlnbm9yZQogICAgIiIiCiAgICBJbmNyZW1lbnRhbCBlbmNvZGluZyBvZiBhbiB3YXYydmVjIGVuY29kZXIgb3V0cHV0CiAgICBJdCB1cGRhdGUgdGhlIHdob2xlIGVuY29kZXIgc3RhdGVzIGV2ZXJ5IHRpbWUgd2hlbiB0aGVyZSBpcyBhIG5ldyBpbmNvbWluZyBzZWdtZW50LgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgdW5pdHlfbW9kZWw6IFVuaXRZTW9kZWwsCiAgICAgICAgdzJ2Ml9lbmNvZGVyX2NvbmZpZzogV2F2MlZlYzJFbmNvZGVyQ29uZmlnLAogICAgICAgIHRleHRfdG9rZW5pemVyOiBUZXh0VG9rZW5pemVyLAogICAgICAgIGFyZ3M6IE5hbWVzcGFjZSwKICAgICkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGFyZ3MpCiAgICAgICAgc2VsZi5tb2RlbCA9IHVuaXR5X21vZGVsCiAgICAgICAgc2VsZi53MnYyX2VuY29kZXJfY29uZmlnID0gdzJ2Ml9lbmNvZGVyX2NvbmZpZwogICAgICAgIHNlbGYuY29sbGF0ZSA9IENvbGxhdGVyKAogICAgICAgICAgICBwYWRfdmFsdWU9dGV4dF90b2tlbml6ZXIudm9jYWJfaW5mby5wYWRfaWR4LCBwYWRfdG9fbXVsdGlwbGU9MgogICAgICAgICkKICAgICAgICBzZWxmLmRldmljZSA9IGFyZ3MuZGV2aWNlCiAgICAgICAgc2VsZi5kdHlwZSA9IGFyZ3MuZHR5cGUKICAgICAgICBzZWxmLm1pbl9zdGFydGluZ193YWl0ID0gYXJncy5taW5fc3RhcnRpbmdfd2FpdF93MnZiZXJ0CgogICAgQHByb3BlcnR5CiAgICBkZWYgbWluX2lucHV0X2xlbmd0aChzZWxmKSAtPiBpbnQ6CiAgICAgICAgcmV0dXJuIHNlbGYudzJ2Ml9lbmNvZGVyX2NvbmZpZy5mYmFua19zdHJpZGUKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgYWRkX2FyZ3MocGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1taW4tc3RhcnRpbmctd2FpdC13MnZiZXJ0IiwKICAgICAgICAgICAgZGVmYXVsdD1Ob25lLAogICAgICAgICAgICB0eXBlPWludCwKICAgICAgICAgICAgaGVscD0iTWluIHN0YXJ0aW5nIHdhaXQgaW4gdzJ2YmVydCIsCiAgICAgICAgKQoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogQWdlbnRTdGF0ZXMpIC0+IEFjdGlvbjoKICAgICAgICAiIiIKICAgICAgICBUaGUgcG9saWN5IGZvciBlbmNvZGVyIGlzIGFsd2F5cyB3cml0ZQogICAgICAgIG9ubHkgaWYgdGhlIGlucHV0IGlzIHRvbyBzaG9ydAogICAgICAgICIiIgogICAgICAgIGlmICgKICAgICAgICAgICAgc2VsZi5taW5fc3RhcnRpbmdfd2FpdCBpcyBub3QgTm9uZQogICAgICAgICAgICBhbmQgbGVuKHN0YXRlcy5zb3VyY2UpIDwgc2VsZi5taW5fc3RhcnRpbmdfd2FpdAogICAgICAgICAgICBhbmQgbm90IHN0YXRlcy5zb3VyY2VfZmluaXNoZWQKICAgICAgICApOgogICAgICAgICAgICByZXR1cm4gUmVhZEFjdGlvbigpCgogICAgICAgIGlmIGxlbihzdGF0ZXMuc291cmNlKSA8IHNlbGYubWluX2lucHV0X2xlbmd0aDoKICAgICAgICAgICAgaWYgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbih7fSwgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKCiAgICAgICAgaW5wdXRzID0gdG9yY2guc3RhY2soc3RhdGVzLnNvdXJjZSkudG8oZGV2aWNlPXNlbGYuZGV2aWNlLCBkdHlwZT1zZWxmLmR0eXBlKQogICAgICAgIHNyYzogU2VxdWVuY2VEYXRhID0gc2VsZi5jb2xsYXRlKGlucHV0cykKCiAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrID0gZ2V0X3NlcXNfYW5kX3BhZGRpbmdfbWFzayhzcmMpCiAgICAgICAgZW5jb2Rlcl9vdXRwdXQsIF8gPSBzZWxmLm1vZGVsLmVuY29kZV9zcGVlY2goCiAgICAgICAgICAgIHNlcXMsCiAgICAgICAgICAgIHBhZGRpbmdfbWFzaywKICAgICAgICApCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigKICAgICAgICAgICAgU3BlZWNoU2VnbWVudCgKICAgICAgICAgICAgICAgIGNvbnRlbnQ9ZW5jb2Rlcl9vdXRwdXQsCiAgICAgICAgICAgICAgICB0Z3RfbGFuZz1zdGF0ZXMudGd0X2xhbmcsCiAgICAgICAgICAgICAgICBmaW5pc2hlZD1zdGF0ZXMuc291cmNlX2ZpbmlzaGVkLAogICAgICAgICAgICApLAogICAgICAgICAgICBmaW5pc2hlZD1zdGF0ZXMuc291cmNlX2ZpbmlzaGVkLAogICAgICAgICkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX2FyZ3MoCiAgICAgICAgY2xzLCBhcmdzOiBOYW1lc3BhY2UsICoqa3dhcmdzOiBEaWN0W3N0ciwgQW55XQogICAgKSAtPiBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQ6CiAgICAgICAgdW5pdHlfbW9kZWwgPSBrd2FyZ3MuZ2V0KCJ1bml0eV9tb2RlbCIsIE5vbmUpCiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2UodW5pdHlfbW9kZWwsIFVuaXRZTW9kZWwpCiAgICAgICAgdW5pdHlfY29uZmlnID0ga3dhcmdzLmdldCgidW5pdHlfY29uZmlnIiwgTm9uZSkKICAgICAgICBhc3NlcnQgdW5pdHlfY29uZmlnIGlzIG5vdCBOb25lCiAgICAgICAgdGV4dF90b2tlbml6ZXIgPSBrd2FyZ3MuZ2V0KCJ0ZXh0X3Rva2VuaXplciIsIE5vbmUpCiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2UodGV4dF90b2tlbml6ZXIsIFRleHRUb2tlbml6ZXIpCiAgICAgICAgcmV0dXJuIGNscyh1bml0eV9tb2RlbCwgdW5pdHlfY29uZmlnLncydjJfZW5jb2Rlcl9jb25maWcsIHRleHRfdG9rZW5pemVyLCBhcmdzKQo='),
    ('seamless/src/seamless_communication/streaming/agents/common.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCiIiIgpNaXhpbnMgKyBjb21tb24gZm9yIGZhaXJzZXEyIHNpbXVsZXZhbCBhZ2VudHMKIiIiCgpmcm9tIHNpbXVsZXZhbC5kYXRhLnNlZ21lbnRzIGltcG9ydCBTZWdtZW50CmZyb20gc2ltdWxldmFsLmFnZW50cy5zdGF0ZXMgaW1wb3J0IEFnZW50U3RhdGVzIGFzIEFnZW50U3RhdGVzT3JpZwoKCmNsYXNzIEVhcmx5U3RvcHBpbmdNaXhpbjoKICAgIGRlZiByZXNldF9lYXJseShzZWxmKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIEltcGxlbWVudCB0byBvdmVycmlkZSBmb3IgZGlmZmVyZW50IGJlaGF2aW9yIG9uIGEgcmVzZXQgdGhhdAogICAgICAgIGhhcHBlbnMgYmVmb3JlIEVPUwogICAgICAgICIiIgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoKQoKCmNsYXNzIEFnZW50U3RhdGVzKEFnZW50U3RhdGVzT3JpZyk6ICAjIHR5cGU6IGlnbm9yZQogICAgZGVmIHVwZGF0ZV90YXJnZXQoc2VsZiwgc2VnbWVudDogU2VnbWVudCkgLT4gTm9uZToKICAgICAgICAiIiJBbiBBZ2VudFN0YXRlcyBpbXBsIHdoaWNoIGRvZXNuJ3QgdXBkYXRlIHN0YXRlcy50YXJnZXQiIiIKICAgICAgICBzZWxmLnRhcmdldF9maW5pc2hlZCA9IHNlZ21lbnQuZmluaXNoZWQKCgpjbGFzcyBOb1VwZGF0ZVRhcmdldE1peGluOgogICAgIiIiQSBzaG9ydGN1dCB0byBtYWtlIGFnZW50cyBkZWZhdWx0IHRvIHRoZSBBZ2VudFN0YXRlcyBpbXBsIGFib3ZlIiIiCgogICAgZGVmIGJ1aWxkX3N0YXRlcyhzZWxmKSAtPiBBZ2VudFN0YXRlczoKICAgICAgICByZXR1cm4gQWdlbnRTdGF0ZXMoKQo='),
    ('seamless/src/seamless_communication/streaming/agents/unity_pipeline.py', ''),
    ('seamless/src/seamless_communication/streaming/agents/online_unit_decoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIsIE5hbWVzcGFjZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBMaXN0LCBPcHRpb25hbAoKaW1wb3J0IHRvcmNoCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubW9kZWwgaW1wb3J0IFVuaXRZTW9kZWwsIFVuaXRZTkFSVDJVTW9kZWwKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS51bml0X3Rva2VuaXplciBpbXBvcnQgVW5pdFRva2VuaXplcgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5vbmxpbmVfdGV4dF9kZWNvZGVyIGltcG9ydCAoCiAgICBVbml0WVRleHREZWNvZGVyT3V0cHV0LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmNvbW1vbiBpbXBvcnQgQWdlbnRTdGF0ZXMKZnJvbSBzaW11bGV2YWwuYWdlbnRzIGltcG9ydCBHZW5lcmljQWdlbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IEFjdGlvbiwgUmVhZEFjdGlvbiwgV3JpdGVBY3Rpb24KZnJvbSBzaW11bGV2YWwuZGF0YS5zZWdtZW50cyBpbXBvcnQgU2VnbWVudCwgVGV4dFNlZ21lbnQKCgpjbGFzcyBOQVJVbml0RGVjb2RlckFnZW50U3RhdGVzKEFnZW50U3RhdGVzKTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgcmVzZXQoc2VsZikgLT4gTm9uZToKICAgICAgICBzZWxmLnNvdXJjZV90b2tlbl9saXN0OiBMaXN0W3N0cl0gPSBbXQogICAgICAgIHNlbGYuc291cmNlX2luZGljZXM6IE9wdGlvbmFsW3RvcmNoLlRlbnNvcl0gPSBOb25lCiAgICAgICAgc2VsZi5kdXJhdGlvbl9zdGFydF9pbmRleDogaW50ID0gMAogICAgICAgIHNlbGYudGd0X2xhbmcgPSBOb25lCiAgICAgICAgc3VwZXIoKS5yZXNldCgpCgogICAgZGVmIHVwZGF0ZV9zb3VyY2Uoc2VsZiwgc2VnbWVudDogU2VnbWVudCkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBVcGRhdGUgc3RhdGVzIGZyb20gaW5wdXQgc2VnbWVudAogICAgICAgIEFkZGl0aW9ubGx5IHVwZGF0ZSBpbmNyZW1lbnRhbCBzdGF0ZXMKCiAgICAgICAgQXJnczoKICAgICAgICAgICAgc2VnbWVudCAofnNpbXVsZXZhbC5hZ2VudHMuc2VnbWVudHMuU2VnbWVudCk6IGlucHV0IHNlZ21lbnQKICAgICAgICAiIiIKICAgICAgICBzZWxmLnNvdXJjZV9maW5pc2hlZCA9IHNlZ21lbnQuZmluaXNoZWQKICAgICAgICBpZiBzZWxmLnRndF9sYW5nIGlzIE5vbmUgYW5kIHNlZ21lbnQudGd0X2xhbmcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYudGd0X2xhbmcgPSBzZWdtZW50LnRndF9sYW5nCiAgICAgICAgaWYgc2VnbWVudC5pc19lbXB0eToKICAgICAgICAgICAgaWYgc2VnbWVudC5maW5pc2hlZDoKICAgICAgICAgICAgICAgIHNlbGYudGFyZ2V0X2ZpbmlzaGVkID0gVHJ1ZQogICAgICAgICAgICByZXR1cm4KICAgICAgICBzZWdtZW50X2NvbnRlbnQ6IFVuaXRZVGV4dERlY29kZXJPdXRwdXQgPSBzZWdtZW50LmNvbnRlbnQKICAgICAgICBjb250ZW50ID0gc2VnbWVudF9jb250ZW50LmRlY29kZXJfZmVhdHVyZXMKICAgICAgICB0b2tlbiA9IHNlZ21lbnRfY29udGVudC50b2tlbnMKICAgICAgICBzZWxmLnNvdXJjZV9pbmRpY2VzID0gc2VnbWVudF9jb250ZW50LnRhcmdldF9pbmRpY2VzCiAgICAgICAgc2VsZi5zb3VyY2VfdG9rZW5fbGlzdCArPSB0b2tlbgogICAgICAgIHNlbGYuc291cmNlID0gY29udGVudAoKCmNsYXNzIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudChHZW5lcmljQWdlbnQpOiAgIyB0eXBlOiBpZ25vcmUKICAgICIiIk5vbi1hdXRvcmVncmVzc2l2ZSB1bml0IGRlY29kZXIiIiIKCiAgICBzb3VyY2VfdHlwZSA9ICJ0ZXh0IgogICAgdGFyZ2V0X3R5cGUgPSAidGV4dCIKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwgbW9kZWw6IFVuaXRZTkFSVDJVTW9kZWwsIHRva2VuaXplcjogVW5pdFRva2VuaXplciwgYXJnczogTmFtZXNwYWNlCiAgICApIC0+IE5vbmU6CiAgICAgICAgc2VsZi5tb2RlbCA9IG1vZGVsCiAgICAgICAgc2VsZi50b2tlbml6ZXIgPSB0b2tlbml6ZXIKICAgICAgICBzZWxmLm1pbl91bml0X2NodW5rX3NpemUgPSBhcmdzLm1pbl91bml0X2NodW5rX3NpemUKICAgICAgICBzZWxmLmRfZmFjdG9yID0gYXJncy5kX2ZhY3RvcgogICAgICAgIHNlbGYuZGV2aWNlID0gYXJncy5kZXZpY2UKICAgICAgICBzZWxmLmR0eXBlID0gYXJncy5kdHlwZQogICAgICAgIHNlbGYudG9rZW5fZGVjb2RlciA9IHNlbGYudG9rZW5pemVyLmNyZWF0ZV9kZWNvZGVyKCkKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGFyZ3MpCgogICAgZGVmIGJ1aWxkX3N0YXRlcyhzZWxmKSAtPiBOQVJVbml0RGVjb2RlckFnZW50U3RhdGVzOgogICAgICAgIHJldHVybiBOQVJVbml0RGVjb2RlckFnZW50U3RhdGVzKCkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBtYXhfbGVuKHNlbGYpIC0+IGludDoKICAgICAgICByZXR1cm4gMjAwCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGFkZF9hcmdzKHBhcnNlcjogQXJndW1lbnRQYXJzZXIpIC0+IE5vbmU6CiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tbWluLXVuaXQtY2h1bmstc2l6ZSIsCiAgICAgICAgICAgIHR5cGU9aW50LAogICAgICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgICAgICAgICBoZWxwPSJNaW5pbWFsIHVuaXRzIHRvIHByb2R1Y2UgZXZlcnkgY2h1bmsiLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1kLWZhY3RvciIsCiAgICAgICAgICAgIHR5cGU9ZmxvYXQsCiAgICAgICAgICAgIGRlZmF1bHQ9MS4wLAogICAgICAgICAgICBoZWxwPSJzY2FsaW5nIGZhY3RvciBmb3IgZHVyYXRpb24gcHJlZGljdGlvbiIsCiAgICAgICAgKQoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogTkFSVW5pdERlY29kZXJBZ2VudFN0YXRlcykgLT4gQWN0aW9uOgogICAgICAgIGlmIHN0YXRlcy50YXJnZXRfZmluaXNoZWQ6CiAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigiIiwgZmluaXNoZWQ9VHJ1ZSkKCiAgICAgICAgaWYgbGVuKHN0YXRlcy5zb3VyY2VfdG9rZW5fbGlzdCkgPCAyOgogICAgICAgICAgICBpZiBub3Qgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigiIiwgZmluaXNoZWQ9VHJ1ZSkKCiAgICAgICAgbW9kZWxfb3V0cHV0LCBfLCBkdXJhdGlvbnMgPSBzZWxmLm1vZGVsKAogICAgICAgICAgICB0ZXh0X2RlY29kZXJfb3V0cHV0PXN0YXRlcy5zb3VyY2UsCiAgICAgICAgICAgIHRleHRfZGVjb2Rlcl9wYWRkaW5nX21hc2s9Tm9uZSwKICAgICAgICAgICAgdGV4dF9zZXFzPXN0YXRlcy5zb3VyY2VfaW5kaWNlcywKICAgICAgICAgICAgZHVyYXRpb25fZmFjdG9yPXNlbGYuZF9mYWN0b3IsCiAgICAgICAgKQogICAgICAgIGR1cmF0aW9ucyA9IGR1cmF0aW9uc1swXQoKICAgICAgICBpZiBzdGF0ZXMuc291cmNlX2ZpbmlzaGVkIGFuZCBzdGF0ZXMuZHVyYXRpb25fc3RhcnRfaW5kZXggPiAwOgogICAgICAgICAgICAjIFdlIGhhdmUgdG8gY29uc2lkZXIgb25lIG1vcmUgd29yZCBmb3IgRU9TLCBiZWNhdXNlIHdlIGFwcGVuZCBhbiBFT1MgYXQgdGhlIGVuZC4KICAgICAgICAgICAgaWYgc3VtKGR1cmF0aW9uc1tzdGF0ZXMuZHVyYXRpb25fc3RhcnRfaW5kZXggOl0pID09IDA6CiAgICAgICAgICAgICAgICAjIElmIHlvdSByZWFjaCBoZXJlLCBpdCBtZWFucyB0aGF0IHRoZSBsYXN0IHNvdXJjZSB0b2tlbiBpcyBhIHNpbGVuY2UgdG9rZW4gKGUuZy4gcHVuY3R1YXRpb25zKQogICAgICAgICAgICAgICAgIyBJbiB0aGF0IGNhc2Ugbm8gbmVlZCB0byBjb25zaWRlciBvbmUgbW9yZSB0b2tlbi4KICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigiIiwgZmluaXNoZWQ9VHJ1ZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN0YXRlcy5kdXJhdGlvbl9zdGFydF9pbmRleCA9IG1heChzdGF0ZXMuZHVyYXRpb25fc3RhcnRfaW5kZXggLSAxLCAwKQoKICAgICAgICBjdXJyZW50X2R1cmF0aW9uID0gc3VtKGR1cmF0aW9uc1tzdGF0ZXMuZHVyYXRpb25fc3RhcnRfaW5kZXggOl0pCgogICAgICAgIGlmIGN1cnJlbnRfZHVyYXRpb24gPCBzZWxmLm1pbl91bml0X2NodW5rX3NpemU6CiAgICAgICAgICAgIGlmIG5vdCBzdGF0ZXMuc291cmNlX2ZpbmlzaGVkOgogICAgICAgICAgICAgICAgIyBpZiBjdXJyZW50IHVudHJhbnNsYXRlZCBzb3VyY2UgcmVzdWx0IGxlc3MgdGhhbiBzZWxmLm1pbl91bml0X2NodW5rX3NpemUgdW5pdHMKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIGN1cnJlbnRfZHVyYXRpb24gPT0gMDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gV3JpdGVBY3Rpb24oIiIsIGZpbmlzaGVkPVRydWUpCgogICAgICAgIHVuaXRfc2VxcyA9IG1vZGVsX291dHB1dC5sb2dpdHNbMF0uYXJnbWF4KGRpbT0tMSkKICAgICAgICBpbmRleF9zdGFydF9vZmZzZXQgPSBzdW0oZHVyYXRpb25zWzogc3RhdGVzLmR1cmF0aW9uX3N0YXJ0X2luZGV4XSkKICAgICAgICB1bml0X3NlcXMgPSB1bml0X3NlcXNbaW5kZXhfc3RhcnRfb2Zmc2V0Ol0udW5zcXVlZXplKDApCiAgICAgICAgdW5pdHMgPSBzZWxmLnRva2VuX2RlY29kZXIodW5pdF9zZXFzKQoKICAgICAgICAjIG1pbnVzIG9uZSBiZWNhdXNlIHdlIGFkZCBhIGVuZGluZ190b2tlbiBvbiBlYWNoIHMydCBvdXRwdXQgcGhyYXNlCiAgICAgICAgc3RhdGVzLmR1cmF0aW9uX3N0YXJ0X2luZGV4ID0gbGVuKGR1cmF0aW9ucykgLSAxCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigKICAgICAgICAgICAgVGV4dFNlZ21lbnQoCiAgICAgICAgICAgICAgICBjb250ZW50PXVuaXRzLAogICAgICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICAgICAgICAgIHRndF9sYW5nPXN0YXRlcy50Z3RfbGFuZywKICAgICAgICAgICAgKSwKICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9hcmdzKGNscywgYXJnczogTmFtZXNwYWNlLCAqKmt3YXJnczogQW55KSAtPiBOQVJVbml0WVVuaXREZWNvZGVyQWdlbnQ6CiAgICAgICAgdW5pdHlfbW9kZWw6IFVuaXRZTW9kZWwgPSBrd2FyZ3MuZ2V0KCJ1bml0eV9tb2RlbCIsIE5vbmUpCiAgICAgICAgdW5pdF90b2tlbml6ZXI6IFVuaXRUb2tlbml6ZXIgPSBrd2FyZ3MuZ2V0KCJ1bml0X3Rva2VuaXplciIsIE5vbmUpCiAgICAgICAgYXNzZXJ0IHVuaXR5X21vZGVsLnQydV9tb2RlbCBpcyBub3QgTm9uZSBhbmQgaXNpbnN0YW5jZSgKICAgICAgICAgICAgdW5pdHlfbW9kZWwudDJ1X21vZGVsLCBVbml0WU5BUlQyVU1vZGVsCiAgICAgICAgKQogICAgICAgIHJldHVybiBjbHMobW9kZWw9dW5pdHlfbW9kZWwudDJ1X21vZGVsLCB0b2tlbml6ZXI9dW5pdF90b2tlbml6ZXIsIGFyZ3M9YXJncykK'),
    ('seamless/src/seamless_communication/streaming/agents/online_text_decoder.py', ''),
    ('seamless/src/seamless_communication/toxicity/etox_bad_word_checker.py', ''),
    ('seamless/src/seamless_communication/toxicity/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi50b3hpY2l0eS5ldG94X2JhZF93b3JkX2NoZWNrZXIgaW1wb3J0ICgKICAgIEVUT1hCYWRXb3JkQ2hlY2tlciBhcyBFVE9YQmFkV29yZENoZWNrZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnRveGljaXR5LmV0b3hfYmFkX3dvcmRfY2hlY2tlciBpbXBvcnQgKAogICAgbG9hZF9ldG94X2JhZF93b3JkX2NoZWNrZXIgYXMgbG9hZF9ldG94X2JhZF93b3JkX2NoZWNrZXIsCikK'),
    ('seamless/src/seamless_communication/toxicity/mintox.py', ''),
    ('seamless/src/seamless_communication/toxicity/mutox/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgoKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzIGltcG9ydCBDb25maWdMb2FkZXIsIE1vZGVsTG9hZGVyCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi50b3hpY2l0eS5tdXRveC5idWlsZGVyIGltcG9ydCBjcmVhdGVfbXV0b3hfbW9kZWwKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnRveGljaXR5Lm11dG94LmNsYXNzaWZpZXIgaW1wb3J0ICgKICAgIE11dG94Q2xhc3NpZmllciwKICAgIE11dG94Q29uZmlnLAogICAgbXV0b3hfYXJjaHMsCikKCmltcG9ydCB0eXBpbmcgYXMgdHAKCgpAbXV0b3hfYXJjaHMuZGVjb3JhdG9yKCJtdXRveCIpCmRlZiBfYmFzZV9tdXRveCgpIC0+IE11dG94Q29uZmlnOgogICAgcmV0dXJuIE11dG94Q29uZmlnKAogICAgICAgIGlucHV0X3NpemU9MTAyNCwKICAgICkKCgpkZWYgY29udmVydF9tdXRveF9jaGVja3BvaW50KAogICAgY2hlY2twb2ludDogdHAuTWFwcGluZ1tzdHIsIHRwLkFueV0sIGNvbmZpZzogTXV0b3hDb25maWcKKSAtPiB0cC5NYXBwaW5nW3N0ciwgdHAuQW55XToKICAgIG5ld19kaWN0ID0ge30KICAgIGZvciBrZXkgaW4gY2hlY2twb2ludDoKICAgICAgICBpZiBrZXkuc3RhcnRzd2l0aCgibW9kZWxfYWxsLiIpOgogICAgICAgICAgICBuZXdfZGljdFtrZXldID0gY2hlY2twb2ludFtrZXldCiAgICByZXR1cm4geyJtb2RlbCI6IG5ld19kaWN0fQoKCmxvYWRfbXV0b3hfY29uZmlnID0gQ29uZmlnTG9hZGVyW011dG94Q29uZmlnXShhc3NldF9zdG9yZSwgbXV0b3hfYXJjaHMpCgoKbG9hZF9tdXRveF9tb2RlbCA9IE1vZGVsTG9hZGVyW011dG94Q2xhc3NpZmllciwgTXV0b3hDb25maWddKAogICAgYXNzZXRfc3RvcmUsCiAgICBkb3dubG9hZF9tYW5hZ2VyLAogICAgbG9hZF9tdXRveF9jb25maWcsCiAgICBjcmVhdGVfbXV0b3hfbW9kZWwsCiAgICBjb252ZXJ0X211dG94X2NoZWNrcG9pbnQsCikK'),
    ('seamless/src/seamless_communication/toxicity/mutox/builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgppbXBvcnQgdHlwaW5nIGFzIHRwCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi50b3hpY2l0eS5tdXRveC5jbGFzc2lmaWVyIGltcG9ydCAoCiAgICBNdXRveENsYXNzaWZpZXIsCiAgICBNdXRveENvbmZpZywKKQppbXBvcnQgdG9yY2gKZnJvbSB0b3JjaCBpbXBvcnQgbm4KZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERhdGFUeXBlLCBEZXZpY2UKCgpjbGFzcyBNdXRveENsYXNzaWZpZXJCdWlsZGVyOgogICAgIiIiCiAgICBCdWlsZGVyIG1vZHVsZSBmb3IgTXV0b3hDbGFzc2lmaWVyIG1vZGVsCiAgICAiIiIKCiAgICBjb25maWc6IE11dG94Q29uZmlnCiAgICBkZXZpY2U6IHRwLk9wdGlvbmFsW0RldmljZV0KICAgIGR0eXBlOiB0cC5PcHRpb25hbFtEYXRhVHlwZV0KCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBjb25maWc6IE11dG94Q29uZmlnLAogICAgICAgICosCiAgICAgICAgZGV2aWNlOiB0cC5PcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogdHAuT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gY29uZmlnOgogICAgICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICAgICAgOnBhcmFtIGRldmljZToKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBpbml0aWFsaXplIG1vZHVsZXMuCiAgICAgICAgOnBhcmFtIGR0eXBlOgogICAgICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29uZmlnID0gY29uZmlnCiAgICAgICAgc2VsZi5kZXZpY2UsIHNlbGYuZHR5cGUgPSBkZXZpY2UsIGR0eXBlCgogICAgZGVmIGJ1aWxkX21vZGVsKHNlbGYpIC0+IE11dG94Q2xhc3NpZmllcjoKICAgICAgICBtb2RlbF9oMSA9IG5uLlNlcXVlbnRpYWwoCiAgICAgICAgICAgIG5uLkRyb3BvdXQoMC4wMSksCiAgICAgICAgICAgIG5uLkxpbmVhcihzZWxmLmNvbmZpZy5pbnB1dF9zaXplLCA1MTIpLAogICAgICAgICkKCiAgICAgICAgbW9kZWxfaDIgPSBubi5TZXF1ZW50aWFsKAogICAgICAgICAgICBubi5SZUxVKCksCiAgICAgICAgICAgIG5uLkxpbmVhcig1MTIsIDEyOCksCiAgICAgICAgKQoKICAgICAgICBtb2RlbF9oMyA9IG5uLlNlcXVlbnRpYWwoCiAgICAgICAgICAgIG5uLlJlTFUoKSwKICAgICAgICAgICAgbm4uTGluZWFyKDEyOCwgMSksCiAgICAgICAgKQoKICAgICAgICBtb2RlbF9hbGwgPSBubi5TZXF1ZW50aWFsKAogICAgICAgICAgICBtb2RlbF9oMSwKICAgICAgICAgICAgbW9kZWxfaDIsCiAgICAgICAgICAgIG1vZGVsX2gzLAogICAgICAgICkKCiAgICAgICAgcmV0dXJuIE11dG94Q2xhc3NpZmllcihtb2RlbF9hbGwsKS50bygKICAgICAgICAgICAgZGV2aWNlPXNlbGYuZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1zZWxmLmR0eXBlLAogICAgICAgICkKCgpkZWYgY3JlYXRlX211dG94X21vZGVsKAogICAgY29uZmlnOiBNdXRveENvbmZpZywKICAgIGRldmljZTogdHAuT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICBkdHlwZTogdHAuT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKKSAtPiBNdXRveENsYXNzaWZpZXI6CiAgICAiIiJDcmVhdGUgYSBNdXRveCBDbGFzc2lmaWVyIG1vZGVsLgoKICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCgogICAgcmV0dXJuIE11dG94Q2xhc3NpZmllckJ1aWxkZXIoCiAgICAgICAgY29uZmlnLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApLmJ1aWxkX21vZGVsKCkK'),
    ('seamless/src/seamless_communication/toxicity/mutox/speech_pipeline.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgppbXBvcnQgdG9yY2gKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnRveGljaXR5Lm11dG94LmNsYXNzaWZpZXIgaW1wb3J0IE11dG94Q2xhc3NpZmllcgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24udG94aWNpdHkubXV0b3gubG9hZGVyIGltcG9ydCBsb2FkX211dG94X21vZGVsCmZyb20gc29uYXIubW9kZWxzLnNvbmFyX3NwZWVjaC5sb2FkZXIgaW1wb3J0IGxvYWRfc29uYXJfc3BlZWNoX21vZGVsCgpmcm9tIHNvbmFyLmluZmVyZW5jZV9waXBlbGluZXMuc3BlZWNoIGltcG9ydCAoCiAgICBTcGVlY2hUb0VtYmVkZGluZ1BpcGVsaW5lLAogICAgU3BlZWNoSW5mZXJlbmNlUGFyYW1zLAopCgpmcm9tIGZhaXJzZXEyLmRhdGEgaW1wb3J0ICgKICAgIERhdGFQaXBlbGluZUJ1aWxkZXIsCikKCmZyb20gdHlwaW5nIGltcG9ydCBVbmlvbgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnRveGljaXR5Lm11dG94LmNsYXNzaWZpZXIgaW1wb3J0IE11dG94Q2xhc3NpZmllcgpmcm9tIHNvbmFyLm1vZGVscy5lbmNvZGVyX21vZGVsIGltcG9ydCBTb25hckVuY29kZXJNb2RlbApmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGV2aWNlCgoKQ1BVX0RFVklDRSA9IHRvcmNoLmRldmljZSgiY3B1IikKCgpjbGFzcyBNdXRveFNwZWVjaENsYXNzaWZpZXJQaXBlbGluZShTcGVlY2hUb0VtYmVkZGluZ1BpcGVsaW5lKToKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIG11dG94X2NsYXNzaWZpZXI6IFVuaW9uW3N0ciwgTXV0b3hDbGFzc2lmaWVyXSwKICAgICAgICBlbmNvZGVyOiBVbmlvbltzdHIsIFNvbmFyRW5jb2Rlck1vZGVsXSwKICAgICAgICBkZXZpY2U6IERldmljZSA9IENQVV9ERVZJQ0UsCiAgICApIC0+IE5vbmU6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhlbmNvZGVyKQogICAgICAgIHNlbGYubW9kZWwudG8oZGV2aWNlKS5ldmFsKCkKICAgICAgICBzZWxmLm11dG94X2NsYXNzaWZpZXIgPSBtdXRveF9jbGFzc2lmaWVyLnRvKGRldmljZSkuZXZhbCgpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgbG9hZF9tb2RlbF9mcm9tX25hbWUoCiAgICAgICAgY2xzLAogICAgICAgIG11dG94X2NsYXNzaWZpZXJfbmFtZTogc3RyLAogICAgICAgIGVuY29kZXJfbmFtZTogc3RyLAogICAgICAgIGRldmljZTogRGV2aWNlID0gQ1BVX0RFVklDRSwKICAgICkgLT4gIlNwZWVjaFRvRW1iZWRkaW5nUGlwZWxpbmUiOgogICAgICAgIGVuY29kZXIgPSBsb2FkX3NvbmFyX3NwZWVjaF9tb2RlbChlbmNvZGVyX25hbWUsIGRldmljZT1kZXZpY2UsIHByb2dyZXNzPUZhbHNlKQogICAgICAgIG11dG94X2NsYXNzaWZpZXIgPSBsb2FkX211dG94X21vZGVsKAogICAgICAgICAgICBtdXRveF9jbGFzc2lmaWVyX25hbWUsIGRldmljZT1kZXZpY2UsIHByb2dyZXNzPUZhbHNlCiAgICAgICAgKQogICAgICAgIHJldHVybiBjbHMobXV0b3hfY2xhc3NpZmllcj1tdXRveF9jbGFzc2lmaWVyLCBlbmNvZGVyPWVuY29kZXIsIGRldmljZT1kZXZpY2UpCgogICAgZGVmIHByZWJ1aWxkX3BpcGVsaW5lKHNlbGYsIGNvbnRleHQ6IFNwZWVjaEluZmVyZW5jZVBhcmFtcykgLT4gRGF0YVBpcGVsaW5lQnVpbGRlcjoKICAgICAgICBwaXBlbGluZV9idWlsZGVyID0gc3VwZXIoKS5wcmVidWlsZF9waXBlbGluZShjb250ZXh0KQogICAgICAgIHJldHVybiBwaXBlbGluZV9idWlsZGVyLm1hcChzZWxmLl9ydW5fY2xhc3NpZmllciwgc2VsZWN0b3I9ImF1ZGlvLmRhdGEiKQoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgX3J1bl9jbGFzc2lmaWVyKHNlbGYsIGRhdGE6IGRpY3QpOgogICAgICAgIHJldHVybiBzZWxmLm11dG94X2NsYXNzaWZpZXIoZGF0YS5zZW50ZW5jZV9lbWJlZGRpbmdzKQo='),
    ('seamless/src/seamless_communication/toxicity/mutox/classifier.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKaW1wb3J0IHRvcmNoCmZyb20gdG9yY2ggaW1wb3J0IG5uCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCgpmcm9tIGZhaXJzZXEyLm1vZGVscy51dGlscy5hcmNoX3JlZ2lzdHJ5IGltcG9ydCBBcmNoaXRlY3R1cmVSZWdpc3RyeQpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwKCgpjbGFzcyBNdXRveENsYXNzaWZpZXIobm4uTW9kdWxlKToKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIG1vZGVsX2FsbCwKICAgICk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5tb2RlbF9hbGwgPSBtb2RlbF9hbGwKCiAgICBkZWYgZm9yd2FyZChzZWxmLCBpbnB1dHM6IHRvcmNoLlRlbnNvcikgLT4gdG9yY2guVGVuc29yOgogICAgICAgIHJldHVybiBzZWxmLm1vZGVsX2FsbChpbnB1dHMpCgoKQGRhdGFjbGFzcwpjbGFzcyBNdXRveENvbmZpZzoKICAgICIiIkhvbGRzIHRoZSBjb25maWd1cmF0aW9uIG9mIGEgTXV0b3ggQ2xhc3NpZmllciBtb2RlbC4iIiIKCiAgICAjIHNpemUgb2YgdGhlIGlucHV0IGVtYmVkZGluZyBzdXBwb3J0ZWQgYnkgdGhpcyBtb2RlbAogICAgaW5wdXRfc2l6ZTogaW50CgoKbXV0b3hfYXJjaHMgPSBBcmNoaXRlY3R1cmVSZWdpc3RyeVtNdXRveENvbmZpZ10oIm11dG94X2NsYXNzaWZpZXIiKQo='),
    ('seamless/src/seamless_communication/segment/__init__.py', ''),
    ('seamless/src/seamless_communication/segment/silero_vad.py', ''),
    ('seamless/src/seamless_communication/models/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/src/seamless_communication/models/tokenizer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBTZXF1ZW5jZSwgU2V0LCBmaW5hbAoKZnJvbSBmYWlyc2VxMi5kYXRhLnRleHQgaW1wb3J0ICgKICAgIFNlbnRlbmNlUGllY2VEZWNvZGVyLAogICAgU2VudGVuY2VQaWVjZUVuY29kZXIsCiAgICBTZW50ZW5jZVBpZWNlTW9kZWwsCiAgICBUZXh0VG9rZW5EZWNvZGVyLAogICAgVGV4dFRva2VuRW5jb2RlciwKICAgIFRleHRUb2tlbml6ZXIsCiAgICB2b2NhYl9pbmZvX2Zyb21fc2VudGVuY2VwaWVjZSwKKQpmcm9tIGZhaXJzZXEyLmRhdGEudHlwaW5nIGltcG9ydCBQYXRoTGlrZQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGV2aWNlLCBmaW5hbG92ZXJyaWRlCgoKQGZpbmFsCmNsYXNzIFNQTVRva2VuaXplcihUZXh0VG9rZW5pemVyKToKICAgICIiIlJlcHJlc2VudHMgc3RhbmRhcmQgU1BNLWJhc2VkIHRva2VuaXplciB1c2VkIGluIE1UIHRhc2tzIiIiCgogICAgbW9kZWw6IFNlbnRlbmNlUGllY2VNb2RlbAogICAgbGFuZ3M6IFNldFtzdHJdCiAgICBwcmVwZW5kX3RhcmdldF9sYW5ndG9rX3RvX3RhcmdldDogYm9vbAoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIHBhdGhuYW1lOiBQYXRoTGlrZSwKICAgICAgICBsYW5nczogU2VxdWVuY2Vbc3RyXSwKICAgICAgICBwcmVwZW5kX3RhcmdldF9sYW5ndG9rX3RvX3RhcmdldDogYm9vbCA9IFRydWUsCiAgICApIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgOnBhcmFtIHBhdGhuYW1lOgogICAgICAgICAgICBUaGUgcGF0aG5hbWUgb2YgdGhlIFNlbnRlbmNlUGllY2UgbW9kZWwgZmlsZS4KICAgICAgICA6cGFyYW0gbGFuZ3M6CiAgICAgICAgICAgIFRoZSBsaXN0IG9mIHN1cHBvcnRlZCBsYW5ndWFnZXMuCiAgICAgICAgOnBhcmFtIGRlZmF1bHRfbGFuZzoKICAgICAgICAgICAgVGhlIGZhbGwtYmFjayBsYW5ndWFnZSBpZiBubyBsYW5ndWFnZSBpcyBzcGVjaWZpZWQuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5sYW5ncyA9IHNldChsYW5ncykKICAgICAgICBzZWxmLnByZXBlbmRfdGFyZ2V0X2xhbmd0b2tfdG9fdGFyZ2V0ID0gcHJlcGVuZF90YXJnZXRfbGFuZ3Rva190b190YXJnZXQKCiAgICAgICAgIyBFYWNoIGxhbmd1YWdlIGlzIHJlcHJlc2VudGVkIGJ5IGEgYF9fbGFuZ19fYCBjb250cm9sIHN5bWJvbC4KICAgICAgICBjb250cm9sX3N5bWJvbHMgPSBbc2VsZi5fbGFuZ190b2tfdG9faW50ZXJuYWwobGFuZykgZm9yIGxhbmcgaW4gc29ydGVkKGxhbmdzKV0KICAgICAgICBzZWxmLm1vZGVsID0gU2VudGVuY2VQaWVjZU1vZGVsKHBhdGhuYW1lLCBjb250cm9sX3N5bWJvbHMpCiAgICAgICAgdm9jYWJfaW5mbyA9IHZvY2FiX2luZm9fZnJvbV9zZW50ZW5jZXBpZWNlKHNlbGYubW9kZWwpCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyh2b2NhYl9pbmZvKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9sYW5nX3Rva190b19pbnRlcm5hbChjbHMsIGxhbmc6IHN0cikgLT4gc3RyOgogICAgICAgIHJldHVybiBmIl9fe2xhbmd9X18iCgogICAgQGZpbmFsb3ZlcnJpZGUKICAgIGRlZiBjcmVhdGVfZW5jb2RlcigKICAgICAgICBzZWxmLAogICAgICAgICosCiAgICAgICAgdGFzazogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgbGFuZzogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgbW9kZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBwaW5fbWVtb3J5OiBib29sID0gRmFsc2UsCiAgICApIC0+IFRleHRUb2tlbkVuY29kZXI6CiAgICAgICAgIiIiQ3JlYXRlIGEgdG9rZW4gZW5jb2Rlci4KCiAgICAgICAgOnBhcmFtIHRhc2s6CiAgICAgICAgICAgIE11c3QgYmUgJ3RyYW5zbGF0aW9uJy4gSWYgYGBOb25lYGAsIGRlZmF1bHRzIHRvICd0cmFuc2xhdGlvbicuCiAgICAgICAgOnBhcmFtIGxhbmc6CiAgICAgICAgICAgIEEgbGFuZ3VhZ2UgZnJvbSA6YXR0cjpgbGFuZ3NgLiBJZiBgYE5vbmVgYCwgZGVmYXVsdHMgdG8KICAgICAgICAgICAgOmF0dHI6YGRlZmF1bHRfbGFuZ2AuCiAgICAgICAgOnBhcmFtIG1vZGU6CiAgICAgICAgICAgIE11c3QgYmUgJ3NvdXJjZScgb3IgJ3RhcmdldCcuCiAgICAgICAgOnBhcmFtIGRldmljZToKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBjb25zdHJ1Y3QgdGVuc29ycy4KICAgICAgICA6cGFyYW0gcGluX21lbW9yeToKICAgICAgICAgICAgSWYgYGBUcnVlYGAsIHVzZXMgcGlubmVkIG1lbW9yeSB3aGlsZSBjb25zdHJ1Y3RpbmcgdGVuc29ycy4KICAgICAgICAiIiIKICAgICAgICBpZiB0YXNrIGlzIG5vdCBOb25lIGFuZCB0YXNrICE9ICJ0cmFuc2xhdGlvbiI6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZiJgdGFza2AgbXVzdCBiZSAndHJhbnNsYXRpb24nLCBidXQgaXMgJ3t0YXNrfScgaW5zdGVhZC4iKQoKICAgICAgICBhc3NlcnQgbGFuZyBpcyBub3QgTm9uZQoKICAgICAgICBpZiBsYW5nIG5vdCBpbiBzZWxmLmxhbmdzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKAogICAgICAgICAgICAgICAgZiJgbGFuZ2AgbXVzdCBiZSBhIHN1cHBvcnRlZCBsYW5ndWFnZSwgYnV0IGlzICd7bGFuZ30nIGluc3RlYWQuIgogICAgICAgICAgICApCgogICAgICAgIGlmIG1vZGUgaXMgTm9uZSBvciBtb2RlID09ICJzb3VyY2UiOgogICAgICAgICAgICBwcmVmaXhfdG9rZW5zID0gW10KICAgICAgICAgICAgc3VmZml4X3Rva2VucyA9IFsiPC9zPiJdCiAgICAgICAgZWxpZiBtb2RlID09ICJ0YXJnZXQiOgogICAgICAgICAgICBwcmVmaXhfdG9rZW5zID0gKAogICAgICAgICAgICAgICAgWyI8L3M+Il0gKyBbc2VsZi5fbGFuZ190b2tfdG9faW50ZXJuYWwobGFuZyldCiAgICAgICAgICAgICAgICBpZiBzZWxmLnByZXBlbmRfdGFyZ2V0X2xhbmd0b2tfdG9fdGFyZ2V0CiAgICAgICAgICAgICAgICBlbHNlIFtdCiAgICAgICAgICAgICkKICAgICAgICAgICAgc3VmZml4X3Rva2VucyA9IFsiPC9zPiJdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgIGYiYG1vZGVgIG11c3QgYmUgJ3NvdXJjZScgb3IgJ3RhcmdldCcsIGJ1dCBpcyAne21vZGV9JyBpbnN0ZWFkLiIKICAgICAgICAgICAgKQoKICAgICAgICByZXR1cm4gU2VudGVuY2VQaWVjZUVuY29kZXIoCiAgICAgICAgICAgIHNlbGYubW9kZWwsCiAgICAgICAgICAgIHByZWZpeF90b2tlbnM9cHJlZml4X3Rva2VucywKICAgICAgICAgICAgc3VmZml4X3Rva2Vucz1zdWZmaXhfdG9rZW5zLAogICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICBwaW5fbWVtb3J5PXBpbl9tZW1vcnksCiAgICAgICAgKQoKICAgIEBmaW5hbG92ZXJyaWRlCiAgICBkZWYgY3JlYXRlX3Jhd19lbmNvZGVyKAogICAgICAgIHNlbGYsICosIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsIHBpbl9tZW1vcnk6IGJvb2wgPSBGYWxzZQogICAgKSAtPiBUZXh0VG9rZW5FbmNvZGVyOgogICAgICAgIHJldHVybiBTZW50ZW5jZVBpZWNlRW5jb2RlcihzZWxmLm1vZGVsLCBkZXZpY2U9ZGV2aWNlLCBwaW5fbWVtb3J5PXBpbl9tZW1vcnkpCgogICAgQGZpbmFsb3ZlcnJpZGUKICAgIGRlZiBjcmVhdGVfZGVjb2RlcihzZWxmKSAtPiBUZXh0VG9rZW5EZWNvZGVyOgogICAgICAgIHJldHVybiBTZW50ZW5jZVBpZWNlRGVjb2RlcihzZWxmLm1vZGVsKQo='),
    ('seamless/src/seamless_communication/models/pretssel/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnByZXRzc2VsLmVjYXBhX3Rkbm4gaW1wb3J0IEVDQVBBX1RETk4gYXMgRUNBUEFfVEROTgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnByZXRzc2VsLmVjYXBhX3Rkbm5fYnVpbGRlciBpbXBvcnQgKAogICAgRWNhcGFURE5OQnVpbGRlciBhcyBFY2FwYVRETk5CdWlsZGVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMucHJldHNzZWwuZWNhcGFfdGRubl9idWlsZGVyIGltcG9ydCAoCiAgICBFY2FwYVRETk5Db25maWcgYXMgRWNhcGFURE5OQ29uZmlnLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMucHJldHNzZWwuZWNhcGFfdGRubl9idWlsZGVyIGltcG9ydCAoCiAgICBlY2FwYV90ZG5uX2FyY2hzIGFzIGVjYXBhX3Rkbm5fYXJjaHMsCikK'),
    ('seamless/src/seamless_communication/models/pretssel/ecapa_tdnn.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBPcHRpb25hbCwgVHVwbGUKCmltcG9ydCB0b3JjaAppbXBvcnQgdG9yY2gubm4uZnVuY3Rpb25hbCBhcyBGCmZyb20gZmFpcnNlcTIubm4ucGFkZGluZyBpbXBvcnQgUGFkZGluZ01hc2ssIHRvX3BhZGRpbmdfbWFzawpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKZnJvbSB0b3JjaC5ubiBpbXBvcnQgQ29udjFkLCBMYXllck5vcm0sIE1vZHVsZSwgTW9kdWxlTGlzdCwgUmVMVSwgU2lnbW9pZCwgVGFuaCwgaW5pdAoKCmNsYXNzIEVDQVBBX1RETk4oTW9kdWxlKToKICAgICIiIgogICAgUmVwcmVzZW50cyB0aGUgRUNBUEEtVEROTiBtb2RlbCBkZXNjcmliZWQgaW4gcGFwZXI6CiAgICA6Y2l0ZTp0YGh0dHBzOi8vZG9pLm9yZy8xMC40ODU1MC9hcnhpdi4yMDA1LjA3MTQzYC4KCiAgICBBcmd1bWVudHMKICAgIC0tLS0tLS0tLQogICAgOnBhcmFtIGNoYW5uZWxzOgogICAgICAgIE91dHB1dCBjaGFubmVscyBmb3IgVEROTi9TRVJlczJOZXQgbGF5ZXIuCiAgICA6cGFyYW0ga2VybmVsX3NpemVzOgogICAgICAgIExpc3Qgb2Yga2VybmVsIHNpemVzIGZvciBlYWNoIGxheWVyLgogICAgOnBhcmFtIGRpbGF0aW9uczoKICAgICAgICBMaXN0IG9mIGRpbGF0aW9ucyBmb3Iga2VybmVscyBpbiBlYWNoIGxheWVyLgogICAgOnBhcmFtIGdyb3VwczoKICAgICAgICBMaXN0IG9mIGdyb3VwcyBmb3Iga2VybmVscyBpbiBlYWNoIGxheWVyLgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgY2hhbm5lbHM6IExpc3RbaW50XSwKICAgICAgICBrZXJuZWxfc2l6ZXM6IExpc3RbaW50XSwKICAgICAgICBkaWxhdGlvbnM6IExpc3RbaW50XSwKICAgICAgICBhdHRlbnRpb25fY2hhbm5lbHM6IGludCwKICAgICAgICByZXMybmV0X3NjYWxlOiBpbnQsCiAgICAgICAgc2VfY2hhbm5lbHM6IGludCwKICAgICAgICBnbG9iYWxfY29udGV4dDogYm9vbCwKICAgICAgICBncm91cHM6IExpc3RbaW50XSwKICAgICAgICBlbWJlZF9kaW06IGludCwKICAgICAgICBpbnB1dF9kaW06IGludCwKICAgICk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgYXNzZXJ0IGxlbihjaGFubmVscykgPT0gbGVuKGtlcm5lbF9zaXplcykgPT0gbGVuKGRpbGF0aW9ucykKICAgICAgICBzZWxmLmNoYW5uZWxzID0gY2hhbm5lbHMKICAgICAgICBzZWxmLmVtYmVkX2RpbSA9IGVtYmVkX2RpbQogICAgICAgIHNlbGYuYmxvY2tzID0gTW9kdWxlTGlzdCgpCgogICAgICAgIHNlbGYuYmxvY2tzLmFwcGVuZCgKICAgICAgICAgICAgVEROTkJsb2NrKAogICAgICAgICAgICAgICAgaW5wdXRfZGltLAogICAgICAgICAgICAgICAgY2hhbm5lbHNbMF0sCiAgICAgICAgICAgICAgICBrZXJuZWxfc2l6ZXNbMF0sCiAgICAgICAgICAgICAgICBkaWxhdGlvbnNbMF0sCiAgICAgICAgICAgICAgICBncm91cHNbMF0sCiAgICAgICAgICAgICkKICAgICAgICApCgogICAgICAgICMgU0UtUmVzMk5ldCBsYXllcnMKICAgICAgICBmb3IgaSBpbiByYW5nZSgxLCBsZW4oY2hhbm5lbHMpIC0gMSk6CiAgICAgICAgICAgIHNlbGYuYmxvY2tzLmFwcGVuZCgKICAgICAgICAgICAgICAgIFNFUmVzMk5ldEJsb2NrKAogICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzW2kgLSAxXSwKICAgICAgICAgICAgICAgICAgICBjaGFubmVsc1tpXSwKICAgICAgICAgICAgICAgICAgICByZXMybmV0X3NjYWxlPXJlczJuZXRfc2NhbGUsCiAgICAgICAgICAgICAgICAgICAgc2VfY2hhbm5lbHM9c2VfY2hhbm5lbHMsCiAgICAgICAgICAgICAgICAgICAga2VybmVsX3NpemU9a2VybmVsX3NpemVzW2ldLAogICAgICAgICAgICAgICAgICAgIGRpbGF0aW9uPWRpbGF0aW9uc1tpXSwKICAgICAgICAgICAgICAgICAgICBncm91cHM9Z3JvdXBzW2ldLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApCgogICAgICAgICMgTXVsdGktbGF5ZXIgZmVhdHVyZSBhZ2dyZWdhdGlvbgogICAgICAgIHNlbGYubWZhID0gVEROTkJsb2NrKAogICAgICAgICAgICBjaGFubmVsc1stMV0sCiAgICAgICAgICAgIGNoYW5uZWxzWy0xXSwKICAgICAgICAgICAga2VybmVsX3NpemVzWy0xXSwKICAgICAgICAgICAgZGlsYXRpb25zWy0xXSwKICAgICAgICAgICAgZ3JvdXBzPWdyb3Vwc1stMV0sCiAgICAgICAgKQoKICAgICAgICAjIEF0dGVudGl2ZSBTdGF0aXN0aWNhbCBQb29saW5nCiAgICAgICAgc2VsZi5hc3AgPSBBdHRlbnRpdmVTdGF0aXN0aWNzUG9vbGluZygKICAgICAgICAgICAgY2hhbm5lbHNbLTFdLAogICAgICAgICAgICBhdHRlbnRpb25fY2hhbm5lbHM9YXR0ZW50aW9uX2NoYW5uZWxzLAogICAgICAgICAgICBnbG9iYWxfY29udGV4dD1nbG9iYWxfY29udGV4dCwKICAgICAgICApCiAgICAgICAgc2VsZi5hc3Bfbm9ybSA9IExheWVyTm9ybShjaGFubmVsc1stMV0gKiAyLCBlcHM9MWUtMTIpCgogICAgICAgICMgRmluYWwgbGluZWFyIHRyYW5zZm9ybWF0aW9uCiAgICAgICAgc2VsZi5mYyA9IENvbnYxZCgKICAgICAgICAgICAgaW5fY2hhbm5lbHM9Y2hhbm5lbHNbLTFdICogMiwKICAgICAgICAgICAgb3V0X2NoYW5uZWxzPWVtYmVkX2RpbSwKICAgICAgICAgICAga2VybmVsX3NpemU9MSwKICAgICAgICApCgogICAgICAgIHNlbGYucmVzZXRfcGFyYW1ldGVycygpCgogICAgZGVmIHJlc2V0X3BhcmFtZXRlcnMoc2VsZikgLT4gTm9uZToKICAgICAgICAiIiJSZXNldCB0aGUgcGFyYW1ldGVycyBhbmQgYnVmZmVycyBvZiB0aGUgbW9kdWxlLiIiIgoKICAgICAgICBkZWYgZW5jb2Rlcl9pbml0KG06IE1vZHVsZSkgLT4gTm9uZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShtLCBDb252MWQpOgogICAgICAgICAgICAgICAgaW5pdC54YXZpZXJfdW5pZm9ybV8obS53ZWlnaHQsIGluaXQuY2FsY3VsYXRlX2dhaW4oInJlbHUiKSkKCiAgICAgICAgc2VsZi5hcHBseShlbmNvZGVyX2luaXQpCgogICAgZGVmIGZvcndhcmQoCiAgICAgICAgc2VsZiwKICAgICAgICB4OiBUZW5zb3IsCiAgICAgICAgcGFkZGluZ19tYXNrOiBPcHRpb25hbFtQYWRkaW5nTWFza10gPSBOb25lLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgIiIiUmV0dXJucyB0aGUgZW1iZWRkaW5nIHZlY3Rvci4KCiAgICAgICAgQXJndW1lbnRzCiAgICAgICAgLS0tLS0tLS0tCiAgICAgICAgeCA6IHRvcmNoLlRlbnNvcgogICAgICAgICAgICBUZW5zb3Igb2Ygc2hhcGUgKGJhdGNoLCB0aW1lLCBjaGFubmVsKS4KICAgICAgICAiIiIKICAgICAgICAjIE1pbmltaXplIHRyYW5zcG9zZSBmb3IgZWZmaWNpZW5jeQogICAgICAgIHggPSB4LnRyYW5zcG9zZSgxLCAyKQoKICAgICAgICB4bCA9IFtdCiAgICAgICAgZm9yIGxheWVyIGluIHNlbGYuYmxvY2tzOgogICAgICAgICAgICB4ID0gbGF5ZXIoeCwgcGFkZGluZ19tYXNrPXBhZGRpbmdfbWFzaykKICAgICAgICAgICAgeGwuYXBwZW5kKHgpCgogICAgICAgICMgTXVsdGktbGF5ZXIgZmVhdHVyZSBhZ2dyZWdhdGlvbgogICAgICAgIHggPSB0b3JjaC5jYXQoeGxbMTpdLCBkaW09MSkKICAgICAgICB4ID0gc2VsZi5tZmEoeCkKCiAgICAgICAgIyBBdHRlbnRpdmUgU3RhdGlzdGljYWwgUG9vbGluZwogICAgICAgIHggPSBzZWxmLmFzcCh4LCBwYWRkaW5nX21hc2s9cGFkZGluZ19tYXNrKQogICAgICAgIHggPSBzZWxmLmFzcF9ub3JtKHgudHJhbnNwb3NlKDEsIDIpKS50cmFuc3Bvc2UoMSwgMikKCiAgICAgICAgIyBGaW5hbCBsaW5lYXIgdHJhbnNmb3JtYXRpb24KICAgICAgICB4ID0gc2VsZi5mYyh4KQoKICAgICAgICB4ID0geC50cmFuc3Bvc2UoMSwgMikuc3F1ZWV6ZSgxKSAgIyBCIHggQwogICAgICAgIHJldHVybiBGLm5vcm1hbGl6ZSh4LCBkaW09LTEpCgoKY2xhc3MgVEROTkJsb2NrKE1vZHVsZSk6CiAgICAiIiJBbiBpbXBsZW1lbnRhdGlvbiBvZiBURE5OLgoKICAgIEFyZ3VtZW50cwogICAgLS0tLS0tLS0tLQogICAgOnBhcmFtIGluX2NoYW5uZWxzIDogaW50CiAgICAgICAgTnVtYmVyIG9mIGlucHV0IGNoYW5uZWxzLgogICAgOnBhcmFtIG91dF9jaGFubmVscyA6IGludAogICAgICAgIFRoZSBudW1iZXIgb2Ygb3V0cHV0IGNoYW5uZWxzLgogICAgOnBhcmFtIGtlcm5lbF9zaXplIDogaW50CiAgICAgICAgVGhlIGtlcm5lbCBzaXplIG9mIHRoZSBURE5OIGJsb2Nrcy4KICAgIDpwYXJhbSBkaWxhdGlvbiA6IGludAogICAgICAgIFRoZSBkaWxhdGlvbiBvZiB0aGUgVEROTiBibG9jay4KICAgIDpwYXJhbSBncm91cHM6IGludAogICAgICAgIFRoZSBncm91cHMgc2l6ZSBvZiB0aGUgVEROTiBibG9ja3MuCgogICAgRXhhbXBsZQogICAgLS0tLS0tLQogICAgPj4+IGlucF90ZW5zb3IgPSB0b3JjaC5yYW5kKFs4LCAxMjAsIDY0XSkudHJhbnNwb3NlKDEsIDIpCiAgICA+Pj4gbGF5ZXIgPSBURE5OQmxvY2soNjQsIDY0LCBrZXJuZWxfc2l6ZT0zLCBkaWxhdGlvbj0xKQogICAgPj4+IG91dF90ZW5zb3IgPSBsYXllcihpbnBfdGVuc29yKS50cmFuc3Bvc2UoMSwgMikKICAgID4+PiBvdXRfdGVuc29yLnNoYXBlCiAgICB0b3JjaC5TaXplKFs4LCAxMjAsIDY0XSkKICAgICIiIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGluX2NoYW5uZWxzOiBpbnQsCiAgICAgICAgb3V0X2NoYW5uZWxzOiBpbnQsCiAgICAgICAga2VybmVsX3NpemU6IGludCwKICAgICAgICBkaWxhdGlvbjogaW50LAogICAgICAgIGdyb3VwczogaW50ID0gMSwKICAgICk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5jb252ID0gQ29udjFkKAogICAgICAgICAgICBpbl9jaGFubmVscz1pbl9jaGFubmVscywKICAgICAgICAgICAgb3V0X2NoYW5uZWxzPW91dF9jaGFubmVscywKICAgICAgICAgICAga2VybmVsX3NpemU9a2VybmVsX3NpemUsCiAgICAgICAgICAgIGRpbGF0aW9uPWRpbGF0aW9uLAogICAgICAgICAgICBwYWRkaW5nPWRpbGF0aW9uICogKGtlcm5lbF9zaXplIC0gMSkgLy8gMiwKICAgICAgICAgICAgZ3JvdXBzPWdyb3VwcywKICAgICAgICApCiAgICAgICAgc2VsZi5hY3RpdmF0aW9uID0gUmVMVSgpCiAgICAgICAgc2VsZi5ub3JtID0gTGF5ZXJOb3JtKG91dF9jaGFubmVscywgZXBzPTFlLTEyKQoKICAgIGRlZiBmb3J3YXJkKHNlbGYsIHg6IFRlbnNvciwgcGFkZGluZ19tYXNrOiBPcHRpb25hbFtQYWRkaW5nTWFza10gPSBOb25lKSAtPiBUZW5zb3I6CiAgICAgICAgIiIiUHJvY2Vzc2VzIHRoZSBpbnB1dCB0ZW5zb3IgeCBhbmQgcmV0dXJucyBhbiBvdXRwdXQgdGVuc29yLiIiIgogICAgICAgIHggPSBzZWxmLmFjdGl2YXRpb24oc2VsZi5jb252KHgpKQoKICAgICAgICByZXR1cm4gc2VsZi5ub3JtKHgudHJhbnNwb3NlKDEsIDIpKS50cmFuc3Bvc2UoMSwgMikgICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCgoKY2xhc3MgUmVzMk5ldEJsb2NrKE1vZHVsZSk6CiAgICAiIiJBbiBpbXBsZW1lbnRhdGlvbiBvZiBSZXMyTmV0QmxvY2sgdy8gZGlsYXRpb24uCgogICAgQXJndW1lbnRzCiAgICAtLS0tLS0tLS0KICAgIDpwYXJhbSBpbl9jaGFubmVscyA6IGludAogICAgICAgIFRoZSBudW1iZXIgb2YgY2hhbm5lbHMgZXhwZWN0ZWQgaW4gdGhlIGlucHV0LgogICAgOnBhcmFtIG91dF9jaGFubmVscyA6IGludAogICAgICAgIFRoZSBudW1iZXIgb2Ygb3V0cHV0IGNoYW5uZWxzLgogICAgOnBhcmFtIHNjYWxlIDogaW50CiAgICAgICAgVGhlIHNjYWxlIG9mIHRoZSBSZXMyTmV0IGJsb2NrLgogICAgOnBhcmFtIGtlcm5lbF9zaXplOiBpbnQKICAgICAgICBUaGUga2VybmVsIHNpemUgb2YgdGhlIFJlczJOZXQgYmxvY2suCiAgICA6cGFyYW0gZGlsYXRpb24gOiBpbnQKICAgICAgICBUaGUgZGlsYXRpb24gb2YgdGhlIFJlczJOZXQgYmxvY2suCgogICAgRXhhbXBsZQogICAgLS0tLS0tLQogICAgPj4+IGlucF90ZW5zb3IgPSB0b3JjaC5yYW5kKFs4LCAxMjAsIDY0XSkudHJhbnNwb3NlKDEsIDIpCiAgICA+Pj4gbGF5ZXIgPSBSZXMyTmV0QmxvY2soNjQsIDY0LCBzY2FsZT00LCBkaWxhdGlvbj0zKQogICAgPj4+IG91dF90ZW5zb3IgPSBsYXllcihpbnBfdGVuc29yKS50cmFuc3Bvc2UoMSwgMikKICAgID4+PiBvdXRfdGVuc29yLnNoYXBlCiAgICB0b3JjaC5TaXplKFs4LCAxMjAsIDY0XSkKICAgICIiIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGluX2NoYW5uZWxzOiBpbnQsCiAgICAgICAgb3V0X2NoYW5uZWxzOiBpbnQsCiAgICAgICAgc2NhbGU6IGludCA9IDgsCiAgICAgICAga2VybmVsX3NpemU6IGludCA9IDMsCiAgICAgICAgZGlsYXRpb246IGludCA9IDEsCiAgICApOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQogICAgICAgIGFzc2VydCBpbl9jaGFubmVscyAlIHNjYWxlID09IDAKICAgICAgICBhc3NlcnQgb3V0X2NoYW5uZWxzICUgc2NhbGUgPT0gMAoKICAgICAgICBpbl9jaGFubmVsID0gaW5fY2hhbm5lbHMgLy8gc2NhbGUKICAgICAgICBoaWRkZW5fY2hhbm5lbCA9IG91dF9jaGFubmVscyAvLyBzY2FsZQogICAgICAgIHNlbGYuYmxvY2tzID0gTW9kdWxlTGlzdCgKICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgVEROTkJsb2NrKAogICAgICAgICAgICAgICAgICAgIGluX2NoYW5uZWwsCiAgICAgICAgICAgICAgICAgICAgaGlkZGVuX2NoYW5uZWwsCiAgICAgICAgICAgICAgICAgICAga2VybmVsX3NpemU9a2VybmVsX3NpemUsCiAgICAgICAgICAgICAgICAgICAgZGlsYXRpb249ZGlsYXRpb24sCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShzY2FsZSAtIDEpCiAgICAgICAgICAgIF0KICAgICAgICApCiAgICAgICAgc2VsZi5zY2FsZSA9IHNjYWxlCgogICAgZGVmIGZvcndhcmQoc2VsZiwgeDogVGVuc29yKSAtPiBUZW5zb3I6CiAgICAgICAgIiIiUHJvY2Vzc2VzIHRoZSBpbnB1dCB0ZW5zb3IgeCBhbmQgcmV0dXJucyBhbiBvdXRwdXQgdGVuc29yLiIiIgogICAgICAgIHkgPSBbXQogICAgICAgIGZvciBpLCB4X2kgaW4gZW51bWVyYXRlKHRvcmNoLmNodW5rKHgsIHNlbGYuc2NhbGUsIGRpbT0xKSk6CiAgICAgICAgICAgIGlmIGkgPT0gMDoKICAgICAgICAgICAgICAgIHlfaSA9IHhfaQogICAgICAgICAgICBlbGlmIGkgPT0gMToKICAgICAgICAgICAgICAgIHlfaSA9IHNlbGYuYmxvY2tzW2kgLSAxXSh4X2kpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB5X2kgPSBzZWxmLmJsb2Nrc1tpIC0gMV0oeF9pICsgeV9pKQogICAgICAgICAgICB5LmFwcGVuZCh5X2kpCgogICAgICAgIHlfdGVuc29yID0gdG9yY2guY2F0KHksIGRpbT0xKQogICAgICAgIHJldHVybiB5X3RlbnNvcgoKCmNsYXNzIFNFQmxvY2soTW9kdWxlKToKICAgICIiIkFuIGltcGxlbWVudGF0aW9uIG9mIHNxdWVlemUtYW5kLWV4Y2l0YXRpb24gYmxvY2suCgogICAgQXJndW1lbnRzCiAgICAtLS0tLS0tLS0KICAgIGluX2NoYW5uZWxzIDogaW50CiAgICAgICAgVGhlIG51bWJlciBvZiBpbnB1dCBjaGFubmVscy4KICAgIHNlX2NoYW5uZWxzIDogaW50CiAgICAgICAgVGhlIG51bWJlciBvZiBvdXRwdXQgY2hhbm5lbHMgYWZ0ZXIgc3F1ZWV6ZS4KICAgIG91dF9jaGFubmVscyA6IGludAogICAgICAgIFRoZSBudW1iZXIgb2Ygb3V0cHV0IGNoYW5uZWxzLgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgaW5fY2hhbm5lbHM6IGludCwKICAgICAgICBzZV9jaGFubmVsczogaW50LAogICAgICAgIG91dF9jaGFubmVsczogaW50LAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICAgICAgc2VsZi5jb252MSA9IENvbnYxZCgKICAgICAgICAgICAgaW5fY2hhbm5lbHM9aW5fY2hhbm5lbHMsIG91dF9jaGFubmVscz1zZV9jaGFubmVscywga2VybmVsX3NpemU9MQogICAgICAgICkKICAgICAgICBzZWxmLnJlbHUgPSBSZUxVKGlucGxhY2U9VHJ1ZSkKICAgICAgICBzZWxmLmNvbnYyID0gQ29udjFkKAogICAgICAgICAgICBpbl9jaGFubmVscz1zZV9jaGFubmVscywgb3V0X2NoYW5uZWxzPW91dF9jaGFubmVscywga2VybmVsX3NpemU9MQogICAgICAgICkKICAgICAgICBzZWxmLnNpZ21vaWQgPSBTaWdtb2lkKCkKCiAgICBkZWYgZm9yd2FyZChzZWxmLCB4OiBUZW5zb3IsIHBhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdID0gTm9uZSkgLT4gVGVuc29yOgogICAgICAgICIiIlByb2Nlc3NlcyB0aGUgaW5wdXQgdGVuc29yIHggYW5kIHJldHVybnMgYW4gb3V0cHV0IHRlbnNvci4iIiIKICAgICAgICBpZiBwYWRkaW5nX21hc2sgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIG1hc2sgPSBwYWRkaW5nX21hc2subWF0ZXJpYWxpemUoKS51bnNxdWVlemUoMSkKICAgICAgICAgICAgcyA9ICh4ICogbWFzaykuc3VtKGRpbT0yLCBrZWVwZGltPVRydWUpIC8gcGFkZGluZ19tYXNrLnNlcV9sZW5zWwogICAgICAgICAgICAgICAgOiwgTm9uZSwgTm9uZQogICAgICAgICAgICBdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcyA9IHgubWVhbihkaW09Miwga2VlcGRpbT1UcnVlKQoKICAgICAgICBzID0gc2VsZi5yZWx1KHNlbGYuY29udjEocykpCiAgICAgICAgcyA9IHNlbGYuc2lnbW9pZChzZWxmLmNvbnYyKHMpKQoKICAgICAgICByZXR1cm4gcyAqIHgKCgpjbGFzcyBBdHRlbnRpdmVTdGF0aXN0aWNzUG9vbGluZyhNb2R1bGUpOgogICAgIiIiVGhpcyBjbGFzcyBpbXBsZW1lbnRzIGFuIGF0dGVudGl2ZSBzdGF0aXN0aWMgcG9vbGluZyBsYXllciBmb3IgZWFjaCBjaGFubmVsLgogICAgSXQgcmV0dXJucyB0aGUgY29uY2F0ZW5hdGVkIG1lYW4gYW5kIHN0ZCBvZiB0aGUgaW5wdXQgdGVuc29yLgoKICAgIEFyZ3VtZW50cwogICAgLS0tLS0tLS0tCiAgICBjaGFubmVsczogaW50CiAgICAgICAgVGhlIG51bWJlciBvZiBpbnB1dCBjaGFubmVscy4KICAgIGF0dGVudGlvbl9jaGFubmVsczogaW50CiAgICAgICAgVGhlIG51bWJlciBvZiBhdHRlbnRpb24gY2hhbm5lbHMuCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwgY2hhbm5lbHM6IGludCwgYXR0ZW50aW9uX2NoYW5uZWxzOiBpbnQgPSAxMjgsIGdsb2JhbF9jb250ZXh0OiBib29sID0gVHJ1ZQogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICAgICAgc2VsZi5lcHMgPSAxZS0xMgogICAgICAgIHNlbGYuZ2xvYmFsX2NvbnRleHQgPSBnbG9iYWxfY29udGV4dAogICAgICAgIGlmIGdsb2JhbF9jb250ZXh0OgogICAgICAgICAgICBzZWxmLnRkbm4gPSBURE5OQmxvY2soY2hhbm5lbHMgKiAzLCBhdHRlbnRpb25fY2hhbm5lbHMsIDEsIDEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi50ZG5uID0gVEROTkJsb2NrKGNoYW5uZWxzLCBhdHRlbnRpb25fY2hhbm5lbHMsIDEsIDEpCgogICAgICAgIHNlbGYudGFuaCA9IFRhbmgoKQogICAgICAgIHNlbGYuY29udiA9IENvbnYxZCgKICAgICAgICAgICAgaW5fY2hhbm5lbHM9YXR0ZW50aW9uX2NoYW5uZWxzLCBvdXRfY2hhbm5lbHM9Y2hhbm5lbHMsIGtlcm5lbF9zaXplPTEKICAgICAgICApCgogICAgZGVmIGZvcndhcmQoc2VsZiwgeDogVGVuc29yLCBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSA9IE5vbmUpIC0+IFRlbnNvcjoKICAgICAgICAiIiJDYWxjdWxhdGVzIG1lYW4gYW5kIHN0ZCBmb3IgYSBiYXRjaCAoaW5wdXQgdGVuc29yKS4KCiAgICAgICAgQXJndW1lbnRzCiAgICAgICAgLS0tLS0tLS0tCiAgICAgICAgeCA6IHRvcmNoLlRlbnNvcgogICAgICAgICAgICBUZW5zb3Igb2Ygc2hhcGUgW04sIEMsIExdLgogICAgICAgICIiIgogICAgICAgIEwgPSB4LnNoYXBlWy0xXQoKICAgICAgICBkZWYgX2NvbXB1dGVfc3RhdGlzdGljcygKICAgICAgICAgICAgeDogVGVuc29yLCBtOiBUZW5zb3IsIGRpbTogaW50ID0gMiwgZXBzOiBmbG9hdCA9IHNlbGYuZXBzCiAgICAgICAgKSAtPiBUdXBsZVtUZW5zb3IsIFRlbnNvcl06CiAgICAgICAgICAgIG1lYW4gPSAobSAqIHgpLnN1bShkaW0pCiAgICAgICAgICAgIHN0ZCA9IHRvcmNoLnNxcnQoKG0gKiAoeCAtIG1lYW4udW5zcXVlZXplKGRpbSkpLnBvdygyKSkuc3VtKGRpbSkuY2xhbXAoZXBzKSkKICAgICAgICAgICAgcmV0dXJuIG1lYW4sIHN0ZAoKICAgICAgICAjIGlmIGxlbmd0aHMgaXMgTm9uZToKICAgICAgICAjICAgICBsZW5ndGhzID0gW3guc2hhcGVbMF1dCgogICAgICAgICMgTWFrZSBiaW5hcnkgbWFzayBvZiBzaGFwZSBbTiwgMSwgTF0KICAgICAgICAjIG1hc2sgPSB0b19wYWRkaW5nX21hc2sobGVuZ3RocywgbWF4KGxlbmd0aHMpKQogICAgICAgIGlmIHBhZGRpbmdfbWFzayBpcyBub3QgTm9uZToKICAgICAgICAgICAgbWFzayA9IHBhZGRpbmdfbWFzay5tYXRlcmlhbGl6ZSgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbWFzayA9IHRvX3BhZGRpbmdfbWFzayh0b3JjaC5JbnRUZW5zb3IoW0xdKSwgTCkucmVwZWF0KHguc2hhcGVbMF0sIDEpLnRvKHgpCiAgICAgICAgbWFzayA9IG1hc2sudW5zcXVlZXplKDEpCgogICAgICAgICMgRXhwYW5kIHRoZSB0ZW1wb3JhbCBjb250ZXh0IG9mIHRoZSBwb29saW5nIGxheWVyIGJ5IGFsbG93aW5nIHRoZQogICAgICAgICMgc2VsZi1hdHRlbnRpb24gdG8gbG9vayBhdCBnbG9iYWwgcHJvcGVydGllcyBvZiB0aGUgdXR0ZXJhbmNlLgogICAgICAgIGlmIHNlbGYuZ2xvYmFsX2NvbnRleHQ6CiAgICAgICAgICAgICMgdG9yY2guc3RkIGlzIHVuc3RhYmxlIGZvciBiYWNrd2FyZCBjb21wdXRhdGlvbgogICAgICAgICAgICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9weXRvcmNoL3B5dG9yY2gvaXNzdWVzLzQzMjAKICAgICAgICAgICAgdG90YWwgPSBtYXNrLnN1bShkaW09Miwga2VlcGRpbT1UcnVlKS50byh4KQogICAgICAgICAgICBtZWFuLCBzdGQgPSBfY29tcHV0ZV9zdGF0aXN0aWNzKHgsIG1hc2sgLyB0b3RhbCkKICAgICAgICAgICAgbWVhbiA9IG1lYW4udW5zcXVlZXplKDIpLnJlcGVhdCgxLCAxLCBMKQogICAgICAgICAgICBzdGQgPSBzdGQudW5zcXVlZXplKDIpLnJlcGVhdCgxLCAxLCBMKQogICAgICAgICAgICBhdHRuID0gdG9yY2guY2F0KFt4LCBtZWFuLCBzdGRdLCBkaW09MSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBhdHRuID0geAoKICAgICAgICAjIEFwcGx5IGxheWVycwogICAgICAgIGF0dG4gPSBzZWxmLmNvbnYoc2VsZi50YW5oKHNlbGYudGRubihhdHRuKSkpCgogICAgICAgICMgRmlsdGVyIG91dCB6ZXJvLXBhZGRpbmdzCiAgICAgICAgYXR0biA9IGF0dG4ubWFza2VkX2ZpbGwobWFzayA9PSAwLCBmbG9hdCgiLWluZiIpKQoKICAgICAgICBhdHRuID0gRi5zb2Z0bWF4KGF0dG4sIGRpbT0yKQogICAgICAgIG1lYW4sIHN0ZCA9IF9jb21wdXRlX3N0YXRpc3RpY3MoeCwgYXR0bikKICAgICAgICAjIEFwcGVuZCBtZWFuIGFuZCBzdGQgb2YgdGhlIGJhdGNoCiAgICAgICAgcG9vbGVkX3N0YXRzID0gdG9yY2guY2F0KChtZWFuLCBzdGQpLCBkaW09MSkKICAgICAgICBwb29sZWRfc3RhdHMgPSBwb29sZWRfc3RhdHMudW5zcXVlZXplKDIpCgogICAgICAgIHJldHVybiBwb29sZWRfc3RhdHMKCgpjbGFzcyBTRVJlczJOZXRCbG9jayhNb2R1bGUpOgogICAgIiIiQW4gaW1wbGVtZW50YXRpb24gb2YgYnVpbGRpbmcgYmxvY2sgaW4gRUNBUEEtVEROTiwgaS5lLiwKICAgIFRETk4tUmVzMk5ldC1URE5OLVNFQmxvY2suCgogICAgQXJndW1lbnRzCiAgICAtLS0tLS0tLS0tCiAgICBvdXRfY2hhbm5lbHM6IGludAogICAgICAgIFRoZSBudW1iZXIgb2Ygb3V0cHV0IGNoYW5uZWxzLgogICAgcmVzMm5ldF9zY2FsZTogaW50CiAgICAgICAgVGhlIHNjYWxlIG9mIHRoZSBSZXMyTmV0IGJsb2NrLgogICAga2VybmVsX3NpemU6IGludAogICAgICAgIFRoZSBrZXJuZWwgc2l6ZSBvZiB0aGUgVEROTiBibG9ja3MuCiAgICBkaWxhdGlvbjogaW50CiAgICAgICAgVGhlIGRpbGF0aW9uIG9mIHRoZSBSZXMyTmV0IGJsb2NrLgogICAgZ3JvdXBzOiBpbnQKICAgIE51bWJlciBvZiBibG9ja2VkIGNvbm5lY3Rpb25zIGZyb20gaW5wdXQgY2hhbm5lbHMgdG8gb3V0cHV0IGNoYW5uZWxzLgoKICAgIEV4YW1wbGUKICAgIC0tLS0tLS0KICAgID4+PiB4ID0gdG9yY2gucmFuZCg4LCAxMjAsIDY0KS50cmFuc3Bvc2UoMSwgMikKICAgID4+PiBjb252ID0gU0VSZXMyTmV0QmxvY2soNjQsIDY0LCByZXMybmV0X3NjYWxlPTQpCiAgICA+Pj4gb3V0ID0gY29udih4KS50cmFuc3Bvc2UoMSwgMikKICAgID4+PiBvdXQuc2hhcGUKICAgIHRvcmNoLlNpemUoWzgsIDEyMCwgNjRdKQogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgaW5fY2hhbm5lbHM6IGludCwKICAgICAgICBvdXRfY2hhbm5lbHM6IGludCwKICAgICAgICByZXMybmV0X3NjYWxlOiBpbnQgPSA4LAogICAgICAgIHNlX2NoYW5uZWxzOiBpbnQgPSAxMjgsCiAgICAgICAga2VybmVsX3NpemU6IGludCA9IDEsCiAgICAgICAgZGlsYXRpb246IGludCA9IDEsCiAgICAgICAgZ3JvdXBzOiBpbnQgPSAxLAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLm91dF9jaGFubmVscyA9IG91dF9jaGFubmVscwogICAgICAgIHNlbGYudGRubjEgPSBURE5OQmxvY2soCiAgICAgICAgICAgIGluX2NoYW5uZWxzLAogICAgICAgICAgICBvdXRfY2hhbm5lbHMsCiAgICAgICAgICAgIGtlcm5lbF9zaXplPTEsCiAgICAgICAgICAgIGRpbGF0aW9uPTEsCiAgICAgICAgICAgIGdyb3Vwcz1ncm91cHMsCiAgICAgICAgKQogICAgICAgIHNlbGYucmVzMm5ldF9ibG9jayA9IFJlczJOZXRCbG9jaygKICAgICAgICAgICAgb3V0X2NoYW5uZWxzLAogICAgICAgICAgICBvdXRfY2hhbm5lbHMsCiAgICAgICAgICAgIHJlczJuZXRfc2NhbGUsCiAgICAgICAgICAgIGtlcm5lbF9zaXplLAogICAgICAgICAgICBkaWxhdGlvbiwKICAgICAgICApCiAgICAgICAgc2VsZi50ZG5uMiA9IFRETk5CbG9jaygKICAgICAgICAgICAgb3V0X2NoYW5uZWxzLAogICAgICAgICAgICBvdXRfY2hhbm5lbHMsCiAgICAgICAgICAgIGtlcm5lbF9zaXplPTEsCiAgICAgICAgICAgIGRpbGF0aW9uPTEsCiAgICAgICAgICAgIGdyb3Vwcz1ncm91cHMsCiAgICAgICAgKQogICAgICAgIHNlbGYuc2VfYmxvY2sgPSBTRUJsb2NrKG91dF9jaGFubmVscywgc2VfY2hhbm5lbHMsIG91dF9jaGFubmVscykKCiAgICAgICAgc2VsZi5zaG9ydGN1dCA9IE5vbmUKICAgICAgICBpZiBpbl9jaGFubmVscyAhPSBvdXRfY2hhbm5lbHM6CiAgICAgICAgICAgIHNlbGYuc2hvcnRjdXQgPSBDb252MWQoCiAgICAgICAgICAgICAgICBpbl9jaGFubmVscz1pbl9jaGFubmVscywKICAgICAgICAgICAgICAgIG91dF9jaGFubmVscz1vdXRfY2hhbm5lbHMsCiAgICAgICAgICAgICAgICBrZXJuZWxfc2l6ZT0xLAogICAgICAgICAgICApCgogICAgZGVmIGZvcndhcmQoc2VsZiwgeDogVGVuc29yLCBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSA9IE5vbmUpIC0+IFRlbnNvcjoKICAgICAgICAiIiJQcm9jZXNzZXMgdGhlIGlucHV0IHRlbnNvciB4IGFuZCByZXR1cm5zIGFuIG91dHB1dCB0ZW5zb3IuIiIiCiAgICAgICAgcmVzaWR1YWwgPSB4CiAgICAgICAgaWYgc2VsZi5zaG9ydGN1dDoKICAgICAgICAgICAgcmVzaWR1YWwgPSBzZWxmLnNob3J0Y3V0KHgpCgogICAgICAgIHggPSBzZWxmLnRkbm4xKHgpCiAgICAgICAgeCA9IHNlbGYucmVzMm5ldF9ibG9jayh4KQogICAgICAgIHggPSBzZWxmLnRkbm4yKHgpCiAgICAgICAgeCA9IHNlbGYuc2VfYmxvY2soeCwgcGFkZGluZ19tYXNrPXBhZGRpbmdfbWFzaykKCiAgICAgICAgcmV0dXJuIHggKyByZXNpZHVhbAo='),
    ('seamless/src/seamless_communication/models/pretssel/ecapa_tdnn_builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIE9wdGlvbmFsCgpmcm9tIGZhaXJzZXEyLm1vZGVscy51dGlscy5hcmNoX3JlZ2lzdHJ5IGltcG9ydCBBcmNoaXRlY3R1cmVSZWdpc3RyeQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZQoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5wcmV0c3NlbC5lY2FwYV90ZG5uIGltcG9ydCBFQ0FQQV9URE5OCgoKQGRhdGFjbGFzcwpjbGFzcyBFY2FwYVRETk5Db25maWc6CiAgICBjaGFubmVsczogTGlzdFtpbnRdCiAgICBrZXJuZWxfc2l6ZXM6IExpc3RbaW50XQogICAgZGlsYXRpb25zOiBMaXN0W2ludF0KICAgIGF0dGVudGlvbl9jaGFubmVsczogaW50CiAgICByZXMybmV0X3NjYWxlOiBpbnQKICAgIHNlX2NoYW5uZWxzOiBpbnQKICAgIGdsb2JhbF9jb250ZXh0OiBib29sCiAgICBncm91cHM6IExpc3RbaW50XQogICAgZW1iZWRfZGltOiBpbnQKICAgIGlucHV0X2RpbTogaW50CgoKZWNhcGFfdGRubl9hcmNocyA9IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5W0VjYXBhVEROTkNvbmZpZ10oImVjYXBhX3Rkbm4iKQoKZWNhcGFfdGRubl9hcmNoID0gZWNhcGFfdGRubl9hcmNocy5kZWNvcmF0b3IKCgpAZWNhcGFfdGRubl9hcmNoKCJiYXNlIikKZGVmIF9iYXNlX2VjYXBhX3Rkbm4oKSAtPiBFY2FwYVRETk5Db25maWc6CiAgICByZXR1cm4gRWNhcGFURE5OQ29uZmlnKAogICAgICAgIGNoYW5uZWxzPVs1MTIsIDUxMiwgNTEyLCA1MTIsIDE1MzZdLAogICAgICAgIGtlcm5lbF9zaXplcz1bNSwgMywgMywgMywgMV0sCiAgICAgICAgZGlsYXRpb25zPVsxLCAyLCAzLCA0LCAxXSwKICAgICAgICBhdHRlbnRpb25fY2hhbm5lbHM9MTI4LAogICAgICAgIHJlczJuZXRfc2NhbGU9OCwKICAgICAgICBzZV9jaGFubmVscz0xMjgsCiAgICAgICAgZ2xvYmFsX2NvbnRleHQ9VHJ1ZSwKICAgICAgICBncm91cHM9WzEsIDEsIDEsIDEsIDFdLAogICAgICAgIGVtYmVkX2RpbT01MTIsCiAgICAgICAgaW5wdXRfZGltPTgwLAogICAgKQoKCmNsYXNzIEVjYXBhVEROTkJ1aWxkZXI6CiAgICAiIiIKICAgIEJ1aWxkZXIgbW9kdWxlIGZvciBFQ0FQQV9URE5OIG1vZGVsCiAgICAiIiIKCiAgICBjb25maWc6IEVjYXBhVEROTkNvbmZpZwogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdCiAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgY29uZmlnOiBFY2FwYVRETk5Db25maWcsCiAgICAgICAgKiwKICAgICAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAogICAgKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgICAgIFRoZSBjb25maWd1cmF0aW9uIHRvIHVzZS4KICAgICAgICA6cGFyYW0gZGV2aWNldjoKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBpbml0aWFsaXplIG1vZHVsZXMuCiAgICAgICAgOnBhcmFtIGR0eXBlOgogICAgICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29uZmlnID0gY29uZmlnCgogICAgICAgIHNlbGYuZGV2aWNlLCBzZWxmLmR0eXBlID0gZGV2aWNlLCBkdHlwZQoKICAgIGRlZiBidWlsZF9tb2RlbChzZWxmKSAtPiBFQ0FQQV9URE5OOgogICAgICAgICIiIkJ1aWxkIGEgbW9kZWwuIiIiCiAgICAgICAgbW9kZWwgPSBFQ0FQQV9URE5OKAogICAgICAgICAgICBzZWxmLmNvbmZpZy5jaGFubmVscywKICAgICAgICAgICAgc2VsZi5jb25maWcua2VybmVsX3NpemVzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5kaWxhdGlvbnMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmF0dGVudGlvbl9jaGFubmVscywKICAgICAgICAgICAgc2VsZi5jb25maWcucmVzMm5ldF9zY2FsZSwKICAgICAgICAgICAgc2VsZi5jb25maWcuc2VfY2hhbm5lbHMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmdsb2JhbF9jb250ZXh0LAogICAgICAgICAgICBzZWxmLmNvbmZpZy5ncm91cHMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmVtYmVkX2RpbSwKICAgICAgICAgICAgc2VsZi5jb25maWcuaW5wdXRfZGltLAogICAgICAgICkKICAgICAgICBtb2RlbC50byhkZXZpY2U9c2VsZi5kZXZpY2UsIGR0eXBlPXNlbGYuZHR5cGUpCiAgICAgICAgcmV0dXJuIG1vZGVsCgoKZGVmIGNyZWF0ZV9lY2FwYV90ZG5uX21vZGVsKAogICAgY29uZmlnOiBFY2FwYVRETk5Db25maWcsCiAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCikgLT4gRUNBUEFfVEROTjoKICAgICIiIkNyZWF0ZSBhIEVDQVBBX1RETk4gbW9kZWwuCgogICAgOnBhcmFtIGNvbmZpZzoKICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICA6cGFyYW0gZGV2aWNlOgogICAgICAgIFRoZSBkZXZpY2Ugb24gd2hpY2ggdG8gaW5pdGlhbGl6ZSBtb2R1bGVzLgogICAgOnBhcmFtIGR0eXBlOgogICAgICAgIFRoZSBkYXRhIHR5cGUgb2YgbW9kdWxlIHBhcmFtZXRlcnMgYW5kIGJ1ZmZlcnMuCiAgICAiIiIKCiAgICByZXR1cm4gRWNhcGFURE5OQnVpbGRlcihjb25maWcsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKS5idWlsZF9tb2RlbCgpCg=='),
    ('seamless/src/seamless_communication/models/vocoder/codehifigan.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gdHlwaW5nIGltcG9ydCBBbnksIERpY3QsIExpc3QsIE9wdGlvbmFsCgppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoLm5uIGFzIG5uCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvcgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eSBpbXBvcnQgVmFyaWFuY2VQcmVkaWN0b3IKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy52b2NvZGVyLmhpZmlnYW4gaW1wb3J0IEdlbmVyYXRvcgoKCmNsYXNzIENvZGVHZW5lcmF0b3IoR2VuZXJhdG9yKToKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIHVwc2FtcGxlX3JhdGVzOiBMaXN0W2ludF0sCiAgICAgICAgdXBzYW1wbGVfa2VybmVsX3NpemVzOiBMaXN0W2ludF0sCiAgICAgICAgdXBzYW1wbGVfaW5pdGlhbF9jaGFubmVsOiBpbnQsCiAgICAgICAgcmVzYmxvY2tfa2VybmVsX3NpemVzOiBMaXN0W2ludF0sCiAgICAgICAgcmVzYmxvY2tfZGlsYXRpb25fc2l6ZXM6IExpc3RbTGlzdFtpbnRdXSwKICAgICAgICBtb2RlbF9pbl9kaW06IE9wdGlvbmFsW2ludF0sCiAgICAgICAgbnVtX2VtYmVkZGluZ3M6IGludCwKICAgICAgICBlbWJlZGRpbmdfZGltOiBpbnQsCiAgICAgICAgZHVyX3ByZWRpY3Rvcl9wYXJhbXM6IERpY3Rbc3RyLCBBbnldLAogICAgICAgIGxhbmdfZW1iZWRkaW5nX2RpbTogaW50LAogICAgICAgIG51bV9sYW5nczogaW50LAogICAgICAgIHNwa3JfZW1iZWRkaW5nX2RpbTogaW50LAogICAgICAgIG51bV9zcGtyczogaW50LAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKAogICAgICAgICAgICB1cHNhbXBsZV9yYXRlcywKICAgICAgICAgICAgdXBzYW1wbGVfa2VybmVsX3NpemVzLAogICAgICAgICAgICB1cHNhbXBsZV9pbml0aWFsX2NoYW5uZWwsCiAgICAgICAgICAgIHJlc2Jsb2NrX2tlcm5lbF9zaXplcywKICAgICAgICAgICAgcmVzYmxvY2tfZGlsYXRpb25fc2l6ZXMsCiAgICAgICAgICAgIG1vZGVsX2luX2RpbSwKICAgICAgICApCiAgICAgICAgc2VsZi5kaWN0ID0gbm4uRW1iZWRkaW5nKG51bV9lbWJlZGRpbmdzLCBlbWJlZGRpbmdfZGltKQogICAgICAgIHNlbGYuc3BrciA9IG5uLkVtYmVkZGluZyhudW1fc3BrcnMsIHNwa3JfZW1iZWRkaW5nX2RpbSkKICAgICAgICBzZWxmLmxhbmcgPSBubi5FbWJlZGRpbmcobnVtX2xhbmdzLCBsYW5nX2VtYmVkZGluZ19kaW0pCgogICAgICAgIHNlbGYuZHVyX3ByZWRpY3RvciA9IE5vbmUKICAgICAgICBpZiBkdXJfcHJlZGljdG9yX3BhcmFtczoKICAgICAgICAgICAgc2VsZi5kdXJfcHJlZGljdG9yID0gVmFyaWFuY2VQcmVkaWN0b3IoKipkdXJfcHJlZGljdG9yX3BhcmFtcykKCiAgICAgICAgc2VsZi5udW1fc3BrcnMgPSBudW1fc3BrcnMKICAgICAgICBzZWxmLm51bV9sYW5ncyA9IG51bV9sYW5ncwoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfdXBzYW1wbGUoc2lnbmFsOiBUZW5zb3IsIG1heF9mcmFtZXM6IGludCkgLT4gVGVuc29yOgogICAgICAgIGlmIHNpZ25hbC5kaW0oKSA9PSAzOgogICAgICAgICAgICBic3osIGNoYW5uZWxzLCBjb25kX2xlbmd0aCA9IHNpZ25hbC5zaXplKCkKICAgICAgICBlbGlmIHNpZ25hbC5kaW0oKSA9PSAyOgogICAgICAgICAgICBzaWduYWwgPSBzaWduYWwudW5zcXVlZXplKDIpCiAgICAgICAgICAgIGJzeiwgY2hhbm5lbHMsIGNvbmRfbGVuZ3RoID0gc2lnbmFsLnNpemUoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNpZ25hbCA9IHNpZ25hbC52aWV3KC0xLCAxLCAxKQogICAgICAgICAgICBic3osIGNoYW5uZWxzLCBjb25kX2xlbmd0aCA9IHNpZ25hbC5zaXplKCkKCiAgICAgICAgc2lnbmFsID0gc2lnbmFsLnVuc3F1ZWV6ZSgzKS5yZXBlYXQoMSwgMSwgMSwgbWF4X2ZyYW1lcyAvLyBjb25kX2xlbmd0aCkKCiAgICAgICAgIyBwYWQgemVyb3MgYXMgbmVlZGVkIChpZiBzaWduYWwncyBzaGFwZSBkb2VzIG5vdCBkaXZpZGUgY29tcGxldGVseSB3aXRoIG1heF9mcmFtZXMpCiAgICAgICAgcmVtaW5kZXIgPSAobWF4X2ZyYW1lcyAtIHNpZ25hbC5zaGFwZVsyXSAqIHNpZ25hbC5zaGFwZVszXSkgLy8gc2lnbmFsLnNoYXBlWzNdCiAgICAgICAgaWYgcmVtaW5kZXIgPiAwOgogICAgICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKAogICAgICAgICAgICAgICAgIlBhZGRpbmcgY29uZGl0aW9uIHNpZ25hbCAtIG1pc2FsaWdubWVudCBiZXR3ZWVuIGNvbmRpdGlvbiBmZWF0dXJlcy4iCiAgICAgICAgICAgICkKCiAgICAgICAgc2lnbmFsID0gc2lnbmFsLnZpZXcoYnN6LCBjaGFubmVscywgbWF4X2ZyYW1lcykKICAgICAgICByZXR1cm4gc2lnbmFsCgogICAgZGVmIGZvcndhcmQoc2VsZiwgc2FtcGxlOiBEaWN0W3N0ciwgQW55XSwgZHVyX3ByZWRpY3Rpb246IGJvb2wpIC0+IFRlbnNvcjogICMgdHlwZTogaWdub3JlCiAgICAgICAgeCA9IHNhbXBsZVsiY29kZSJdCiAgICAgICAgeCA9IHNlbGYuZGljdCh4KS50cmFuc3Bvc2UoMSwgMikKCiAgICAgICAgaWYgc2VsZi5kdXJfcHJlZGljdG9yIGFuZCBkdXJfcHJlZGljdGlvbjoKICAgICAgICAgICAgbG9nX2R1cl9wcmVkID0gc2VsZi5kdXJfcHJlZGljdG9yKHgudHJhbnNwb3NlKDEsIDIpLCBOb25lKQogICAgICAgICAgICBkdXJfb3V0ID0gdG9yY2guY2xhbXAoCiAgICAgICAgICAgICAgICB0b3JjaC5yb3VuZCgodG9yY2guZXhwKGxvZ19kdXJfcHJlZCkgLSAxKSkubG9uZygpLCBtaW49MQogICAgICAgICAgICApCiAgICAgICAgICAgICMgQiB4IEMgeCBUCiAgICAgICAgICAgIHJlcGVhdF9pbnRlcmxlYXZlZF94ID0gW10KICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoeC5zaXplKDApKToKICAgICAgICAgICAgICAgIHJlcGVhdF9pbnRlcmxlYXZlZF94LmFwcGVuZCh0b3JjaC5yZXBlYXRfaW50ZXJsZWF2ZSh4W2ldLnVuc3F1ZWV6ZSgwKSwgZHVyX291dFtpXS52aWV3KC0xKSwgZGltPTIpKQogICAgICAgICAgICB4ID0gdG9yY2guY2F0KHJlcGVhdF9pbnRlcmxlYXZlZF94KQogICAgICAgIHVwc2FtcGxlZF9zcGtyID0gW10KICAgICAgICB1cHNhbXBsZWRfbGFuZyA9IFtdCiAgICAgICAgc3BrciA9IHNlbGYuc3BrcihzYW1wbGVbInNwa3IiXSkudHJhbnNwb3NlKDEsIDIpCiAgICAgICAgbGFuZyA9IHNlbGYubGFuZyhzYW1wbGVbImxhbmciXSkudHJhbnNwb3NlKDEsIDIpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoeC5zaXplKDApKToKICAgICAgICAgICAgdXBzYW1wbGVkX3Nwa3IuYXBwZW5kKHNlbGYuX3Vwc2FtcGxlKHNwa3JbaV0sIHguc2hhcGVbLTFdKSkKICAgICAgICAgICAgdXBzYW1wbGVkX2xhbmcuYXBwZW5kKHNlbGYuX3Vwc2FtcGxlKGxhbmdbaV0sIHguc2hhcGVbLTFdKSkKICAgICAgICBzcGtyID0gdG9yY2guY2F0KHVwc2FtcGxlZF9zcGtyLCBkaW09MSkudHJhbnNwb3NlKDAsIDEpCiAgICAgICAgbGFuZyA9IHRvcmNoLmNhdCh1cHNhbXBsZWRfbGFuZywgZGltPTEpLnRyYW5zcG9zZSgwLCAxKQogICAgICAgIHggPSB0b3JjaC5jYXQoW3gsIHNwa3JdLCBkaW09MSkKICAgICAgICB4ID0gdG9yY2guY2F0KFtsYW5nLCB4XSwgZGltPTEpCgogICAgICAgIHJldHVybiBzdXBlcigpLmZvcndhcmQoeCkK'),
    ('seamless/src/seamless_communication/models/vocoder/hifigan.py', ''),
    ('seamless/src/seamless_communication/models/vocoder/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIuYnVpbGRlciBpbXBvcnQgKAogICAgVm9jb2RlckJ1aWxkZXIgYXMgVm9jb2RlckJ1aWxkZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy52b2NvZGVyLmJ1aWxkZXIgaW1wb3J0IFZvY29kZXJDb25maWcgYXMgVm9jb2RlckNvbmZpZwpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIuY29kZWhpZmlnYW4gaW1wb3J0ICgKICAgIENvZGVHZW5lcmF0b3IgYXMgQ29kZUdlbmVyYXRvciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIuaGlmaWdhbiBpbXBvcnQgR2VuZXJhdG9yIGFzIEdlbmVyYXRvcgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIubG9hZGVyIGltcG9ydCAoCiAgICBsb2FkX3ZvY29kZXJfbW9kZWwgYXMgbG9hZF92b2NvZGVyX21vZGVsLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci52b2NvZGVyIGltcG9ydCBWb2NvZGVyIGFzIFZvY29kZXIK'),
    ('seamless/src/seamless_communication/models/vocoder/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBNYXBwaW5nCgpmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgYXNzZXRfc3RvcmUsIGRvd25sb2FkX21hbmFnZXIKZnJvbSBmYWlyc2VxMi5tb2RlbHMudXRpbHMgaW1wb3J0IENvbmZpZ0xvYWRlciwgTW9kZWxMb2FkZXIKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci5idWlsZGVyIGltcG9ydCAoCiAgICBWb2NvZGVyQ29uZmlnLAogICAgY3JlYXRlX3ZvY29kZXJfbW9kZWwsCiAgICB2b2NvZGVyX2FyY2hzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci52b2NvZGVyIGltcG9ydCBWb2NvZGVyCgoKZGVmIGNvbnZlcnRfdm9jb2Rlcl9jaGVja3BvaW50KAogICAgY2hlY2twb2ludDogTWFwcGluZ1tzdHIsIEFueV0sIGNvbmZpZzogVm9jb2RlckNvbmZpZwopIC0+IE1hcHBpbmdbc3RyLCBBbnldOgogICAgaWYgKAogICAgICAgICJtb2RlbCIgaW4gY2hlY2twb2ludAogICAgICAgIGFuZCAiY29kZV9nZW5lcmF0b3IucmVzYmxvY2tzLjAuY29udnMxLjAud2VpZ2h0X2ciIGluIGNoZWNrcG9pbnRbIm1vZGVsIl0KICAgICk6CiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnQKCiAgICBvbGRfc3RhdGVfZGljdCA9IGNoZWNrcG9pbnRbImdlbmVyYXRvciJdCiAgICBuZXdfc3RhdGVfZGljdCA9IHt9CiAgICBmb3Iga2V5IGluIG9sZF9zdGF0ZV9kaWN0OgogICAgICAgIG5ld19rZXkgPSBmImNvZGVfZ2VuZXJhdG9yLntrZXl9IgogICAgICAgIG5ld19zdGF0ZV9kaWN0W25ld19rZXldID0gb2xkX3N0YXRlX2RpY3Rba2V5XQogICAgY2hlY2twb2ludFsibW9kZWwiXSA9IG5ld19zdGF0ZV9kaWN0ICAjIHR5cGU6IGlnbm9yZQogICAgZGVsIGNoZWNrcG9pbnRbImdlbmVyYXRvciJdICAjIHR5cGU6IGlnbm9yZQogICAgcmV0dXJuIGNoZWNrcG9pbnQKCgpsb2FkX3ZvY29kZXJfY29uZmlnID0gQ29uZmlnTG9hZGVyW1ZvY29kZXJDb25maWddKGFzc2V0X3N0b3JlLCB2b2NvZGVyX2FyY2hzKQoKCmxvYWRfdm9jb2Rlcl9tb2RlbCA9IE1vZGVsTG9hZGVyW1ZvY29kZXIsIFZvY29kZXJDb25maWddKAogICAgYXNzZXRfc3RvcmUsCiAgICBkb3dubG9hZF9tYW5hZ2VyLAogICAgbG9hZF92b2NvZGVyX2NvbmZpZywKICAgIGNyZWF0ZV92b2NvZGVyX21vZGVsLAogICAgY29udmVydF92b2NvZGVyX2NoZWNrcG9pbnQsCikK'),
    ('seamless/src/seamless_communication/models/vocoder/builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdCwgTGlzdCwgT3B0aW9uYWwKCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzLmFyY2hfcmVnaXN0cnkgaW1wb3J0IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5CmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIuY29kZWhpZmlnYW4gaW1wb3J0IENvZGVHZW5lcmF0b3IKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy52b2NvZGVyLnZvY29kZXIgaW1wb3J0IFZvY29kZXIKCgpAZGF0YWNsYXNzCmNsYXNzIFZvY29kZXJDb25maWc6CiAgICAiIiJIb2xkcyB0aGUgY29uZmlndXJhdGlvbiBvZiBhIFZvY29kZXIgbW9kZWwuIiIiCgogICAgdXBzYW1wbGVfcmF0ZXM6IExpc3RbaW50XQogICAgdXBzYW1wbGVfa2VybmVsX3NpemVzOiBMaXN0W2ludF0KICAgIHVwc2FtcGxlX2luaXRpYWxfY2hhbm5lbDogaW50CiAgICByZXNibG9ja19rZXJuZWxfc2l6ZXM6IExpc3RbaW50XQogICAgcmVzYmxvY2tfZGlsYXRpb25fc2l6ZXM6IExpc3RbTGlzdFtpbnRdXQogICAgbW9kZWxfaW5fZGltOiBpbnQKICAgIG51bV9lbWJlZGRpbmdzOiBpbnQKICAgIGVtYmVkZGluZ19kaW06IGludAogICAgZHVyX3ByZWRpY3Rvcl9wYXJhbXM6IERpY3Rbc3RyLCBmbG9hdF0KICAgIGxhbmdfZW1iZWRkaW5nX2RpbTogaW50CiAgICBudW1fbGFuZ3M6IGludAogICAgc3Brcl9lbWJlZGRpbmdfZGltOiBpbnQKICAgIG51bV9zcGtyczogaW50CiAgICBsYW5nX3Nwa3JfaWR4X21hcDogRGljdFtzdHIsIEFueV0KCgp2b2NvZGVyX2FyY2hzID0gQXJjaGl0ZWN0dXJlUmVnaXN0cnlbVm9jb2RlckNvbmZpZ10oInZvY29kZXJfY29kZV9oaWZpZ2FuIikKCnZvY29kZXJfYXJjaCA9IHZvY29kZXJfYXJjaHMuZGVjb3JhdG9yCgoKQHZvY29kZXJfYXJjaCgiYmFzZSIpCmRlZiBfYmFzZV92b2NvZGVyKCkgLT4gVm9jb2RlckNvbmZpZzoKICAgIHJldHVybiBWb2NvZGVyQ29uZmlnKAogICAgICAgIHVwc2FtcGxlX3JhdGVzPVs1LCA0LCA0LCAyLCAyXSwKICAgICAgICB1cHNhbXBsZV9rZXJuZWxfc2l6ZXM9WzExLCA4LCA4LCA0LCA0XSwKICAgICAgICB1cHNhbXBsZV9pbml0aWFsX2NoYW5uZWw9NTEyLAogICAgICAgIHJlc2Jsb2NrX2tlcm5lbF9zaXplcz1bMywgNywgMTFdLAogICAgICAgIHJlc2Jsb2NrX2RpbGF0aW9uX3NpemVzPVtbMSwgMywgNV0sIFsxLCAzLCA1XSwgWzEsIDMsIDVdXSwKICAgICAgICBtb2RlbF9pbl9kaW09MTc5MiwKICAgICAgICBudW1fZW1iZWRkaW5ncz0xMDAwMCwKICAgICAgICBlbWJlZGRpbmdfZGltPTEyODAsCiAgICAgICAgZHVyX3ByZWRpY3Rvcl9wYXJhbXM9ewogICAgICAgICAgICAiZW5jb2Rlcl9lbWJlZF9kaW0iOiAxMjgwLAogICAgICAgICAgICAidmFyX3ByZWRfaGlkZGVuX2RpbSI6IDEyODAsCiAgICAgICAgICAgICJ2YXJfcHJlZF9rZXJuZWxfc2l6ZSI6IDMsCiAgICAgICAgICAgICJ2YXJfcHJlZF9kcm9wb3V0IjogMC41LAogICAgICAgIH0sCiAgICAgICAgbGFuZ19lbWJlZGRpbmdfZGltPTI1NiwKICAgICAgICBudW1fbGFuZ3M9MzYsCiAgICAgICAgc3Brcl9lbWJlZGRpbmdfZGltPTI1NiwKICAgICAgICBudW1fc3BrcnM9MjAwLAogICAgICAgIGxhbmdfc3Brcl9pZHhfbWFwPXt9LAogICAgKQoKCmNsYXNzIFZvY29kZXJCdWlsZGVyOgogICAgIiIiQnVpbGRzIG1vZHVsZXMgb2YgYSB2b2NvZGVyIG1vZGVsIChDb2RlIEhpZmlnYW4pIGFzIGRlc2NyaWJlZCBpbgogICAgOmNpdGU6dGBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tyZXNlYXJjaC9zcGVlY2gtcmVzeW50aGVzaXNgLgoKICAgIFRvIHR3ZWFrIHRoZSBhcmNoaXRlY3R1cmUsIHlvdSBjYW4gZGVyaXZlIGZyb20gdGhpcyBjbGFzcyBhbmQgb3ZlcnJpZGUgdGhlCiAgICBjb3JyZXNwb25kaW5nIG1ldGhvZHMuCiAgICAiIiIKCiAgICBjb25maWc6IFZvY29kZXJDb25maWcKICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXQogICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGNvbmZpZzogVm9jb2RlckNvbmZpZywKICAgICAgICAqLAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgOnBhcmFtIGNvbmZpZzoKICAgICAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgICAgIDpwYXJhbSBkZXZpY2U6CiAgICAgICAgICAgIFRoZSBkZXZpY2Ugb24gd2hpY2ggdG8gaW5pdGlhbGl6ZSBtb2R1bGVzLgogICAgICAgIDpwYXJhbSBkdHlwZToKICAgICAgICAgICAgVGhlIGRhdGEgdHlwZSBvZiBtb2R1bGUgcGFyYW1ldGVycyBhbmQgYnVmZmVycy4KICAgICAgICAiIiIKICAgICAgICBzZWxmLmNvbmZpZyA9IGNvbmZpZwogICAgICAgIHNlbGYuZGV2aWNlLCBzZWxmLmR0eXBlID0gZGV2aWNlLCBkdHlwZQoKICAgIGRlZiBidWlsZF9tb2RlbChzZWxmKSAtPiBWb2NvZGVyOgogICAgICAgICIiIkJ1aWxkIGEgbW9kZWwuIiIiCgogICAgICAgIGNvZGVfZ2VuZXJhdG9yID0gQ29kZUdlbmVyYXRvcigKICAgICAgICAgICAgc2VsZi5jb25maWcudXBzYW1wbGVfcmF0ZXMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnVwc2FtcGxlX2tlcm5lbF9zaXplcywKICAgICAgICAgICAgc2VsZi5jb25maWcudXBzYW1wbGVfaW5pdGlhbF9jaGFubmVsLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5yZXNibG9ja19rZXJuZWxfc2l6ZXMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnJlc2Jsb2NrX2RpbGF0aW9uX3NpemVzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlbF9pbl9kaW0sCiAgICAgICAgICAgIHNlbGYuY29uZmlnLm51bV9lbWJlZGRpbmdzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5lbWJlZGRpbmdfZGltLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5kdXJfcHJlZGljdG9yX3BhcmFtcywKICAgICAgICAgICAgc2VsZi5jb25maWcubGFuZ19lbWJlZGRpbmdfZGltLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5udW1fbGFuZ3MsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnNwa3JfZW1iZWRkaW5nX2RpbSwKICAgICAgICAgICAgc2VsZi5jb25maWcubnVtX3Nwa3JzLAogICAgICAgICkKICAgICAgICBjb2RlX2dlbmVyYXRvci50byhkZXZpY2U9c2VsZi5kZXZpY2UsIGR0eXBlPXNlbGYuZHR5cGUpCiAgICAgICAgdm9jb2RlciA9IFZvY29kZXIoY29kZV9nZW5lcmF0b3IsIHNlbGYuY29uZmlnLmxhbmdfc3Brcl9pZHhfbWFwKQogICAgICAgIHJldHVybiB2b2NvZGVyCgoKZGVmIGNyZWF0ZV92b2NvZGVyX21vZGVsKAogICAgY29uZmlnOiBWb2NvZGVyQ29uZmlnLAogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAopIC0+IFZvY29kZXI6CiAgICAiIiJDcmVhdGUgYSBWb2NvZGVyIG1vZGVsLgoKICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCgogICAgcmV0dXJuIFZvY29kZXJCdWlsZGVyKGNvbmZpZywgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpLmJ1aWxkX21vZGVsKCkK'),
    ('seamless/src/seamless_communication/models/vocoder/vocoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0LCBPcHRpb25hbCwgTGlzdCwgVW5pb24KaW1wb3J0IHRvcmNoCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvcgpmcm9tIHRvcmNoLm5uIGltcG9ydCBNb2R1bGUKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci5jb2RlaGlmaWdhbiBpbXBvcnQgQ29kZUdlbmVyYXRvcgoKCmNsYXNzIFZvY29kZXIoTW9kdWxlKToKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGNvZGVfZ2VuZXJhdG9yOiBDb2RlR2VuZXJhdG9yLAogICAgICAgIGxhbmdfc3Brcl9pZHhfbWFwOiBEaWN0W3N0ciwgQW55XSwKICAgICk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5jb2RlX2dlbmVyYXRvciA9IGNvZGVfZ2VuZXJhdG9yCiAgICAgICAgc2VsZi5sYW5nX3Nwa3JfaWR4X21hcCA9IGxhbmdfc3Brcl9pZHhfbWFwCgogICAgZGVmIGZvcndhcmQoCiAgICAgICAgc2VsZiwKICAgICAgICB1bml0czogVGVuc29yLAogICAgICAgIGxhbmdfbGlzdDogVW5pb25bTGlzdFtzdHJdLCBzdHJdLAogICAgICAgIHNwa3JfbGlzdDogVW5pb25bT3B0aW9uYWxbTGlzdFtpbnRdXSwgaW50XSA9IE5vbmUsCiAgICAgICAgZHVyX3ByZWRpY3Rpb246IGJvb2wgPSBUcnVlLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgIyBUT0RPOiBEbyB3ZSBuZWVkIHRoaXMgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgb3IganVzdCB1cGRhdGUgYWxsIGNhbGxpbmcgc2l0ZXM/IAogICAgICAgIGlmIGxlbih1bml0cy5zaGFwZSkgPT0gMToKICAgICAgICAgICAgdW5pdHMgPSB1bml0cy51bnNxdWVlemUoMCkgIyBhZGQgYmF0Y2ggZGltCiAgICAgICAgaWYgaXNpbnN0YW5jZShsYW5nX2xpc3QsIHN0cik6CiAgICAgICAgICAgIGxhbmdfbGlzdCA9IFtsYW5nX2xpc3RdICogdW5pdHMuc2l6ZSgwKQogICAgICAgIGlmIGlzaW5zdGFuY2Uoc3Brcl9saXN0LCBpbnQpOgogICAgICAgICAgICBzcGtyX2xpc3QgPSBbc3Brcl9saXN0XSAqIHVuaXRzLnNpemUoMCkKICAgICAgICBsYW5nX2lkeF9saXN0ID0gW3NlbGYubGFuZ19zcGtyX2lkeF9tYXBbIm11bHRpbGluZ3VhbCJdW2xdIGZvciBsIGluIGxhbmdfbGlzdF0KICAgICAgICBpZiBub3Qgc3Brcl9saXN0OgogICAgICAgICAgICBzcGtyX2xpc3QgPSBbLTEgZm9yIF8gaW4gcmFuZ2UobGVuKGxhbmdfbGlzdCkpXQogICAgICAgIHNwa3JfbGlzdCA9IFtzZWxmLmxhbmdfc3Brcl9pZHhfbWFwWyJtdWx0aXNwa3IiXVtsYW5nX2xpc3RbaV1dWzBdIGlmIHNwa3JfbGlzdFtpXSA9PSAtMSBlbHNlIHNwa3JfbGlzdFtpXSBmb3IgaSBpbiByYW5nZShsZW4oc3Brcl9saXN0KSldCiAgICAgICAgeCA9IHsKICAgICAgICAgICAgImNvZGUiOiB1bml0cy52aWV3KHVuaXRzLnNpemUoMCksIC0xKSwKICAgICAgICAgICAgInNwa3IiOiB0b3JjaC50ZW5zb3IoW3Nwa3JfbGlzdF0sIGRldmljZT11bml0cy5kZXZpY2UpLnQoKSwKICAgICAgICAgICAgImxhbmciOiB0b3JjaC50ZW5zb3IoW2xhbmdfaWR4X2xpc3RdLCBkZXZpY2U9dW5pdHMuZGV2aWNlKS50KCksCgogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZi5jb2RlX2dlbmVyYXRvcih4LCBkdXJfcHJlZGljdGlvbikgICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCg=='),
    ('seamless/src/seamless_communication/models/unit_extractor/unit_extractor.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgppbXBvcnQgbG9nZ2luZwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSB0eXBpbmcgaW1wb3J0IFVuaW9uCgppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoLm5uLmZ1bmN0aW9uYWwgYXMgRgpmcm9tIGZhaXJzZXEyLmFzc2V0cy5jYXJkIGltcG9ydCBBc3NldENhcmQKZnJvbSBmYWlyc2VxMi5kYXRhIGltcG9ydCBDb2xsYXRlcgpmcm9tIGZhaXJzZXEyLmRhdGEuYXVkaW8gaW1wb3J0IEF1ZGlvRGVjb2Rlcgpmcm9tIGZhaXJzZXEyLm1lbW9yeSBpbXBvcnQgTWVtb3J5QmxvY2sKZnJvbSBmYWlyc2VxMi5tb2RlbHMuc2VxdWVuY2UgaW1wb3J0IFNlcXVlbmNlQmF0Y2gKZnJvbSBmYWlyc2VxMi5tb2RlbHMud2F2MnZlYzIgaW1wb3J0IFdhdjJWZWMyTW9kZWwsIGxvYWRfd2F2MnZlYzJfbW9kZWwKZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBnZXRfc2Vxc19hbmRfcGFkZGluZ19tYXNrCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvciwgbm4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdF9leHRyYWN0b3Iua21lYW5zIGltcG9ydCBLbWVhbnNNb2RlbApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXRfZXh0cmFjdG9yLndhdjJ2ZWMyX2xheWVyX291dHB1dCBpbXBvcnQgKAogICAgV2F2MlZlYzJMYXllck91dHB1dE1vZGVsLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2RlciBpbXBvcnQgVm9jb2RlciwgbG9hZF92b2NvZGVyX21vZGVsCgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5JTkZPLAogICAgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKGxldmVsbmFtZSlzIC0tICUobmFtZSlzOiAlKG1lc3NhZ2UpcyIsCikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmNsYXNzIFVuaXRFeHRyYWN0b3Iobm4uTW9kdWxlKToKICAgICIiIlVuaXQgRXh0cmFjdG9yIHdoaWNoIGNvbnZlcnRzIHJhdyBhdWRpbyBpbnRvIHVuaXRzLiIiIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIG1vZGVsX25hbWVfb3JfY2FyZDogVW5pb25bc3RyLCBBc3NldENhcmRdLAogICAgICAgIGttZWFuc191cmk6IHN0ciwKICAgICAgICBkZXZpY2U6IERldmljZSwKICAgICAgICBkdHlwZTogRGF0YVR5cGUgPSB0b3JjaC5mbG9hdDMyLAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICAgICAgd2F2MnZlYzJfbW9kZWwgPSBsb2FkX3dhdjJ2ZWMyX21vZGVsKAogICAgICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlCiAgICAgICAgKQogICAgICAgIHdhdjJ2ZWMyX21vZGVsLmV2YWwoKQogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHdhdjJ2ZWMyX21vZGVsLCBXYXYyVmVjMk1vZGVsKQogICAgICAgIHNlbGYubW9kZWwgPSBXYXYyVmVjMkxheWVyT3V0cHV0TW9kZWwod2F2MnZlYzJfbW9kZWwpCiAgICAgICAgc2VsZi5kZWNvZGVfYXVkaW8gPSBBdWRpb0RlY29kZXIoZHR5cGU9dG9yY2guZmxvYXQzMiwgZGV2aWNlPWRldmljZSkKICAgICAgICBzZWxmLmNvbGxhdGUgPSBDb2xsYXRlcihwYWRfdmFsdWU9MSwgcGFkX3RvX211bHRpcGxlPTIpCiAgICAgICAgc2VsZi5rbWVhbnNfbW9kZWwgPSBLbWVhbnNNb2RlbChrbWVhbnNfdXJpLCBkZXZpY2UsIGR0eXBlKQogICAgICAgIHNlbGYuZGV2aWNlID0gZGV2aWNlCiAgICAgICAgc2VsZi5kdHlwZSA9IGR0eXBlCgogICAgQHRvcmNoLmluZmVyZW5jZV9tb2RlKCkKICAgIGRlZiBwcmVkaWN0KAogICAgICAgIHNlbGYsCiAgICAgICAgYXVkaW86IFVuaW9uW3N0ciwgVGVuc29yXSwKICAgICAgICBvdXRfbGF5ZXJfaWR4OiBpbnQsCiAgICAgICAgc2FtcGxlX3JhdGU6IGludCA9IDE2MDAwLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgaWYgaXNpbnN0YW5jZShhdWRpbywgc3RyKToKICAgICAgICAgICAgd2l0aCBQYXRoKGF1ZGlvKS5vcGVuKCJyYiIpIGFzIGZiOgogICAgICAgICAgICAgICAgYmxvY2sgPSBNZW1vcnlCbG9jayhmYi5yZWFkKCkpCiAgICAgICAgICAgIGRlY29kZWRfYXVkaW8gPSBzZWxmLmRlY29kZV9hdWRpbyhibG9jaykKICAgICAgICAgICAgYXNzZXJ0ICgKICAgICAgICAgICAgICAgIHNhbXBsZV9yYXRlID09IGRlY29kZWRfYXVkaW9bInNhbXBsZV9yYXRlIl0KICAgICAgICAgICAgKSwgZiJJbnB1dCBhdWRpbyBtdXN0IGhhdmUge3NhbXBsZV9yYXRlfSBzYW1wbGluZyByYXRlIgoKICAgICAgICBlbHNlOgogICAgICAgICAgICBhc3NlcnQgYXVkaW8uZGltKCkgPD0gMiwgIlRoZSBhdWRpbyB0ZW5zb3IgY2FuJ3QgYmUgbW9yZSB0aGFuIDIgZGltZW5zaW9ucy4iCiAgICAgICAgICAgIGlmIGF1ZGlvLmRpbSgpID09IDE6CiAgICAgICAgICAgICAgICBhdWRpbyA9IGF1ZGlvLnVuc3F1ZWV6ZSgxKQogICAgICAgICAgICBlbGlmIGF1ZGlvLmRpbSgpID09IDIgYW5kIGF1ZGlvLnNpemUoMCkgPCBhdWRpby5zaXplKDEpOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoCiAgICAgICAgICAgICAgICAgICAgIlRyYW5zcG9zaW5nIGF1ZGlvIHRlbnNvciBmcm9tIChic3osIHNlcV9sZW4pIC0+IChzZXFfbGVuLCBic3opLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGF1ZGlvID0gYXVkaW8udHJhbnNwb3NlKDAsIDEpCgogICAgICAgICAgICBkZWNvZGVkX2F1ZGlvID0gewogICAgICAgICAgICAgICAgIndhdmVmb3JtIjogYXVkaW8udG8oZHR5cGU9c2VsZi5kdHlwZSksCiAgICAgICAgICAgICAgICAic2FtcGxlX3JhdGUiOiBzYW1wbGVfcmF0ZSwKICAgICAgICAgICAgICAgICJmb3JtYXQiOiAtMSwKICAgICAgICAgICAgfQogICAgICAgIHNyYyA9IHNlbGYuY29sbGF0ZShkZWNvZGVkX2F1ZGlvKVsid2F2ZWZvcm0iXQogICAgICAgIHNlcXMsIHBhZGRpbmdfbWFzayA9IGdldF9zZXFzX2FuZF9wYWRkaW5nX21hc2soc3JjKQogICAgICAgIHNlcXMgPSBzZXFzLnZpZXcoMSwgLTEpCiAgICAgICAgc2VxcyA9IEYubGF5ZXJfbm9ybShzZXFzLCBzZXFzLnNoYXBlKQogICAgICAgIGJhdGNoID0gU2VxdWVuY2VCYXRjaChzZXFzPXNlcXMsIHBhZGRpbmdfbWFzaz1wYWRkaW5nX21hc2spCiAgICAgICAgZmVhdHVyZXMgPSBzZWxmLm1vZGVsKGJhdGNoLCBvdXRfbGF5ZXJfaWR4KS5zcXVlZXplKDApCiAgICAgICAgdW5pdHMgPSBzZWxmLmttZWFuc19tb2RlbChmZWF0dXJlcykKICAgICAgICByZXR1cm4gdW5pdHMgICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIHJlc3ludGhlc2l6ZV9hdWRpbygKICAgICAgICB1bml0czogVGVuc29yLAogICAgICAgIHNyY19sYW5nOiBzdHIsCiAgICAgICAgZGV2aWNlOiBEZXZpY2UsCiAgICAgICAgZHR5cGU6IERhdGFUeXBlLAogICAgICAgIHZvY29kZXJfbmFtZTogc3RyID0gInZvY29kZXJfdjIiLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgdm9jb2RlciA9IGxvYWRfdm9jb2Rlcl9tb2RlbCh2b2NvZGVyX25hbWUsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKQogICAgICAgIHZvY29kZXIuZXZhbCgpCiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2Uodm9jb2RlciwgVm9jb2RlcikKICAgICAgICB3YXYgPSB2b2NvZGVyKHVuaXRzLCBzcmNfbGFuZywgc3Brcj0tMSwgZHVyX3ByZWRpY3Rpb249VHJ1ZSkKICAgICAgICByZXR1cm4gd2F2ICAjIHR5cGU6IGlnbm9yZVtuby1hbnktcmV0dXJuXQo='),
    ('seamless/src/seamless_communication/models/unit_extractor/wav2vec2_layer_output.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbAoKaW1wb3J0IHRvcmNoCmltcG9ydCB0b3JjaC5ubiBhcyBubgpmcm9tIGZhaXJzZXEyLm1vZGVscy5zZXF1ZW5jZSBpbXBvcnQgU2VxdWVuY2VCYXRjaApmcm9tIGZhaXJzZXEyLm1vZGVscy53YXYydmVjMiBpbXBvcnQgKAogICAgV2F2MlZlYzJDb25maWcsCiAgICBXYXYyVmVjMkVuY29kZXJDb25maWcsCiAgICBXYXYyVmVjMkZyb250ZW5kLAogICAgV2F2MlZlYzJNb2RlbCwKICAgIHdhdjJ2ZWMyX2FyY2gsCikKZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBQYWRkaW5nTWFzawpmcm9tIGZhaXJzZXEyLm5uLnRyYW5zZm9ybWVyIGltcG9ydCBUcmFuc2Zvcm1lckVuY29kZXIsIFRyYW5zZm9ybWVyTm9ybU9yZGVyCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvcgoKCmRlZiBfZW5jb2Rlcl94bHNyMl8xYl92MigpIC0+IFdhdjJWZWMyRW5jb2RlckNvbmZpZzoKICAgIGxheWVyX2Rlc2NzID0gWyg1MTIsIDEwLCA1KV0gKyBbKDUxMiwgMywgMildICogNCArIFsoNTEyLCAyLCAyKV0gKiAyCgogICAgcmV0dXJuIFdhdjJWZWMyRW5jb2RlckNvbmZpZygKICAgICAgICBtb2RlbF9kaW09MTI4MCwKICAgICAgICBtYXhfc2VxX2xlbj00MDk2LAogICAgICAgIGZlYXR1cmVfZGltPTUxMiwKICAgICAgICB1c2VfZmJhbms9RmFsc2UsCiAgICAgICAgZmlyc3RfcGFzc19kcm9wb3V0X3A9MC4wLAogICAgICAgIGxheWVyX25vcm1fZmVhdHVyZXM9RmFsc2UsCiAgICAgICAgZmVhdHVyZV9leHRyYWN0b3JfbGF5ZXJfZGVzY3M9bGF5ZXJfZGVzY3MsCiAgICAgICAgZmVhdHVyZV9leHRyYWN0b3JfYmlhcz1UcnVlLAogICAgICAgIGZlYXR1cmVfZXh0cmFjdG9yX2xheWVyX25vcm1fY29udnM9VHJ1ZSwKICAgICAgICBmZWF0dXJlX2dyYWRfc2NhbGU9MS4wLAogICAgICAgIG51bV9mYmFua19jaGFubmVscz0wLAogICAgICAgIGZiYW5rX3N0cmlkZT0wLAogICAgICAgIHNhbXBsZV9mYmFua19ldmVyeV9rPTAsCiAgICAgICAgcG9zX2VuY29kZXJfdHlwZT0iY29udiIsCiAgICAgICAgcG9zX2VuY29kZXJfZGVwdGg9MSwKICAgICAgICBwb3NfY29udl9rZXJuZWxfc2l6ZT0xMjgsCiAgICAgICAgbnVtX3Bvc19jb252X2dyb3Vwcz0xNiwKICAgICAgICB1c2VfY29uZm9ybWVyPUZhbHNlLAogICAgICAgIG51bV9lbmNvZGVyX2xheWVycz00OCwKICAgICAgICBudW1fZW5jb2Rlcl9hdHRuX2hlYWRzPTE2LAogICAgICAgIGZmbl9pbm5lcl9kaW09NTEyMCwKICAgICAgICBkcm9wb3V0X3A9MC4xLAogICAgICAgIGF0dG5fZHJvcG91dF9wPTAuMSwKICAgICAgICBsYXllcl9kcm9wX3A9MC4wLAogICAgICAgIG5vcm1fb3JkZXI9VHJhbnNmb3JtZXJOb3JtT3JkZXIuUFJFLAogICAgICAgIGRlcHRod2lzZV9jb252X2tlcm5lbF9zaXplPTAsCiAgICApCgoKQHdhdjJ2ZWMyX2FyY2goInhsc3IyXzFiX3YyIikKZGVmIF94bHNyMl8xYl92MigpIC0+IFdhdjJWZWMyQ29uZmlnOgogICAgZW5jb2Rlcl9jb25maWcgPSBfZW5jb2Rlcl94bHNyMl8xYl92MigpCgogICAgcmV0dXJuIFdhdjJWZWMyQ29uZmlnKAogICAgICAgIGVuY29kZXJfY29uZmlnLAogICAgICAgIGZpbmFsX2RpbT0xMDI0LAogICAgICAgIGZpbmFsX3Byb2pfYmlhcz1UcnVlLAogICAgICAgIHRlbXBvcmFsX21hc2tfc3Bhbl9sZW49MTAsCiAgICAgICAgbWF4X3RlbXBvcmFsX21hc2tfcHJvYj0wLjY1LAogICAgICAgIHNwYXRpYWxfbWFza19zcGFuX2xlbj0xMCwKICAgICAgICBtYXhfc3BhdGlhbF9tYXNrX3Byb2I9MC4wLAogICAgICAgIHF1YW50aXplZF9kaW09MTAyNCwKICAgICAgICBudW1fY29kZWJvb2tzPTIsCiAgICAgICAgbnVtX2NvZGVib29rX2VudHJpZXM9MzIwLAogICAgICAgIGNvZGVib29rX3NhbXBsaW5nX3RlbXBlcmF0dXJlPSgyLCAwLjEsIDAuOTk5OTk1KSwKICAgICAgICBudW1fZGlzdHJhY3RvcnM9MTAwLAogICAgICAgIGxvZ2l0X3RlbXA9MC4xLAogICAgICAgIGRpdmVyc2l0eV9sb3NzX3dlaWdodD0wLjEsCiAgICApCgoKY2xhc3MgV2F2MlZlYzJMYXllck91dHB1dE1vZGVsKG5uLk1vZHVsZSk6CiAgICBlbmNvZGVyX2Zyb250ZW5kOiBXYXYyVmVjMkZyb250ZW5kCiAgICBlbmNvZGVyOiBUcmFuc2Zvcm1lckVuY29kZXIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdzJ2MjogV2F2MlZlYzJNb2RlbCk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIHNlbGYuZW5jb2Rlcl9mcm9udGVuZCA9IHcydjIuZW5jb2Rlcl9mcm9udGVuZAogICAgICAgIHNlbGYuZW5jb2RlciA9IHcydjIuZW5jb2RlcgoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgZm9yd2FyZChzZWxmLCBiYXRjaDogU2VxdWVuY2VCYXRjaCwgb3V0X2xheWVyX2lkeDogaW50KSAtPiBUZW5zb3I6CiAgICAgICAgIiIiCiAgICAgICAgOnBhcmFtIGJhdGNoOgogICAgICAgICAgICBUaGUgYmF0Y2ggb2Ygc2VxdWVuY2VzIHRvIHByb2Nlc3MuCiAgICAgICAgIiIiCiAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrID0gc2VsZi5lbmNvZGVyX2Zyb250ZW5kKGJhdGNoLnNlcXMsIGJhdGNoLnBhZGRpbmdfbWFzaykKCiAgICAgICAgdzJ2Ml9sYXllcl9vdXRwdXQgPSBOb25lCgogICAgICAgIGRlZiBob29rKAogICAgICAgICAgICBsYXllcl9pZHg6IGludCwKICAgICAgICAgICAgbGF5ZXJfb3V0cHV0OiBUZW5zb3IsCiAgICAgICAgICAgIGxheWVyX3BhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdLAogICAgICAgICAgICBudW1fbGF5ZXJzOiBpbnQsCiAgICAgICAgKSAtPiBib29sOgogICAgICAgICAgICBub25sb2NhbCB3MnYyX2xheWVyX291dHB1dAoKICAgICAgICAgICAgaWYgbGF5ZXJfaWR4ID09IG91dF9sYXllcl9pZHg6CiAgICAgICAgICAgICAgICB3MnYyX2xheWVyX291dHB1dCA9IGxheWVyX291dHB1dAoKICAgICAgICAgICAgICAgICMgV2UgZG9uJ3QgbmVlZCB0byBleGVjdXRlIHRoZSByZW1haW5pbmcgbGF5ZXJzLgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICB3aXRoIHNlbGYuZW5jb2Rlci5yZWdpc3Rlcl9sYXllcl9vdXRwdXRfaG9vayhob29rKToKICAgICAgICAgICAgXywgXyA9IHNlbGYuZW5jb2RlcihzZXFzLCBwYWRkaW5nX21hc2spCgogICAgICAgIGFzc2VydCB3MnYyX2xheWVyX291dHB1dCBpcyBub3QgTm9uZQoKICAgICAgICByZXR1cm4gdzJ2Ml9sYXllcl9vdXRwdXQK'),
    ('seamless/src/seamless_communication/models/unit_extractor/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXRfZXh0cmFjdG9yLmttZWFucyBpbXBvcnQgKAogICAgS21lYW5zTW9kZWwgYXMgS21lYW5zTW9kZWwsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0X2V4dHJhY3Rvci51bml0X2V4dHJhY3RvciBpbXBvcnQgKAogICAgVW5pdEV4dHJhY3RvciBhcyBVbml0RXh0cmFjdG9yLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdF9leHRyYWN0b3Iud2F2MnZlYzJfbGF5ZXJfb3V0cHV0IGltcG9ydCAoCiAgICBXYXYyVmVjMkxheWVyT3V0cHV0TW9kZWwgYXMgV2F2MlZlYzJMYXllck91dHB1dE1vZGVsLAopCg=='),
    ('seamless/src/seamless_communication/models/unit_extractor/kmeans.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHRvcmNoCmZyb20gZmFpcnNlcTIuYXNzZXRzIGltcG9ydCBkb3dubG9hZF9tYW5hZ2VyCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvciwgbm4KCgpjbGFzcyBLbWVhbnNNb2RlbChubi5Nb2R1bGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGttZWFuc191cmk6IHN0ciwgZGV2aWNlOiBEZXZpY2UsIGR0eXBlOiBEYXRhVHlwZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAga21fcGF0aCA9IGRvd25sb2FkX21hbmFnZXIuZG93bmxvYWRfY2hlY2twb2ludChrbWVhbnNfdXJpLCBrbWVhbnNfdXJpKQogICAgICAgIGttX21vZGVsID0gbnAubG9hZChrbV9wYXRoKQogICAgICAgIGNlbnRyb2lkc19udW1weSA9IGttX21vZGVsLnRyYW5zcG9zZSgpCiAgICAgICAgY2VudHJvaWRzID0gdG9yY2guZnJvbV9udW1weShjZW50cm9pZHNfbnVtcHkpCiAgICAgICAgc2VsZi5jZW50cm9pZHMgPSBjZW50cm9pZHMudG8oZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpCiAgICAgICAgc2VsZi5jZW50cm9pZF9ub3JtID0gKHNlbGYuY2VudHJvaWRzKioyKS5zdW0oMCwga2VlcGRpbXM9VHJ1ZSkKCiAgICBkZWYgZm9yd2FyZChzZWxmLCB4OiBUZW5zb3IpIC0+IFRlbnNvcjoKICAgICAgICBkaXN0OiBUZW5zb3IgPSAoCiAgICAgICAgICAgIHgucG93KDIpLnN1bSgxLCBrZWVwZGltPVRydWUpCiAgICAgICAgICAgIC0gMiAqIHRvcmNoLm1hdG11bCh4LCBzZWxmLmNlbnRyb2lkcykKICAgICAgICAgICAgKyBzZWxmLmNlbnRyb2lkX25vcm0KICAgICAgICApCiAgICAgICAgcmV0dXJuIGRpc3QuYXJnbWluKGRpbT0tMSkK'),
    ('seamless/src/seamless_communication/models/unity/fft_decoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBJdGVyYWJsZSwgT3B0aW9uYWwsIFR1cGxlLCBmaW5hbAoKZnJvbSBmYWlyc2VxMi5ubi5tb2R1bGVfbGlzdCBpbXBvcnQgTW9kdWxlTGlzdApmcm9tIGZhaXJzZXEyLm5uLm5vcm1hbGl6YXRpb24gaW1wb3J0IExheWVyTm9ybQpmcm9tIGZhaXJzZXEyLm5uLnBhZGRpbmcgaW1wb3J0IFBhZGRpbmdNYXNrCmZyb20gZmFpcnNlcTIubm4udHJhbnNmb3JtZXIgaW1wb3J0IFRyYW5zZm9ybWVyTm9ybU9yZGVyLCBjcmVhdGVfc3RhbmRhcmRfbGF5ZXJfbm9ybQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZSwgZmluYWxvdmVycmlkZQpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKZnJvbSB0b3JjaC5ubiBpbXBvcnQgTW9kdWxlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmZmdF9kZWNvZGVyX2xheWVyIGltcG9ydCAoCiAgICBGZWVkRm9yd2FyZFRyYW5zZm9ybWVyTGF5ZXIsCikKCgpAZmluYWwKY2xhc3MgRmVlZEZvcndhcmRUcmFuc2Zvcm1lcihNb2R1bGUpOgogICAgIiIiUmVwcmVzZW50cyBhIEZlZWRmb3J3YXJkIFRyYW5zZm9ybWVyIGRlY29kZXIuIiIiCgogICAgbW9kZWxfZGltOiBpbnQKICAgIGxheWVyX25vcm06IE9wdGlvbmFsW0xheWVyTm9ybV0KICAgIG5vcm1fb3JkZXI6IFRyYW5zZm9ybWVyTm9ybU9yZGVyCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgbGF5ZXJzOiBJdGVyYWJsZVtGZWVkRm9yd2FyZFRyYW5zZm9ybWVyTGF5ZXJdLAogICAgICAgICosCiAgICAgICAgbm9ybV9vcmRlcjogVHJhbnNmb3JtZXJOb3JtT3JkZXIgPSBUcmFuc2Zvcm1lck5vcm1PcmRlci5QT1NULAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgOnBhcmFtIGxheWVyczoKICAgICAgICAgICAgVGhlIGRlY29kZXIgbGF5ZXJzLgogICAgICAgIDpwYXJhbSBub3JtX29yZGVyOgogICAgICAgICAgICBUaGUgTGF5ZXIgTm9ybWFsaXphdGlvbiBvcmRlciB0byB1c2UuCiAgICAgICAgIiIiCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIGxheWVyX2xpc3QgPSBNb2R1bGVMaXN0KGxheWVycykKCiAgICAgICAgaWYgbm90IGxheWVyX2xpc3Q6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImBsYXllcnNgIG11c3QgYmUgbm9uLWVtcHR5LiIpCgogICAgICAgIHNlbGYubW9kZWxfZGltID0gbGF5ZXJfbGlzdFswXS5tb2RlbF9kaW0KCiAgICAgICAgc2VsZi5sYXllcnMgPSBsYXllcl9saXN0CgogICAgICAgIGlmIG5vcm1fb3JkZXIgIT0gVHJhbnNmb3JtZXJOb3JtT3JkZXIuUE9TVDoKICAgICAgICAgICAgc2VsZi5sYXllcl9ub3JtID0gY3JlYXRlX3N0YW5kYXJkX2xheWVyX25vcm0oCiAgICAgICAgICAgICAgICBzZWxmLm1vZGVsX2RpbSwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUKICAgICAgICAgICAgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYucmVnaXN0ZXJfbW9kdWxlKCJsYXllcl9ub3JtIiwgTm9uZSkKCiAgICAgICAgc2VsZi5ub3JtX29yZGVyID0gbm9ybV9vcmRlcgoKICAgIEBmaW5hbG92ZXJyaWRlCiAgICBkZWYgZm9yd2FyZCgKICAgICAgICBzZWxmLAogICAgICAgIHNlcXM6IFRlbnNvciwKICAgICAgICBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwKICAgICAgICBmaWxtX2NvbmRfZW1iOiBPcHRpb25hbFtUZW5zb3JdID0gTm9uZSwKICAgICkgLT4gVHVwbGVbVGVuc29yLCBPcHRpb25hbFtQYWRkaW5nTWFza11dOgogICAgICAgIGZvciBsYXllciBpbiBzZWxmLmxheWVycy5kcm9wX2l0ZXIoKToKICAgICAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrID0gbGF5ZXIoc2VxcywgcGFkZGluZ19tYXNrLCBmaWxtX2NvbmRfZW1iPWZpbG1fY29uZF9lbWIpCgogICAgICAgIGlmIHNlbGYubGF5ZXJfbm9ybSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VxcyA9IHNlbGYubGF5ZXJfbm9ybShzZXFzKQoKICAgICAgICByZXR1cm4gc2VxcywgcGFkZGluZ19tYXNrCgogICAgZGVmIGV4dHJhX3JlcHIoc2VsZikgLT4gc3RyOgogICAgICAgICIiIjptZXRhIHByaXZhdGU6IiIiCiAgICAgICAgcyA9IHN1cGVyKCkuZXh0cmFfcmVwcigpCgogICAgICAgIHJldHVybiBmIntzfSwgbm9ybV9vcmRlcj17c2VsZi5ub3JtX29yZGVyfSIK'),
    ('seamless/src/seamless_communication/models/unity/nar_decoder_frontend.py', ''),
    ('seamless/src/seamless_communication/models/unity/unit_tokenizer.py', ''),
    ('seamless/src/seamless_communication/models/unity/adaptor_block.py', ''),
    ('seamless/src/seamless_communication/models/unity/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmJ1aWxkZXIgaW1wb3J0IFVuaXRZQnVpbGRlciBhcyBVbml0WUJ1aWxkZXIKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5idWlsZGVyIGltcG9ydCBVbml0WUNvbmZpZyBhcyBVbml0WUNvbmZpZwpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmJ1aWxkZXIgaW1wb3J0ICgKICAgIGNyZWF0ZV91bml0eV9tb2RlbCBhcyBjcmVhdGVfdW5pdHlfbW9kZWwsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5idWlsZGVyIGltcG9ydCB1bml0eV9hcmNoIGFzIHVuaXR5X2FyY2gKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5idWlsZGVyIGltcG9ydCB1bml0eV9hcmNocyBhcyB1bml0eV9hcmNocwpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmNoYXJfdG9rZW5pemVyIGltcG9ydCAoCiAgICBDaGFyVG9rZW5pemVyIGFzIENoYXJUb2tlbml6ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5jaGFyX3Rva2VuaXplciBpbXBvcnQgKAogICAgVW5pdFlDaGFyVG9rZW5pemVyTG9hZGVyIGFzIFVuaXRZQ2hhclRva2VuaXplckxvYWRlciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmNoYXJfdG9rZW5pemVyIGltcG9ydCAoCiAgICBsb2FkX3VuaXR5X2NoYXJfdG9rZW5pemVyIGFzIGxvYWRfdW5pdHlfY2hhcl90b2tlbml6ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5mZnRfZGVjb2RlciBpbXBvcnQgKAogICAgRmVlZEZvcndhcmRUcmFuc2Zvcm1lciBhcyBGZWVkRm9yd2FyZFRyYW5zZm9ybWVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkuZmZ0X2RlY29kZXJfbGF5ZXIgaW1wb3J0ICgKICAgIEZlZWRGb3J3YXJkVHJhbnNmb3JtZXJMYXllciBhcyBGZWVkRm9yd2FyZFRyYW5zZm9ybWVyTGF5ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5maWxtIGltcG9ydCBGaUxNCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubGVuZ3RoX3JlZ3VsYXRvciBpbXBvcnQgKAogICAgSGFyZFVwc2FtcGxpbmcgYXMgSGFyZFVwc2FtcGxpbmcsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5sZW5ndGhfcmVndWxhdG9yIGltcG9ydCAoCiAgICBWYXJpYW5jZUFkYXB0b3IgYXMgVmFyaWFuY2VBZGFwdG9yLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubGVuZ3RoX3JlZ3VsYXRvciBpbXBvcnQgKAogICAgVmFyaWFuY2VQcmVkaWN0b3IgYXMgVmFyaWFuY2VQcmVkaWN0b3IsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5sb2FkZXIgaW1wb3J0ICgKICAgIGxvYWRfZ2Ntdm5fc3RhdHMgYXMgbG9hZF9nY212bl9zdGF0cywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmxvYWRlciBpbXBvcnQgKAogICAgbG9hZF91bml0eV9jb25maWcgYXMgbG9hZF91bml0eV9jb25maWcsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5sb2FkZXIgaW1wb3J0ICgKICAgIGxvYWRfdW5pdHlfbW9kZWwgYXMgbG9hZF91bml0eV9tb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmxvYWRlciBpbXBvcnQgKAogICAgbG9hZF91bml0eV90ZXh0X3Rva2VuaXplciBhcyBsb2FkX3VuaXR5X3RleHRfdG9rZW5pemVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubG9hZGVyIGltcG9ydCAoCiAgICBsb2FkX3VuaXR5X3VuaXRfdG9rZW5pemVyIGFzIGxvYWRfdW5pdHlfdW5pdF90b2tlbml6ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5tb2RlbCBpbXBvcnQgVW5pdFlNb2RlbCBhcyBVbml0WU1vZGVsCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubW9kZWwgaW1wb3J0ICgKICAgIFVuaXRZTkFSVDJVTW9kZWwgYXMgVW5pdFlOQVJUMlVNb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5Lm1vZGVsIGltcG9ydCBVbml0WU91dHB1dCBhcyBVbml0WU91dHB1dApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5Lm1vZGVsIGltcG9ydCBVbml0WVQyVU1vZGVsIGFzIFVuaXRZVDJVTW9kZWwKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5tb2RlbCBpbXBvcnQgVW5pdFlYMlRNb2RlbCBhcyBVbml0WVgyVE1vZGVsCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubmFyX2RlY29kZXJfZnJvbnRlbmQgaW1wb3J0ICgKICAgIE5BUkRlY29kZXJGcm9udGVuZCBhcyBOQVJEZWNvZGVyRnJvbnRlbmQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS50MnVfYnVpbGRlciBpbXBvcnQgKAogICAgVW5pdFlOQVJUMlVCdWlsZGVyIGFzIFVuaXRZTkFSVDJVQnVpbGRlciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LnQydV9idWlsZGVyIGltcG9ydCAoCiAgICBVbml0WVQyVUJ1aWxkZXIgYXMgVW5pdFlUMlVCdWlsZGVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkudDJ1X2J1aWxkZXIgaW1wb3J0ICgKICAgIFVuaXRZVDJVQ29uZmlnIGFzIFVuaXRZVDJVQ29uZmlnLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkudDJ1X2J1aWxkZXIgaW1wb3J0ICgKICAgIGNyZWF0ZV91bml0eV90MnVfbW9kZWwgYXMgY3JlYXRlX3VuaXR5X3QydV9tb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LnQydV9idWlsZGVyIGltcG9ydCAoCiAgICB1bml0eV90MnVfYXJjaCBhcyB1bml0eV90MnVfYXJjaCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LnQydV9idWlsZGVyIGltcG9ydCAoCiAgICB1bml0eV90MnVfYXJjaHMgYXMgdW5pdHlfdDJ1X2FyY2hzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkudW5pdF90b2tlbml6ZXIgaW1wb3J0ICgKICAgIFVuaXRUb2tlbkRlY29kZXIgYXMgVW5pdFRva2VuRGVjb2RlciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LnVuaXRfdG9rZW5pemVyIGltcG9ydCAoCiAgICBVbml0VG9rZW5FbmNvZGVyIGFzIFVuaXRUb2tlbkVuY29kZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS51bml0X3Rva2VuaXplciBpbXBvcnQgKAogICAgVW5pdFRva2VuaXplciBhcyBVbml0VG9rZW5pemVyLAopCg=='),
    ('seamless/src/seamless_communication/models/unity/loader.py', ''),
    ('seamless/src/seamless_communication/models/unity/builder.py', ''),
    ('seamless/src/seamless_communication/models/unity/length_regulator.py', ''),
    ('seamless/src/seamless_communication/models/unity/char_tokenizer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbCwgVW5pb24sIGZpbmFsCgpmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgKAogICAgQXNzZXREb3dubG9hZE1hbmFnZXIsCiAgICBBc3NldFN0b3JlLAogICAgYXNzZXRfc3RvcmUsCiAgICBkb3dubG9hZF9tYW5hZ2VyLAopCmZyb20gZmFpcnNlcTIuYXNzZXRzLmNhcmQgaW1wb3J0IEFzc2V0Q2FyZApmcm9tIGZhaXJzZXEyLmRhdGEudGV4dCBpbXBvcnQgKAogICAgU2VudGVuY2VQaWVjZURlY29kZXIsCiAgICBTZW50ZW5jZVBpZWNlRW5jb2RlciwKICAgIFNlbnRlbmNlUGllY2VNb2RlbCwKICAgIFRleHRUb2tlbkRlY29kZXIsCiAgICBUZXh0VG9rZW5FbmNvZGVyLAogICAgVGV4dFRva2VuaXplciwKICAgIHZvY2FiX2luZm9fZnJvbV9zZW50ZW5jZXBpZWNlLAopCmZyb20gZmFpcnNlcTIuZGF0YS50eXBpbmcgaW1wb3J0IFBhdGhMaWtlCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEZXZpY2UsIGZpbmFsb3ZlcnJpZGUKCgpAZmluYWwKY2xhc3MgQ2hhclRva2VuaXplcihUZXh0VG9rZW5pemVyKToKICAgICIiIkEgY2hhcmFjdGVyLWxldmVsIHRva2VuaXplciB1c2VkIGR1cmluZyBub24tYXV0b3JlZ3Jlc3NpdmUgVDJVIGRlY29kaW5nLiIiIgoKICAgIG1vZGVsOiBTZW50ZW5jZVBpZWNlTW9kZWwKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcGF0aG5hbWU6IFBhdGhMaWtlKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIDpwYXJhbSBwYXRobmFtZToKICAgICAgICAgICAgVGhlIHBhdGhuYW1lIG9mIHRoZSBTZW50ZW5jZVBpZWNlIG1vZGVsIGZpbGUuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5tb2RlbCA9IFNlbnRlbmNlUGllY2VNb2RlbChwYXRobmFtZSkKCiAgICAgICAgdm9jYWJfaW5mbyA9IHZvY2FiX2luZm9fZnJvbV9zZW50ZW5jZXBpZWNlKHNlbGYubW9kZWwpCgogICAgICAgIHN1cGVyKCkuX19pbml0X18odm9jYWJfaW5mbykKCiAgICBAZmluYWxvdmVycmlkZQogICAgZGVmIGNyZWF0ZV9lbmNvZGVyKAogICAgICAgIHNlbGYsCiAgICAgICAgdGFzazogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgbGFuZzogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgbW9kZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBwaW5fbWVtb3J5OiBib29sID0gRmFsc2UsCiAgICApIC0+IFRleHRUb2tlbkVuY29kZXI6CiAgICAgICAgIiIiQ3JlYXRlcyBhIGNoYXJhY3RlciBsZXZlbCBlbmNvZGVyLiIiIgogICAgICAgIHJldHVybiBTZW50ZW5jZVBpZWNlRW5jb2RlcigKICAgICAgICAgICAgc2VsZi5tb2RlbCwKICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgcGluX21lbW9yeT1waW5fbWVtb3J5LAogICAgICAgICkKCiAgICBAZmluYWxvdmVycmlkZQogICAgZGVmIGNyZWF0ZV9yYXdfZW5jb2RlcigKICAgICAgICBzZWxmLCAqLCBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLCBwaW5fbWVtb3J5OiBib29sID0gRmFsc2UKICAgICkgLT4gVGV4dFRva2VuRW5jb2RlcjoKICAgICAgICByZXR1cm4gU2VudGVuY2VQaWVjZUVuY29kZXIoc2VsZi5tb2RlbCwgZGV2aWNlPWRldmljZSwgcGluX21lbW9yeT1waW5fbWVtb3J5KQoKICAgIEBmaW5hbG92ZXJyaWRlCiAgICBkZWYgY3JlYXRlX2RlY29kZXIoc2VsZikgLT4gVGV4dFRva2VuRGVjb2RlcjoKICAgICAgICByZXR1cm4gU2VudGVuY2VQaWVjZURlY29kZXIoc2VsZi5tb2RlbCkKCgpjbGFzcyBVbml0WUNoYXJUb2tlbml6ZXJMb2FkZXI6CiAgICAiIiJMb2FkcyBjaGFyYWN0ZXItbGV2ZWwgdG9rZW5pemVycyBvZiBVbml0WSBtb2RlbHMuIiIiCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsIGFzc2V0X3N0b3JlOiBBc3NldFN0b3JlLCBkb3dubG9hZF9tYW5hZ2VyOiBBc3NldERvd25sb2FkTWFuYWdlcgogICAgKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIDpwYXJhbSBhc3NldF9zdG9yZToKICAgICAgICAgICAgVGhlIGFzc2V0IHN0b3JlIHRvIHJldHJpZXZlIHRoZSBtb2RlbCBpbmZvcm1hdGlvbi4KICAgICAgICA6cGFyYW0gZG93bmxvYWRfbWFuYWdlcjoKICAgICAgICAgICAgVGhlIGRvd25sb2FkIG1hbmFnZXIgdG8gdXNlLgogICAgICAgICIiIgogICAgICAgIHNlbGYuYXNzZXRfc3RvcmUgPSBhc3NldF9zdG9yZQogICAgICAgIHNlbGYuZG93bmxvYWRfbWFuYWdlciA9IGRvd25sb2FkX21hbmFnZXIKCiAgICBkZWYgX19jYWxsX18oCiAgICAgICAgc2VsZiwKICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ6IFVuaW9uW3N0ciwgQXNzZXRDYXJkXSwKICAgICAgICBmb3JjZTogYm9vbCA9IEZhbHNlLAogICAgICAgIHByb2dyZXNzOiBib29sID0gVHJ1ZSwKICAgICkgLT4gQ2hhclRva2VuaXplcjoKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gbW9kZWxfbmFtZV9vcl9jYXJkOgogICAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgb3IgYW4gYWxyZWFkeSBsb2FkZWQgQXNzZXRDYXJkCiAgICAgICAgIiIiCgogICAgICAgIGlmIGlzaW5zdGFuY2UobW9kZWxfbmFtZV9vcl9jYXJkLCBBc3NldENhcmQpOgogICAgICAgICAgICBjYXJkID0gbW9kZWxfbmFtZV9vcl9jYXJkCiAgICAgICAgZWxzZToKICAgICAgICAgICAgY2FyZCA9IHNlbGYuYXNzZXRfc3RvcmUucmV0cmlldmVfY2FyZChtb2RlbF9uYW1lX29yX2NhcmQpCgogICAgICAgIHVyaSA9IGNhcmQuZmllbGQoImNoYXJfdG9rZW5pemVyIikuYXNfdXJpKCkKCiAgICAgICAgcGF0aG5hbWUgPSBzZWxmLmRvd25sb2FkX21hbmFnZXIuZG93bmxvYWRfdG9rZW5pemVyKAogICAgICAgICAgICB1cmksIGNhcmQubmFtZSwgZm9yY2U9Zm9yY2UsIHByb2dyZXNzPXByb2dyZXNzCiAgICAgICAgKQoKICAgICAgICByZXR1cm4gQ2hhclRva2VuaXplcihwYXRobmFtZSkKCgpsb2FkX3VuaXR5X2NoYXJfdG9rZW5pemVyID0gVW5pdFlDaGFyVG9rZW5pemVyTG9hZGVyKGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyKQo='),
    ('seamless/src/seamless_communication/models/unity/model.py', ''),
    ('seamless/src/seamless_communication/models/unity/film.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5ubi5wcm9qZWN0aW9uIGltcG9ydCBMaW5lYXIKZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERhdGFUeXBlLCBEZXZpY2UKZnJvbSB0b3JjaCBpbXBvcnQgVGVuc29yCmZyb20gdG9yY2gubm4gaW1wb3J0IE1vZHVsZSwgUGFyYW1ldGVyCgoKY2xhc3MgRmlMTShNb2R1bGUpOgogICAgIiIiCiAgICBBIEZlYXR1cmUtd2lzZSBMaW5lYXIgTW9kdWxhdGlvbiBMYXllciBmcm9tCiAgICAnRmlMTTogVmlzdWFsIFJlYXNvbmluZyB3aXRoIGEgR2VuZXJhbCBDb25kaXRpb25pbmcgTGF5ZXInCiAgICAiIiIKCiAgICBwcm9qOiBMaW5lYXIKICAgIHNfZ2FtbWE6IFBhcmFtZXRlcgogICAgc19iZXRhOiBQYXJhbWV0ZXIKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBjb25kX2RpbTogaW50LAogICAgICAgIGVtYmVkX2RpbTogaW50LAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQoKICAgICAgICBzZWxmLnByb2ogPSBMaW5lYXIoCiAgICAgICAgICAgIGNvbmRfZGltLCAyICogZW1iZWRfZGltLCBiaWFzPVRydWUsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlCiAgICAgICAgKQoKICAgICAgICBzZWxmLnNfZ2FtbWEgPSBQYXJhbWV0ZXIoCiAgICAgICAgICAgIHRvcmNoLm9uZXMoCiAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgICAgIGR0eXBlPWR0eXBlLAogICAgICAgICAgICApLAogICAgICAgICAgICByZXF1aXJlc19ncmFkPVRydWUsCiAgICAgICAgKQoKICAgICAgICBzZWxmLnNfYmV0YSA9IFBhcmFtZXRlcigKICAgICAgICAgICAgdG9yY2gub25lcygKICAgICAgICAgICAgICAgIDEsCiAgICAgICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIHJlcXVpcmVzX2dyYWQ9VHJ1ZSwKICAgICAgICApCgogICAgZGVmIGZvcndhcmQoc2VsZiwgeDogVGVuc29yLCBjb25kX2VtYnM6IFRlbnNvcikgLT4gVGVuc29yOgogICAgICAgICIiIgogICAgICAgIHggLS0gW0IsIFQsIEhdCiAgICAgICAgY29uZF9lbWIgLS0gW0IsIDEsIENdCiAgICAgICAgIiIiCiAgICAgICAgIyBnZXQgdHJhaW5hYmxlIGdhbW1hLCBiZXRhCiAgICAgICAgZ2FtbWFzLCBiZXRhcyA9IHNlbGYucHJvaihjb25kX2VtYnMpLmNodW5rKDIsIGRpbT0tMSkgICMgQiB4IDEgeCBICgogICAgICAgICMgYXBwbHkgZmlsbQogICAgICAgIGdhbW1hcyA9IHNlbGYuc19nYW1tYSAqIGdhbW1hcy5leHBhbmRfYXMoeCkKICAgICAgICBiZXRhcyA9IHNlbGYuc19iZXRhICogYmV0YXMuZXhwYW5kX2FzKHgpCgogICAgICAgIHJldHVybiAoZ2FtbWFzICsgMS4wKSAqIHggKyBiZXRhcyAgIyB0eXBlOiBpZ25vcmVbbm8tYW55LXJldHVybl0K'),
    ('seamless/src/seamless_communication/models/unity/t2u_builder.py', ''),
    ('seamless/src/seamless_communication/models/unity/fft_decoder_layer.py', ''),
    ('seamless/src/seamless_communication/models/monotonic_decoder/p_choose.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIGZpbmFsCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5ubi5wcm9qZWN0aW9uIGltcG9ydCBMaW5lYXIKZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERhdGFUeXBlLCBEZXZpY2UsIGZpbmFsb3ZlcnJpZGUKZnJvbSB0b3JjaCBpbXBvcnQgVGVuc29yCmZyb20gdG9yY2gubm4gaW1wb3J0IEF2Z1Bvb2wxZCwgTW9kdWxlLCBNb2R1bGVMaXN0LCBSZUxVCmZyb20gdG9yY2gubm4ucGFyYW1ldGVyIGltcG9ydCBQYXJhbWV0ZXIKCgpjbGFzcyBFbmVyZ3lQcm9qZWN0aW9uKE1vZHVsZSk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBtb2RlbF9kaW06IGludCwKICAgICAgICBudW1fbGF5ZXJzOiBpbnQsCiAgICAgICAgYmlhczogYm9vbCA9IFRydWUsCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICAgICAgaWYgbnVtX2xheWVycyA8IDE6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoCiAgICAgICAgICAgICAgICBmIkludmFsaWQgYG51bV9sYXllcnNgOiB7bnVtX2xheWVyc30gZm9yIEVuZXJneVByb2plY3Rpb25MYXllci4iCiAgICAgICAgICAgICkKCiAgICAgICAgc2VsZi5sYXllcnMgPSBNb2R1bGVMaXN0KCkKCiAgICAgICAgZm9yIF8gaW4gcmFuZ2UobnVtX2xheWVycyk6CiAgICAgICAgICAgIHNlbGYubGF5ZXJzLmFwcGVuZCgKICAgICAgICAgICAgICAgIExpbmVhcihtb2RlbF9kaW0sIG1vZGVsX2RpbSwgYmlhcywgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpCiAgICAgICAgICAgICkKICAgICAgICAgICAgc2VsZi5sYXllcnMuYXBwZW5kKFJlTFUoKSkKCiAgICBkZWYgZm9yd2FyZChzZWxmLCBzZXFzOiBUZW5zb3IpIC0+IFRlbnNvcjoKICAgICAgICBmb3IgbGF5ZXIgaW4gc2VsZi5sYXllcnM6CiAgICAgICAgICAgIHNlcXMgPSBsYXllcihzZXFzKQogICAgICAgIHJldHVybiBzZXFzCgoKQGZpbmFsCmNsYXNzIFBDaG9vc2VMYXllcihNb2R1bGUpOgogICAgIiIiUmVwcmVzZW50cyBhIFBDaG9vc2UgbGF5ZXIuIiIiCgogICAgbW9kZWxfZGltOiBpbnQKICAgIG51bV9oZWFkczogaW50CiAgICBlbmVyZ3lfYmlhczogUGFyYW1ldGVyCiAgICBtb25vdG9uaWNfdGVtcGVyYXR1cmU6IGZsb2F0CiAgICBxX2VuZXJneV9wcm9qOiBFbmVyZ3lQcm9qZWN0aW9uCiAgICBrX2VuZXJneV9wcm9qOiBFbmVyZ3lQcm9qZWN0aW9uCiAgICBrZXlzX3Bvb2xpbmc6IEF2Z1Bvb2wxZAoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIG1vZGVsX2RpbTogaW50LAogICAgICAgIG51bV9oZWFkczogaW50LAogICAgICAgIGVuZXJneV9iaWFzX3ZhbHVlOiBmbG9hdCwKICAgICAgICBtb25vdG9uaWNfdGVtcGVyYXR1cmU6IGZsb2F0LAogICAgICAgIG51bV9tb25vdG9uaWNfZW5lcmd5X2xheWVyczogaW50LAogICAgICAgIHByZV9kZWNpc2lvbl9yYXRpbzogaW50LAogICAgICAgICosCiAgICAgICAgYmlhczogYm9vbCA9IFRydWUsCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gbW9kZWxfZGltOgogICAgICAgICAgICBUaGUgZGltZW5zaW9uYWxpdHkgb2YgdGhlIG1vZGVsLgogICAgICAgIDpwYXJhbSBudW1faGVhZHM6CiAgICAgICAgICAgIFRoZSBudW1iZXIgb2YgYXR0ZW50aW9uIGhlYWRzLgogICAgICAgIDpwYXJhbSBiaWFzOgogICAgICAgICAgICBJZiBgYFRydWVgYCwgcXVlcnksIGtleSBlbmVyZ3kgcHJvamVjdGlvbiBsYXllcnMgbGVhcm4gYW4KICAgICAgICAgICAgYWRkaXRpdmUgYmlhcy4KICAgICAgICAiIiIKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICAgICAgc2VsZi5tb2RlbF9kaW0gPSBtb2RlbF9kaW0KICAgICAgICBzZWxmLm51bV9oZWFkcyA9IG51bV9oZWFkcwoKICAgICAgICBpZiBlbmVyZ3lfYmlhc192YWx1ZSAhPSAwLjA6CiAgICAgICAgICAgIHNlbGYuZW5lcmd5X2JpYXMgPSBQYXJhbWV0ZXIoCiAgICAgICAgICAgICAgICB0b3JjaC5mdWxsKFsxXSwgZW5lcmd5X2JpYXNfdmFsdWUsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKQogICAgICAgICAgICApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5yZWdpc3Rlcl9tb2R1bGUoImVuZXJneV9iaWFzIiwgTm9uZSkKCiAgICAgICAgc2VsZi5tb25vdG9uaWNfdGVtcGVyYXR1cmUgPSBtb25vdG9uaWNfdGVtcGVyYXR1cmUKCiAgICAgICAgaWYgbnVtX21vbm90b25pY19lbmVyZ3lfbGF5ZXJzIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIk51bWJlciBvZiBtb25vdG9uaWMgZW5lcmd5IGxheWVycyBtdXN0IGJlID4gMC4iKQoKICAgICAgICBzZWxmLnFfZW5lcmd5X3Byb2ogPSBFbmVyZ3lQcm9qZWN0aW9uKAogICAgICAgICAgICBzZWxmLm1vZGVsX2RpbSwKICAgICAgICAgICAgbnVtX21vbm90b25pY19lbmVyZ3lfbGF5ZXJzLAogICAgICAgICAgICBiaWFzLAogICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1kdHlwZSwKICAgICAgICApCiAgICAgICAgc2VsZi5rX2VuZXJneV9wcm9qID0gRW5lcmd5UHJvamVjdGlvbigKICAgICAgICAgICAgc2VsZi5tb2RlbF9kaW0sCiAgICAgICAgICAgIG51bV9tb25vdG9uaWNfZW5lcmd5X2xheWVycywKICAgICAgICAgICAgYmlhcywKICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICAgICAgKQoKICAgICAgICBzZWxmLmtleXNfcG9vbGluZyA9IEF2Z1Bvb2wxZCgKICAgICAgICAgICAga2VybmVsX3NpemU9cHJlX2RlY2lzaW9uX3JhdGlvLAogICAgICAgICAgICBzdHJpZGU9cHJlX2RlY2lzaW9uX3JhdGlvLAogICAgICAgICAgICBjZWlsX21vZGU9VHJ1ZSwKICAgICAgICApCgogICAgQGZpbmFsb3ZlcnJpZGUKICAgIGRlZiBmb3J3YXJkKHNlbGYsIHNlcXM6IFRlbnNvciwga2V5czogVGVuc29yKSAtPiBUZW5zb3I6CiAgICAgICAgcSA9IHNlbGYucV9lbmVyZ3lfcHJvaihzZXFzKQoKICAgICAgICAjIChOLCBTLCBNKSAtPiAoTiwgSCwgUywgSykKICAgICAgICBxID0gcS51bmZsYXR0ZW4oLTEsIChzZWxmLm51bV9oZWFkcywgLTEpKS50cmFuc3Bvc2UoMSwgMikKCiAgICAgICAgIyAoTiwgU19rdiwgTSkgLT4gKE4sIE0sIFNfa3YpIC0+IChOLCBNLCBTX3ApCiAgICAgICAgcG9vbGVkX2tleXMgPSBzZWxmLmtleXNfcG9vbGluZyhrZXlzLnRyYW5zcG9zZSgxLCAyKSkKCiAgICAgICAgIyAoTiwgTSwgU19wKSAtPiAoTiwgU19wLCBNKQogICAgICAgIHBvb2xlZF9rZXlzID0gcG9vbGVkX2tleXMudHJhbnNwb3NlKDEsIDIpCgogICAgICAgIGsgPSBzZWxmLmtfZW5lcmd5X3Byb2oocG9vbGVkX2tleXMpCgogICAgICAgICMgKE4sIFNfcCwgTSkgLT4gKE4sIEgsIFNfcCwgSykKICAgICAgICBrID0gay51bmZsYXR0ZW4oLTEsIChzZWxmLm51bV9oZWFkcywgLTEpKS50cmFuc3Bvc2UoMSwgMikKCiAgICAgICAgIyAoTiwgSCwgUywgSykgQCAoTiwgSCwgSywgU19wKSA9IChOLCBILCBTLCBTX3ApCiAgICAgICAgbW9ub3RvbmljX2VuZXJneSA9IHRvcmNoLm1hdG11bChxLCBrLnRyYW5zcG9zZSgtMSwgLTIpKQoKICAgICAgICBtb25vdG9uaWNfZW5lcmd5ID0gbW9ub3RvbmljX2VuZXJneSAqIChxLnNpemUoLTEpICoqIC0wLjUpCgogICAgICAgIGlmIHNlbGYuZW5lcmd5X2JpYXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIG1vbm90b25pY19lbmVyZ3kgKz0gc2VsZi5lbmVyZ3lfYmlhcwoKICAgICAgICAjIHBfY2hvb3NlOiAoTiwgSCwgUywgU19wKQogICAgICAgIHBfY2hvb3NlID0gdG9yY2guc2lnbW9pZChtb25vdG9uaWNfZW5lcmd5IC8gc2VsZi5tb25vdG9uaWNfdGVtcGVyYXR1cmUpCgogICAgICAgIHJldHVybiBwX2Nob29zZQo='),
    ('seamless/src/seamless_communication/models/monotonic_decoder/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMubW9ub3RvbmljX2RlY29kZXIuYnVpbGRlciBpbXBvcnQgKAogICAgTW9ub3RvbmljRGVjb2RlckJ1aWxkZXIgYXMgTW9ub3RvbmljRGVjb2RlckJ1aWxkZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5idWlsZGVyIGltcG9ydCAoCiAgICBNb25vdG9uaWNEZWNvZGVyQ29uZmlnIGFzIE1vbm90b25pY0RlY29kZXJDb25maWcsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5tb2RlbCBpbXBvcnQgKAogICAgTW9ub3RvbmljRGVjb2Rlck1vZGVsIGFzIE1vbm90b25pY0RlY29kZXJNb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLmJ1aWxkZXIgaW1wb3J0ICgKICAgIGNyZWF0ZV9tb25vdG9uaWNfZGVjb2Rlcl9tb2RlbCBhcyBjcmVhdGVfbW9ub3RvbmljX2RlY29kZXJfbW9kZWwsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5idWlsZGVyIGltcG9ydCAoCiAgICBtb25vdG9uaWNfZGVjb2Rlcl9hcmNocyBhcyBtb25vdG9uaWNfZGVjb2Rlcl9hcmNocywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLmxvYWRlciBpbXBvcnQgKAogICAgbG9hZF9tb25vdG9uaWNfZGVjb2Rlcl9jb25maWcgYXMgbG9hZF9tb25vdG9uaWNfZGVjb2Rlcl9jb25maWcsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5sb2FkZXIgaW1wb3J0ICgKICAgIGxvYWRfbW9ub3RvbmljX2RlY29kZXJfbW9kZWwgYXMgbG9hZF9tb25vdG9uaWNfZGVjb2Rlcl9tb2RlbCwKKQo='),
    ('seamless/src/seamless_communication/models/monotonic_decoder/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBNYXBwaW5nCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzIGltcG9ydCBDb25maWdMb2FkZXIsIE1vZGVsTG9hZGVyCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzLmNoZWNrcG9pbnQgaW1wb3J0IGNvbnZlcnRfZmFpcnNlcV9jaGVja3BvaW50Cgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLmJ1aWxkZXIgaW1wb3J0ICgKICAgIE1vbm90b25pY0RlY29kZXJDb25maWcsCiAgICBjcmVhdGVfbW9ub3RvbmljX2RlY29kZXJfbW9kZWwsCiAgICBtb25vdG9uaWNfZGVjb2Rlcl9hcmNocywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLm1vZGVsIGltcG9ydCBNb25vdG9uaWNEZWNvZGVyTW9kZWwKCgpkZWYgY29udmVydF9tb25vdG9uaWNfY2hlY2twb2ludCgKICAgIGNoZWNrcG9pbnQ6IE1hcHBpbmdbc3RyLCBBbnldLCBjb25maWc6IE1vbm90b25pY0RlY29kZXJDb25maWcKKSAtPiBNYXBwaW5nW3N0ciwgQW55XToKICAgIHN0YXRlX2RpY3QgPSBjaGVja3BvaW50WyJtb2RlbCJdCgogICAgIyBDaGVjayBpZiB3ZSBoYXZlIGEgZmFpcnNlcTIgY2hlY2twb2ludC4KICAgIGlmICJ0ZXh0X2RlY29kZXIubGF5ZXJzLjAuc2VsZl9hdHRuLmtfcHJvai53ZWlnaHQiIGluIHN0YXRlX2RpY3Q6CiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnQKCiAgICBrZXlfbWFwID0gewogICAgICAgICMgZm10OiBvZmYKICAgICAgICByIl5kZWNvZGVyXC5lbWJlZF90b2tlbnNcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInRleHRfZGVjb2Rlcl9mcm9udGVuZC5lbWJlZC4iLAogICAgICAgIHIiXmRlY29kZXJcLmxheWVyc1wuKFswLTldKylcLnNlbGZfYXR0blwub3V0X3Byb2pcLiI6ICAgICAgICAgICAgICAgICAgIHIidGV4dF9kZWNvZGVyLmxheWVycy5cMS5zZWxmX2F0dG4ub3V0cHV0X3Byb2ouIiwKICAgICAgICByIl5kZWNvZGVyXC5sYXllcnNcLihbMC05XSspXC5zZWxmX2F0dG5cLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInRleHRfZGVjb2Rlci5sYXllcnMuXDEuc2VsZl9hdHRuLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuc2VsZl9hdHRuX2xheWVyX25vcm1cLiI6ICAgICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLnNlbGZfYXR0bl9sYXllcl9ub3JtLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZW5jb2Rlcl9hdHRuXC5vdXRfcHJvalwuIjogICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLmVuY29kZXJfZGVjb2Rlcl9hdHRuLm91dHB1dF9wcm9qLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZW5jb2Rlcl9hdHRuXC5lbmVyZ3lfYmlhcyI6ICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLnBfY2hvb3NlX2xheWVyLmVuZXJneV9iaWFzIiwKICAgICAgICByIl5kZWNvZGVyXC5sYXllcnNcLihbMC05XSspXC5lbmNvZGVyX2F0dG5cLnNvdXJjZV9lbmVyZ3lfbGF5ZXJcLiI6ICAgICByInRleHRfZGVjb2Rlci5sYXllcnMuXDEucF9jaG9vc2VfbGF5ZXIua19lbmVyZ3lfcHJvai4iLAogICAgICAgIHIiXmRlY29kZXJcLmxheWVyc1wuKFswLTldKylcLmVuY29kZXJfYXR0blwudGFyZ2V0X2VuZXJneV9sYXllclwuIjogICAgIHIidGV4dF9kZWNvZGVyLmxheWVycy5cMS5wX2Nob29zZV9sYXllci5xX2VuZXJneV9wcm9qLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZW5jb2Rlcl9hdHRuXC4iOiAgICAgICAgICAgICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLmVuY29kZXJfZGVjb2Rlcl9hdHRuLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZW5jb2Rlcl9hdHRuX2xheWVyX25vcm1cLiI6ICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLmVuY29kZXJfZGVjb2Rlcl9hdHRuX2xheWVyX25vcm0uIiwKICAgICAgICByIl5kZWNvZGVyXC5sYXllcnNcLihbMC05XSspXC5mYzFcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInRleHRfZGVjb2Rlci5sYXllcnMuXDEuZmZuLmlubmVyX3Byb2ouIiwKICAgICAgICByIl5kZWNvZGVyXC5sYXllcnNcLihbMC05XSspXC5mYzJcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInRleHRfZGVjb2Rlci5sYXllcnMuXDEuZmZuLm91dHB1dF9wcm9qLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZmluYWxfbGF5ZXJfbm9ybVwuIjogICAgICAgICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLmZmbl9sYXllcl9ub3JtLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJfbm9ybVwuIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJfbm9ybS4iLAogICAgICAgIHIiXmRlY29kZXJcLm91dHB1dF9wcm9qZWN0aW9uXC4iOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIiZmluYWxfcHJvai4iLAogICAgICAgICMgZm10OiBvbgogICAgfQoKICAgICMgQ29udmVydCB0byBmYWlyc2VxMi4KICAgIGNoZWNrcG9pbnQgPSBjb252ZXJ0X2ZhaXJzZXFfY2hlY2twb2ludChjaGVja3BvaW50LCBrZXlfbWFwKQoKICAgIHN0YXRlX2RpY3QgPSBjaGVja3BvaW50WyJtb2RlbCJdCgogICAgZW1iZWRzID0gc3RhdGVfZGljdFsiZmluYWxfcHJvai53ZWlnaHQiXQoKICAgICMgZmFpcnNlcSBoYWQgYSBidWcgdGhhdCBhY2NpZGVudGFsbHkgaW50cm9kdWNlZCBhIGR1bW15IHRva2VuIGluIHRoZQogICAgIyBlbWJlZGRpbmcgdGFibGUgb2YgTkxMQi0xMDAuIFdlIGp1c3QgZGlzY2FyZCBpdC4KICAgIGlmIGVtYmVkcy5zaXplKDApID09IDI1NjEwMzogICMgbWVhbnMgTkxMQi0xMDAKICAgICAgICBlbWJlZHMgPSBlbWJlZHNbOi0xXQoKICAgICAgICBzdGF0ZV9kaWN0WyJmaW5hbF9wcm9qLndlaWdodCJdID0gZW1iZWRzCgogICAgIyBmYWlyc2VxIGNoZWNrcG9pbnRzIGhhdmUgZHVwbGljYXRlIGVtYmVkZGluZyB3ZWlnaHRzLiBFbnN1cmUgdGhhdCB3ZQogICAgIyB1c2UgYSBzaW5nbGUgZW1iZWRkaW5nIHRhYmxlIGluIGZhaXJzZXEyLgogICAgc3RhdGVfZGljdFsidGV4dF9kZWNvZGVyX2Zyb250ZW5kLmVtYmVkLndlaWdodCJdID0gZW1iZWRzCgogICAgIyBUaGUgZW1iZWRkaW5nIHBvc2l0aW9ucyBvZiB0aGUgY29udHJvbCBzeW1ib2xzIGluIGZhaXJzZXEncyBkaWN0IGRvCiAgICAjIG5vdCBtYXRjaCB0aGUgU2VudGVuY2VQaWVjZSBtb2RlbCBvZiB0aGUgdG9rZW5pemVyLgogICAgd2l0aCB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpOgogICAgICAgICMgKEJPUywgUEFELCBFT1MsIFVOSykgLT4gKFBBRCwgVU5LLCBCT1MsIEVPUykKICAgICAgICBlbWJlZHNbWzAsIDEsIDIsIDNdXSA9IGVtYmVkc1tbMSwgMywgMCwgMl1dCgogICAgcmV0dXJuIGNoZWNrcG9pbnQKCgpsb2FkX21vbm90b25pY19kZWNvZGVyX2NvbmZpZyA9IENvbmZpZ0xvYWRlcltNb25vdG9uaWNEZWNvZGVyQ29uZmlnXSgKICAgIGFzc2V0X3N0b3JlLCBtb25vdG9uaWNfZGVjb2Rlcl9hcmNocwopCgoKbG9hZF9tb25vdG9uaWNfZGVjb2Rlcl9tb2RlbCA9IE1vZGVsTG9hZGVyWwogICAgTW9ub3RvbmljRGVjb2Rlck1vZGVsLCBNb25vdG9uaWNEZWNvZGVyQ29uZmlnCl0oCiAgICBhc3NldF9zdG9yZSwKICAgIGRvd25sb2FkX21hbmFnZXIsCiAgICBsb2FkX21vbm90b25pY19kZWNvZGVyX2NvbmZpZywKICAgIGNyZWF0ZV9tb25vdG9uaWNfZGVjb2Rlcl9tb2RlbCwKICAgIGNvbnZlcnRfbW9ub3RvbmljX2NoZWNrcG9pbnQsCiAgICByZXN0cmljdF9jaGVja3BvaW50cz1GYWxzZSwKKQo='),
    ('seamless/src/seamless_communication/models/monotonic_decoder/builder.py', ''),
    ('seamless/src/seamless_communication/models/monotonic_decoder/monotonic_decoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgSXRlcmFibGUsIExpc3QsIE9wdGlvbmFsLCBUdXBsZSwgZmluYWwKCmltcG9ydCB0b3JjaApmcm9tIGZhaXJzZXEyLm5uLmluY3JlbWVudGFsX3N0YXRlIGltcG9ydCBJbmNyZW1lbnRhbFN0YXRlQmFnCmZyb20gZmFpcnNlcTIubm4ubW9kdWxlX2xpc3QgaW1wb3J0IE1vZHVsZUxpc3QKZnJvbSBmYWlyc2VxMi5ubi5ub3JtYWxpemF0aW9uIGltcG9ydCBMYXllck5vcm0KZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBQYWRkaW5nTWFzawpmcm9tIGZhaXJzZXEyLm5uLnRyYW5zZm9ybWVyIGltcG9ydCAoCiAgICBBdHRlbnRpb25NYXNrRmFjdG9yeSwKICAgIENhdXNhbEF0dGVudGlvbk1hc2tGYWN0b3J5LAogICAgY3JlYXRlX3N0YW5kYXJkX2xheWVyX25vcm0sCikKZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERhdGFUeXBlLCBEZXZpY2UsIGZpbmFsb3ZlcnJpZGUKZnJvbSB0b3JjaCBpbXBvcnQgVGVuc29yCmZyb20gdG9yY2gubm4gaW1wb3J0IE1vZHVsZQoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5tb25vdG9uaWNfZGVjb2Rlcl9sYXllciBpbXBvcnQgKAogICAgTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyTGF5ZXIsCikKCgpAZmluYWwKY2xhc3MgTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyKE1vZHVsZSk6CiAgICAiIiJSZXByZXNlbnRzIGEgTW9ub3RvbmljIFRyYW5zZm9ybWVyIGRlY29kZXIuIiIiCgogICAgbW9kZWxfZGltOiBpbnQKICAgIHNlbGZfYXR0bl9tYXNrX2ZhY3Rvcnk6IEF0dGVudGlvbk1hc2tGYWN0b3J5CiAgICBsYXllcnM6IE1vZHVsZUxpc3QKICAgIGxheWVyX25vcm06IExheWVyTm9ybQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGxheWVyczogSXRlcmFibGVbTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyTGF5ZXJdLAogICAgICAgICosCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gbGF5ZXJzOgogICAgICAgICAgICBUaGUgZGVjb2RlciBsYXllcnMuCiAgICAgICAgIiIiCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIGxheWVyX2xpc3QgPSBNb2R1bGVMaXN0KGxheWVycykKCiAgICAgICAgaWYgbm90IGxheWVyX2xpc3Q6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImBsYXllcnNgIG11c3QgYmUgbm9uLWVtcHR5LiIpCgogICAgICAgIHNlbGYubW9kZWxfZGltID0gbGF5ZXJfbGlzdFswXS5tb2RlbF9kaW0KCiAgICAgICAgc2VsZi5zZWxmX2F0dG5fbWFza19mYWN0b3J5ID0gQ2F1c2FsQXR0ZW50aW9uTWFza0ZhY3RvcnkoKQoKICAgICAgICBzZWxmLmxheWVycyA9IGxheWVyX2xpc3QKCiAgICAgICAgc2VsZi5sYXllcl9ub3JtID0gY3JlYXRlX3N0YW5kYXJkX2xheWVyX25vcm0oCiAgICAgICAgICAgIHNlbGYubW9kZWxfZGltLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZQogICAgICAgICkKCiAgICBAZmluYWxvdmVycmlkZQogICAgZGVmIGZvcndhcmQoCiAgICAgICAgc2VsZiwKICAgICAgICBzZXFzOiBUZW5zb3IsCiAgICAgICAgcGFkZGluZ19tYXNrOiBPcHRpb25hbFtQYWRkaW5nTWFza10sCiAgICAgICAgZW5jb2Rlcl9vdXRwdXQ6IE9wdGlvbmFsW1RlbnNvcl0gPSBOb25lLAogICAgICAgIGVuY29kZXJfcGFkZGluZ19tYXNrOiBPcHRpb25hbFtQYWRkaW5nTWFza10gPSBOb25lLAogICAgICAgICosCiAgICAgICAgc3RhdGVfYmFnOiBPcHRpb25hbFtJbmNyZW1lbnRhbFN0YXRlQmFnXSA9IE5vbmUsCiAgICApIC0+IFR1cGxlW1RlbnNvciwgT3B0aW9uYWxbUGFkZGluZ01hc2tdLCBUZW5zb3JdOgogICAgICAgIHNlbGZfYXR0bl9tYXNrID0gc2VsZi5zZWxmX2F0dG5fbWFza19mYWN0b3J5KAogICAgICAgICAgICBzZXFzLCBrZXlzPXNlcXMsIHRyYWluaW5nPXNlbGYudHJhaW5pbmcsIHN0YXRlX2JhZz1zdGF0ZV9iYWcKICAgICAgICApCgogICAgICAgIHBfY2hvb3NlX2xpc3Q6IExpc3RbVGVuc29yXSA9IFtdCgogICAgICAgIGZvciBsYXllciBpbiBzZWxmLmxheWVycy5kcm9wX2l0ZXIoKToKICAgICAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrLCBwX2Nob29zZSA9IGxheWVyKAogICAgICAgICAgICAgICAgc2VxcywKICAgICAgICAgICAgICAgIHBhZGRpbmdfbWFzaywKICAgICAgICAgICAgICAgIHNlbGZfYXR0bl9tYXNrLAogICAgICAgICAgICAgICAgZW5jb2Rlcl9vdXRwdXQsCiAgICAgICAgICAgICAgICBlbmNvZGVyX3BhZGRpbmdfbWFzaywKICAgICAgICAgICAgICAgIHN0YXRlX2JhZz1zdGF0ZV9iYWcsCiAgICAgICAgICAgICkKICAgICAgICAgICAgcF9jaG9vc2VfbGlzdC5hcHBlbmQocF9jaG9vc2UpCgogICAgICAgIHNlcXMgPSBzZWxmLmxheWVyX25vcm0oc2VxcykKCiAgICAgICAgcF9jaG9vc2UgPSB0b3JjaC5jYXQocF9jaG9vc2VfbGlzdCwgZGltPTApCgogICAgICAgIHBfY2hvb3NlID0gcF9jaG9vc2UuZmxhdHRlbigwLCAxKQoKICAgICAgICByZXR1cm4gc2VxcywgcGFkZGluZ19tYXNrLCBwX2Nob29zZQo='),
    ('seamless/src/seamless_communication/models/monotonic_decoder/model.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIFR1cGxlLCBmaW5hbAoKZnJvbSBmYWlyc2VxMi5tb2RlbHMudHJhbnNmb3JtZXIuZnJvbnRlbmQgaW1wb3J0IFRyYW5zZm9ybWVyRnJvbnRlbmQKZnJvbSBmYWlyc2VxMi5ubi5pbmNyZW1lbnRhbF9zdGF0ZSBpbXBvcnQgSW5jcmVtZW50YWxTdGF0ZUJhZwpmcm9tIGZhaXJzZXEyLm5uLnBhZGRpbmcgaW1wb3J0IFBhZGRpbmdNYXNrCmZyb20gZmFpcnNlcTIubm4ucHJvamVjdGlvbiBpbXBvcnQgUHJvamVjdGlvbgpmcm9tIG92ZXJyaWRlcyBpbXBvcnQgZmluYWwgYXMgZmluYWxvdmVycmlkZQpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKZnJvbSB0b3JjaC5ubiBpbXBvcnQgTW9kdWxlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLm1vbm90b25pY19kZWNvZGVyIGltcG9ydCAoCiAgICBNb25vdG9uaWNUcmFuc2Zvcm1lckRlY29kZXIsCikKCgpAZmluYWwKY2xhc3MgTW9ub3RvbmljRGVjb2Rlck1vZGVsKE1vZHVsZSk6CiAgICB0ZXh0X2RlY29kZXJfZnJvbnRlbmQ6IFRyYW5zZm9ybWVyRnJvbnRlbmQKICAgIHRleHRfZGVjb2RlcjogTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyCiAgICBmaW5hbF9wcm9qOiBQcm9qZWN0aW9uCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgdGV4dF9kZWNvZGVyX2Zyb250ZW5kOiBUcmFuc2Zvcm1lckZyb250ZW5kLAogICAgICAgIHRleHRfZGVjb2RlcjogTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyLAogICAgICAgIGZpbmFsX3Byb2o6IFByb2plY3Rpb24sCiAgICApIC0+IE5vbmU6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIHNlbGYudGV4dF9kZWNvZGVyX2Zyb250ZW5kID0gdGV4dF9kZWNvZGVyX2Zyb250ZW5kCiAgICAgICAgc2VsZi50ZXh0X2RlY29kZXIgPSB0ZXh0X2RlY29kZXIKICAgICAgICBzZWxmLmZpbmFsX3Byb2ogPSBmaW5hbF9wcm9qCgogICAgQGZpbmFsb3ZlcnJpZGUKICAgIGRlZiBkZWNvZGUoCiAgICAgICAgc2VsZiwKICAgICAgICBzZXFzOiBUZW5zb3IsCiAgICAgICAgcGFkZGluZ19tYXNrOiBPcHRpb25hbFtQYWRkaW5nTWFza10sCiAgICAgICAgZW5jb2Rlcl9vdXRwdXQ6IFRlbnNvciwKICAgICAgICBlbmNvZGVyX3BhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdLAogICAgICAgICosCiAgICAgICAgc3RhdGVfYmFnOiBPcHRpb25hbFtJbmNyZW1lbnRhbFN0YXRlQmFnXSA9IE5vbmUsCiAgICApIC0+IFR1cGxlW1RlbnNvciwgT3B0aW9uYWxbUGFkZGluZ01hc2tdLCBUZW5zb3JdOgogICAgICAgIHNlcXMsIHBhZGRpbmdfbWFzayA9IHNlbGYudGV4dF9kZWNvZGVyX2Zyb250ZW5kKAogICAgICAgICAgICBzZXFzLCBwYWRkaW5nX21hc2ssIHN0YXRlX2JhZz1zdGF0ZV9iYWcKICAgICAgICApCgogICAgICAgIHJldHVybiBzZWxmLnRleHRfZGVjb2RlciggICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCiAgICAgICAgICAgIHNlcXMsCiAgICAgICAgICAgIHBhZGRpbmdfbWFzaywKICAgICAgICAgICAgZW5jb2Rlcl9vdXRwdXQsCiAgICAgICAgICAgIGVuY29kZXJfcGFkZGluZ19tYXNrLAogICAgICAgICAgICBzdGF0ZV9iYWc9c3RhdGVfYmFnLAogICAgICAgICkKCiAgICBAZmluYWxvdmVycmlkZQogICAgZGVmIHByb2plY3Qoc2VsZiwgZGVjb2Rlcl9vdXRwdXQ6IFRlbnNvcikgLT4gVGVuc29yOgogICAgICAgIGxvZ2l0cyA9IHNlbGYuZmluYWxfcHJvaihkZWNvZGVyX291dHB1dCkKCiAgICAgICAgcmV0dXJuIGxvZ2l0cyAgIyB0eXBlOiBpZ25vcmVbbm8tYW55LXJldHVybl0K'),
    ('seamless/src/seamless_communication/models/monotonic_decoder/monotonic_decoder_layer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIFR1cGxlLCBmaW5hbAoKZnJvbSBmYWlyc2VxMi5ubi5pbmNyZW1lbnRhbF9zdGF0ZSBpbXBvcnQgSW5jcmVtZW50YWxTdGF0ZUJhZwpmcm9tIGZhaXJzZXEyLm5uLm5vcm1hbGl6YXRpb24gaW1wb3J0IExheWVyTm9ybQpmcm9tIGZhaXJzZXEyLm5uLnBhZGRpbmcgaW1wb3J0IFBhZGRpbmdNYXNrCmZyb20gZmFpcnNlcTIubm4udHJhbnNmb3JtZXIgaW1wb3J0ICgKICAgIEF0dGVudGlvbk1hc2ssCiAgICBGZWVkRm9yd2FyZE5ldHdvcmssCiAgICBNdWx0aWhlYWRBdHRlbnRpb24sCiAgICBjcmVhdGVfc3RhbmRhcmRfbGF5ZXJfbm9ybSwKKQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZSwgZmluYWxvdmVycmlkZQpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKZnJvbSB0b3JjaC5ubiBpbXBvcnQgRHJvcG91dCwgTW9kdWxlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLnBfY2hvb3NlIGltcG9ydCBQQ2hvb3NlTGF5ZXIKCgpAZmluYWwKY2xhc3MgTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyTGF5ZXIoTW9kdWxlKToKICAgICIiIlJlcHJlc2VudHMgYSBNb25vdG9uaWMgVHJhbnNmb3JtZXIgZGVjb2RlciBsYXllci4iIiIKCiAgICBzZWxmX2F0dG46IE11bHRpaGVhZEF0dGVudGlvbgogICAgc2VsZl9hdHRuX2Ryb3BvdXQ6IE9wdGlvbmFsW0Ryb3BvdXRdCiAgICBzZWxmX2F0dG5fbGF5ZXJfbm9ybTogTGF5ZXJOb3JtCiAgICBlbmNvZGVyX2RlY29kZXJfYXR0bjogTXVsdGloZWFkQXR0ZW50aW9uCiAgICBlbmNvZGVyX2RlY29kZXJfYXR0bl9kcm9wb3V0OiBPcHRpb25hbFtEcm9wb3V0XQogICAgZW5jb2Rlcl9kZWNvZGVyX2F0dG5fbGF5ZXJfbm9ybTogTGF5ZXJOb3JtCiAgICBwX2Nob29zZV9sYXllcjogUENob29zZUxheWVyCiAgICBmZm46IEZlZWRGb3J3YXJkTmV0d29yawogICAgZmZuX2Ryb3BvdXQ6IE9wdGlvbmFsW0Ryb3BvdXRdCiAgICBmZm5fbGF5ZXJfbm9ybTogTGF5ZXJOb3JtCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgc2VsZl9hdHRuOiBNdWx0aWhlYWRBdHRlbnRpb24sCiAgICAgICAgZW5jb2Rlcl9kZWNvZGVyX2F0dG46IE11bHRpaGVhZEF0dGVudGlvbiwKICAgICAgICBwX2Nob29zZV9sYXllcjogUENob29zZUxheWVyLAogICAgICAgIGZmbjogRmVlZEZvcndhcmROZXR3b3JrLAogICAgICAgICosCiAgICAgICAgZHJvcG91dF9wOiBmbG9hdCA9IDAuMSwKICAgICAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAogICAgKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIDpwYXJhbSBzZWxmX2F0dG46CiAgICAgICAgICAgIFRoZSBzZWxmIGF0dGVudGlvbiBsYXllci4KICAgICAgICA6cGFyYW0gZW5jb2Rlcl9kZWNvZGVyX2F0dG46CiAgICAgICAgICAgIFRoZSBlbmNvZGVyLWRlY29kZXIgYXR0ZW50aW9uIGxheWVyLgogICAgICAgIDpwYXJhbSBmZm46CiAgICAgICAgICAgIFRoZSBmZWVkLWZvcndhcmQgbmV0d29yay4KICAgICAgICA6cGFyYW0gZHJvcG91dF9wOgogICAgICAgICAgICBUaGUgZHJvcG91dCBwcm9iYWJpbGl0eSBvbiBvdXRwdXRzIG9mIHRoZSBhdHRlbnRpb24gbGF5ZXJzIGFuZCB0aGUKICAgICAgICAgICAgZmVlZC1mb3J3YXJkIG5ldHdvcmsuCiAgICAgICAgIiIiCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIHNlbGYubW9kZWxfZGltID0gc2VsZl9hdHRuLm1vZGVsX2RpbQoKICAgICAgICBzZWxmX2F0dG5fbGF5ZXJfbm9ybSA9IGNyZWF0ZV9zdGFuZGFyZF9sYXllcl9ub3JtKAogICAgICAgICAgICBzZWxmLm1vZGVsX2RpbSwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUKICAgICAgICApCgogICAgICAgIHNlbGYuc2VsZl9hdHRuX2xheWVyX25vcm0gPSBzZWxmX2F0dG5fbGF5ZXJfbm9ybQoKICAgICAgICBzZWxmLnNlbGZfYXR0biA9IHNlbGZfYXR0bgoKICAgICAgICBpZiBkcm9wb3V0X3AgPiAwLjA6CiAgICAgICAgICAgIHNlbGYuc2VsZl9hdHRuX2Ryb3BvdXQgPSBEcm9wb3V0KGRyb3BvdXRfcCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnJlZ2lzdGVyX21vZHVsZSgic2VsZl9hdHRuX2Ryb3BvdXQiLCBOb25lKQoKICAgICAgICBlbmNvZGVyX2RlY29kZXJfYXR0bl9sYXllcl9ub3JtID0gY3JlYXRlX3N0YW5kYXJkX2xheWVyX25vcm0oCiAgICAgICAgICAgIHNlbGYubW9kZWxfZGltLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZQogICAgICAgICkKCiAgICAgICAgc2VsZi5lbmNvZGVyX2RlY29kZXJfYXR0bl9sYXllcl9ub3JtID0gZW5jb2Rlcl9kZWNvZGVyX2F0dG5fbGF5ZXJfbm9ybQoKICAgICAgICBzZWxmLmVuY29kZXJfZGVjb2Rlcl9hdHRuID0gZW5jb2Rlcl9kZWNvZGVyX2F0dG4KCiAgICAgICAgaWYgZHJvcG91dF9wID4gMC4wOgogICAgICAgICAgICBzZWxmLmVuY29kZXJfZGVjb2Rlcl9hdHRuX2Ryb3BvdXQgPSBEcm9wb3V0KGRyb3BvdXRfcCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnJlZ2lzdGVyX21vZHVsZSgiZW5jb2Rlcl9kZWNvZGVyX2F0dG5fZHJvcG91dCIsIE5vbmUpCgogICAgICAgIHNlbGYucF9jaG9vc2VfbGF5ZXIgPSBwX2Nob29zZV9sYXllcgoKICAgICAgICBmZm5fbGF5ZXJfbm9ybSA9IGNyZWF0ZV9zdGFuZGFyZF9sYXllcl9ub3JtKAogICAgICAgICAgICBzZWxmLm1vZGVsX2RpbSwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUKICAgICAgICApCgogICAgICAgIHNlbGYuZmZuX2xheWVyX25vcm0gPSBmZm5fbGF5ZXJfbm9ybQoKICAgICAgICBzZWxmLmZmbiA9IGZmbgoKICAgICAgICBpZiBkcm9wb3V0X3AgPiAwLjA6CiAgICAgICAgICAgIHNlbGYuZmZuX2Ryb3BvdXQgPSBEcm9wb3V0KGRyb3BvdXRfcCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnJlZ2lzdGVyX21vZHVsZSgiZmZuX2Ryb3BvdXQiLCBOb25lKQoKICAgIEBmaW5hbG92ZXJyaWRlCiAgICBkZWYgZm9yd2FyZCgKICAgICAgICBzZWxmLAogICAgICAgIHNlcXM6IFRlbnNvciwKICAgICAgICBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwKICAgICAgICBzZWxmX2F0dG5fbWFzazogT3B0aW9uYWxbQXR0ZW50aW9uTWFza10gPSBOb25lLAogICAgICAgIGVuY29kZXJfb3V0cHV0OiBPcHRpb25hbFtUZW5zb3JdID0gTm9uZSwKICAgICAgICBlbmNvZGVyX3BhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdID0gTm9uZSwKICAgICAgICAqLAogICAgICAgIHN0YXRlX2JhZzogT3B0aW9uYWxbSW5jcmVtZW50YWxTdGF0ZUJhZ10gPSBOb25lLAogICAgKSAtPiBUdXBsZVtUZW5zb3IsIE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwgVGVuc29yXToKICAgICAgICBzZXFzID0gc2VsZi5fZm9yd2FyZF9zZWxmX2F0dG4oc2VxcywgcGFkZGluZ19tYXNrLCBzZWxmX2F0dG5fbWFzaywgc3RhdGVfYmFnKQoKICAgICAgICBzZXFzLCBwX2Nob29zZSA9IHNlbGYuX2ZvcndhcmRfZW5jb2Rlcl9kZWNvZGVyX2F0dG4oCiAgICAgICAgICAgIHNlcXMsIHBhZGRpbmdfbWFzaywgZW5jb2Rlcl9vdXRwdXQsIGVuY29kZXJfcGFkZGluZ19tYXNrCiAgICAgICAgKQoKICAgICAgICBzZXFzID0gc2VsZi5fZm9yd2FyZF9mZm4oc2VxcykKCiAgICAgICAgcmV0dXJuIHNlcXMsIHBhZGRpbmdfbWFzaywgcF9jaG9vc2UKCiAgICBkZWYgX2ZvcndhcmRfc2VsZl9hdHRuKAogICAgICAgIHNlbGYsCiAgICAgICAgc2VxczogVGVuc29yLAogICAgICAgIHBhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdLAogICAgICAgIHNlbGZfYXR0bl9tYXNrOiBPcHRpb25hbFtBdHRlbnRpb25NYXNrXSwKICAgICAgICBzdGF0ZV9iYWc6IE9wdGlvbmFsW0luY3JlbWVudGFsU3RhdGVCYWddLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgcmVzaWR1YWwgPSBzZXFzCgogICAgICAgIHNlcXMgPSBzZWxmLnNlbGZfYXR0bl9sYXllcl9ub3JtKHNlcXMpCgogICAgICAgIHNlcXMgPSBzZWxmLnNlbGZfYXR0bigKICAgICAgICAgICAgc2VxcywKICAgICAgICAgICAgcGFkZGluZ19tYXNrLAogICAgICAgICAgICBrZXlzPXNlcXMsCiAgICAgICAgICAgIGtleV9wYWRkaW5nX21hc2s9cGFkZGluZ19tYXNrLAogICAgICAgICAgICB2YWx1ZXM9c2VxcywKICAgICAgICAgICAgYXR0bl9tYXNrPXNlbGZfYXR0bl9tYXNrLAogICAgICAgICAgICBzdGF0ZV9iYWc9c3RhdGVfYmFnLAogICAgICAgICkKCiAgICAgICAgaWYgc2VsZi5zZWxmX2F0dG5fZHJvcG91dCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VxcyA9IHNlbGYuc2VsZl9hdHRuX2Ryb3BvdXQoc2VxcykKCiAgICAgICAgc2VxcyA9IHNlcXMgKyByZXNpZHVhbAoKICAgICAgICByZXR1cm4gc2VxcwoKICAgIGRlZiBfZm9yd2FyZF9lbmNvZGVyX2RlY29kZXJfYXR0bigKICAgICAgICBzZWxmLAogICAgICAgIHNlcXM6IFRlbnNvciwKICAgICAgICBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwKICAgICAgICBlbmNvZGVyX291dHB1dDogT3B0aW9uYWxbVGVuc29yXSwKICAgICAgICBlbmNvZGVyX3BhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdLAogICAgKSAtPiBUdXBsZVtUZW5zb3IsIFRlbnNvcl06CiAgICAgICAgaWYgZW5jb2Rlcl9vdXRwdXQgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgICJgZW5jb2Rlcl9vdXRwdXRgIG11c3Qgbm90IGJlIGBOb25lYCBmb3IgZW5jb2Rlci1kZWNvZGVyIGF0dGVudGlvbi4iCiAgICAgICAgICAgICkKCiAgICAgICAgcmVzaWR1YWwgPSBzZXFzCgogICAgICAgIHNlcXMgPSBzZWxmLmVuY29kZXJfZGVjb2Rlcl9hdHRuX2xheWVyX25vcm0oc2VxcykKCiAgICAgICAgcF9jaG9vc2UgPSBzZWxmLnBfY2hvb3NlX2xheWVyKHNlcXMsIGVuY29kZXJfb3V0cHV0KQoKICAgICAgICBzZXFzID0gc2VsZi5lbmNvZGVyX2RlY29kZXJfYXR0bigKICAgICAgICAgICAgc2VxcywKICAgICAgICAgICAgcGFkZGluZ19tYXNrLAogICAgICAgICAgICBlbmNvZGVyX291dHB1dCwKICAgICAgICAgICAgZW5jb2Rlcl9wYWRkaW5nX21hc2ssCiAgICAgICAgICAgIGVuY29kZXJfb3V0cHV0LAogICAgICAgICkKCiAgICAgICAgaWYgc2VsZi5lbmNvZGVyX2RlY29kZXJfYXR0bl9kcm9wb3V0IGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZXFzID0gc2VsZi5lbmNvZGVyX2RlY29kZXJfYXR0bl9kcm9wb3V0KHNlcXMpCgogICAgICAgIHNlcXMgPSBzZXFzICsgcmVzaWR1YWwKCiAgICAgICAgcmV0dXJuIHNlcXMsIHBfY2hvb3NlCgogICAgZGVmIF9mb3J3YXJkX2ZmbihzZWxmLCBzZXFzOiBUZW5zb3IpIC0+IFRlbnNvcjoKICAgICAgICByZXNpZHVhbCA9IHNlcXMKCiAgICAgICAgc2VxcyA9IHNlbGYuZmZuX2xheWVyX25vcm0oc2VxcykKCiAgICAgICAgc2VxcyA9IHNlbGYuZmZuKHNlcXMpCgogICAgICAgIGlmIHNlbGYuZmZuX2Ryb3BvdXQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlcXMgPSBzZWxmLmZmbl9kcm9wb3V0KHNlcXMpCgogICAgICAgIHNlcXMgPSBzZXFzICsgcmVzaWR1YWwKCiAgICAgICAgcmV0dXJuIHNlcXMK'),
    ('seamless/src/seamless_communication/models/conformer_shaw/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmNvbmZvcm1lcl9zaGF3LmJ1aWxkZXIgaW1wb3J0ICgKICAgIENvbmZvcm1lclNoYXdFbmNvZGVyQnVpbGRlciBhcyBDb25mb3JtZXJTaGF3RW5jb2RlckJ1aWxkZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5jb25mb3JtZXJfc2hhdy5idWlsZGVyIGltcG9ydCAoCiAgICBDb25mb3JtZXJTaGF3RW5jb2RlckNvbmZpZyBhcyBDb25mb3JtZXJTaGF3RW5jb2RlckNvbmZpZywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmNvbmZvcm1lcl9zaGF3LmJ1aWxkZXIgaW1wb3J0ICgKICAgIGNvbmZvcm1lcl9zaGF3X2FyY2hzIGFzIGNvbmZvcm1lcl9zaGF3X2FyY2hzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuY29uZm9ybWVyX3NoYXcuYnVpbGRlciBpbXBvcnQgKAogICAgY3JlYXRlX2NvbmZvcm1lcl9zaGF3X21vZGVsIGFzIGNyZWF0ZV9jb25mb3JtZXJfc2hhd19tb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmNvbmZvcm1lcl9zaGF3LmxvYWRlciBpbXBvcnQgKAogICAgbG9hZF9jb25mb3JtZXJfc2hhd19tb2RlbCBhcyBsb2FkX2NvbmZvcm1lcl9zaGF3X21vZGVsLAopCg=='),
    ('seamless/src/seamless_communication/models/conformer_shaw/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBNYXBwaW5nCgppbXBvcnQgdG9yY2gKCmZyb20gZmFpcnNlcTIuYXNzZXRzIGltcG9ydCBhc3NldF9zdG9yZSwgZG93bmxvYWRfbWFuYWdlcgpmcm9tIGZhaXJzZXEyLm1vZGVscy51dGlscyBpbXBvcnQgTW9kZWxMb2FkZXIKZnJvbSBmYWlyc2VxMi5tb2RlbHMudXRpbHMuY2hlY2twb2ludCBpbXBvcnQgY29udmVydF9mYWlyc2VxX2NoZWNrcG9pbnQKZnJvbSBmYWlyc2VxMi5tb2RlbHMud2F2MnZlYzIuYnVpbGRlciBpbXBvcnQgV2F2MlZlYzJDb25maWcKZnJvbSBmYWlyc2VxMi5tb2RlbHMud2F2MnZlYzIubG9hZGVyIGltcG9ydCBsb2FkX3dhdjJ2ZWMyX2NvbmZpZwpmcm9tIGZhaXJzZXEyLm1vZGVscy53YXYydmVjMi5tb2RlbCBpbXBvcnQgV2F2MlZlYzJNb2RlbAoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5jb25mb3JtZXJfc2hhdy5idWlsZGVyIGltcG9ydCAoCiAgICBjcmVhdGVfY29uZm9ybWVyX3NoYXdfbW9kZWwsCikKCgpkZWYgY29udmVydF9jb25mb3JtZXJfc2hhd19jaGVja3BvaW50KAogICAgY2hlY2twb2ludDogTWFwcGluZ1tzdHIsIEFueV0sIGNvbmZpZzogV2F2MlZlYzJDb25maWcKKSAtPiBNYXBwaW5nW3N0ciwgQW55XToKICAgICIiIkNvbnZlcnQgYSBmYWlyc2VxIGNvbmZvcm1lciBzaGF3IGNoZWNrcG9pbnQgdG8gZmFpcnNlcTIuIiIiCiAgICBzdGF0ZV9kaWN0ID0gY2hlY2twb2ludFsibW9kZWwiXQoKICAgICMgQ2hlY2sgaWYgd2UgaGF2ZSBhIGZhaXJzZXEyIGNoZWNrcG9pbnQuCiAgICBpZiAiZmluYWxfdGFyZ2V0X3Byb2oud2VpZ2h0IiBpbiBzdGF0ZV9kaWN0OgogICAgICAgIHJldHVybiBjaGVja3BvaW50CgogICAgZm9yIGtleSBpbiAoCiAgICAgICAgIm1sbV9wcm9qLndlaWdodCIsCiAgICAgICAgIm1sbV9wcm9qLmJpYXMiLAogICAgICAgICJlbmNvZGVyLmxheWVyX25vcm0ud2VpZ2h0IiwKICAgICAgICAiZW5jb2Rlci5sYXllcl9ub3JtLmJpYXMiLAogICAgKToKICAgICAgICBpZiBrZXkgaW4gc3RhdGVfZGljdDoKICAgICAgICAgICAgZGVsIHN0YXRlX2RpY3Rba2V5XQoKICAgIHN0YXRlX2RpY3RbInF1YW50aXplci5udW1fdXBkYXRlcyJdID0gdG9yY2guemVyb3MoKCksIGRldmljZT0iY3B1IikKCiAgICBrZXlfbWFwID0gewogICAgICAgICMgZm10OiBvZmYKICAgICAgICByIl5lbmNvZGVyXC5sYXllcnNcLihbMC05XSspXC5zZWxmX2F0dG5cLm91dF9wcm9qXC4iOiAgICAgICAgICAgIHIiZW5jb2Rlci5sYXllcnMuXDEuc2VsZl9hdHRuLm91dHB1dF9wcm9qLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuc2VsZl9hdHRuXC5yZWxfa19lbWJlZGRpbmdcLiI6ICAgICByImVuY29kZXIubGF5ZXJzLlwxLnNlbGZfYXR0bi5zZHBhLnJlbF9rX2VtYmVkLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuY29udl9tb2R1bGVcLmRlcHRod2lzZV9jb252XC4iOiAgICByImVuY29kZXIubGF5ZXJzLlwxLmNvbnYuZGVwdGh3aXNlX2NvbnYuIiwKICAgICAgICByIl5lbmNvZGVyXC5sYXllcnNcLihbMC05XSspXC5jb252X21vZHVsZVwubGF5ZXJfbm9ybVwuIjogICAgICAgIHIiZW5jb2Rlci5sYXllcnMuXDEuY29udl9sYXllcl9ub3JtLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuY29udl9tb2R1bGVcLmxheWVyX25vcm0yXC4iOiAgICAgICByImVuY29kZXIubGF5ZXJzLlwxLmNvbnYubGF5ZXJfbm9ybS4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmNvbnZfbW9kdWxlXC5wb2ludHdpc2VfY29udjFcLiI6ICAgciJlbmNvZGVyLmxheWVycy5cMS5jb252LnBvaW50d2lzZV9jb252MS4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmNvbnZfbW9kdWxlXC5wb2ludHdpc2VfY29udjJcLiI6ICAgciJlbmNvZGVyLmxheWVycy5cMS5jb252LnBvaW50d2lzZV9jb252Mi4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmZjMVwuIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgciJlbmNvZGVyLmxheWVycy5cMS5mZm4uaW5uZXJfcHJvai4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmZjMlwuIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgciJlbmNvZGVyLmxheWVycy5cMS5mZm4ub3V0cHV0X3Byb2ouIiwKICAgICAgICByIl5lbmNvZGVyXC5sYXllcnNcLihbMC05XSspXC5mZm4oMXwyKVwubGF5ZXJfbm9ybVwuIjogICAgICAgICAgIHIiZW5jb2Rlci5sYXllcnMuXDEuZmZuXDJfbGF5ZXJfbm9ybS4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmZmbigxfDIpXC53XzFcLiI6ICAgICAgICAgICAgICAgICAgciJlbmNvZGVyLmxheWVycy5cMS5mZm5cMi5pbm5lcl9wcm9qLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZmZuKDF8MilcLndfMlwuIjogICAgICAgICAgICAgICAgICByImVuY29kZXIubGF5ZXJzLlwxLmZmblwyLm91dHB1dF9wcm9qLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZmluYWxfbGF5ZXJfbm9ybVwuIjogICAgICAgICAgICAgICByImVuY29kZXIubGF5ZXJzLlwxLmxheWVyX25vcm0uIiwKICAgICAgICByIl5lbmNvZGVyXC5lbWJlZF90b2tlbnNcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIiZW5jb2Rlcl9mcm9udGVuZC5lbWJlZC4iLAogICAgICAgIHIiXmVuY29kZXJcLnBvc19jb252XC4wXC4iOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciJlbmNvZGVyX2Zyb250ZW5kLnBvc19lbmNvZGVyLmNvbnYuIiwKICAgICAgICByIl5mZWF0dXJlX2V4dHJhY3RvclwuY29udl9sYXllcnNcLihbMC05XSspXC4wXC4iOiAgICAgICAgICAgICAgIHIiZW5jb2Rlcl9mcm9udGVuZC5mZWF0dXJlX2V4dHJhY3Rvci5sYXllcnMuXDEuY29udi4iLAogICAgICAgIHIiXmZlYXR1cmVfZXh0cmFjdG9yXC5jb252X2xheWVyc1wuKFswLTldKylcLjJcLjFcLiI6ICAgICAgICAgICAgciJlbmNvZGVyX2Zyb250ZW5kLmZlYXR1cmVfZXh0cmFjdG9yLmxheWVycy5cMS5sYXllcl9ub3JtLiIsCiAgICAgICAgciJeZmVhdHVyZV9leHRyYWN0b3JcLmNvbnZfbGF5ZXJzXC4wXC4yXC4iOiAgICAgICAgICAgICAgICAgICAgICByImVuY29kZXJfZnJvbnRlbmQuZmVhdHVyZV9leHRyYWN0b3IubGF5ZXJzLjAuZ3JvdXBfbm9ybS4iLAogICAgICAgIHIiXmxheWVyX25vcm1cLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciJlbmNvZGVyX2Zyb250ZW5kLnBvc3RfZXh0cmFjdF9sYXllcl9ub3JtLiIsCiAgICAgICAgciJecG9zdF9leHRyYWN0X3Byb2pcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByImVuY29kZXJfZnJvbnRlbmQubW9kZWxfZGltX3Byb2ouIiwKICAgICAgICByIl5tYXNrX2VtYiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIibWFza2VyLnRlbXBvcmFsX21hc2tfZW1iZWQiLAogICAgICAgIHIiXnF1YW50aXplclwudmFycyI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciJxdWFudGl6ZXIuZW50cmllcyIsCiAgICAgICAgciJecXVhbnRpemVyXC53ZWlnaHRfcHJvalwuIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInF1YW50aXplci5lbnRyeV9wcm9qLiIsCiAgICAgICAgciJecHJvamVjdF9xXC4iOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByImZpbmFsX3RhcmdldF9wcm9qLiIsCiAgICAgICAgIyBmbXQ6IG9uCiAgICB9CgogICAgcmV0dXJuIGNvbnZlcnRfZmFpcnNlcV9jaGVja3BvaW50KGNoZWNrcG9pbnQsIGtleV9tYXApCgoKbG9hZF9jb25mb3JtZXJfc2hhd19tb2RlbCA9IE1vZGVsTG9hZGVyW1dhdjJWZWMyTW9kZWwsIFdhdjJWZWMyQ29uZmlnXSgKICAgIGFzc2V0X3N0b3JlLAogICAgZG93bmxvYWRfbWFuYWdlciwKICAgIGxvYWRfd2F2MnZlYzJfY29uZmlnLAogICAgY3JlYXRlX2NvbmZvcm1lcl9zaGF3X21vZGVsLAogICAgY29udmVydF9jb25mb3JtZXJfc2hhd19jaGVja3BvaW50LAopCg=='),
    ('seamless/src/seamless_communication/models/conformer_shaw/builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBhc2RpY3QsIGRhdGFjbGFzcwpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwKCmZyb20gZmFpcnNlcTIubW9kZWxzLmNvbmZvcm1lciBpbXBvcnQgQ29uZm9ybWVyQ29udm9sdXRpb24KZnJvbSBmYWlyc2VxMi5tb2RlbHMudXRpbHMuYXJjaF9yZWdpc3RyeSBpbXBvcnQgQXJjaGl0ZWN0dXJlUmVnaXN0cnkKZnJvbSBmYWlyc2VxMi5tb2RlbHMudzJ2YmVydCBpbXBvcnQgdzJ2YmVydF9hcmNocwpmcm9tIGZhaXJzZXEyLm1vZGVscy53YXYydmVjMi5idWlsZGVyIGltcG9ydCAoCiAgICBXYXYyVmVjMkJ1aWxkZXIsCiAgICBXYXYyVmVjMkNvbmZpZywKICAgIFdhdjJWZWMyRW5jb2RlckJ1aWxkZXIsCiAgICBXYXYyVmVjMkVuY29kZXJDb25maWcsCiAgICB3YXYydmVjMl9hcmNoLAopCmZyb20gZmFpcnNlcTIubW9kZWxzLndhdjJ2ZWMyLm1vZGVsIGltcG9ydCBXYXYyVmVjMk1vZGVsCmZyb20gZmFpcnNlcTIubm4udHJhbnNmb3JtZXIgaW1wb3J0IFNEUEEsIFNoYXdSZWxhdGl2ZVBvc2l0aW9uU0RQQSwgY3JlYXRlX2RlZmF1bHRfc2RwYQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZQoKCkBkYXRhY2xhc3MKY2xhc3MgU2hhd1JlbGF0aXZlUG9zaXRpb25TRFBBQ29uZmlnOgogICAgIiIiSG9sZHMgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIDpjbGFzczpTaGF3UmVsYXRpdmVQb3NpdGlvblNEUEEgbW9kdWxlLiIiIgoKICAgIG1heF9sZWZ0X3JlbF9wb3M6IGludAogICAgIiIiVGhlIGxlZnQgY2xpcHBpbmcgdmFsdWUgZm9yIHJlbGF0aXZlIHBvc2l0aW9ucy4iIiIKCiAgICBtYXhfcmlnaHRfcmVsX3BvczogT3B0aW9uYWxbaW50XQogICAgIiIiVGhlIHJpZ2h0IGNsaXBwaW5nIHZhbHVlIGZvciByZWxhdGl2ZSBwb3NpdGlvbnMuIiIiCgogICAgdXNlX3JlbF9wb3NfdmFsdWVzOiBib29sID0gRmFsc2UKICAgICIiIklmIFRydWUsIGFsc28gdXNlcyByZWxhdGl2ZSBwb3NpdGlvbiB2YWx1ZXMgdG8gY29tcHV0ZSByZWxhdGl2ZSBhdHRlbnRpb24uIiIiCgoKQGRhdGFjbGFzcwpjbGFzcyBDb25mb3JtZXJTaGF3RW5jb2RlckNvbmZpZyhXYXYyVmVjMkVuY29kZXJDb25maWcpOgogICAgIiIiSG9sZHMgdGhlIGNvbmZpZ3VyYXRpb24gb2YgYSBjb25mb3JtZXIgc2hhdyBlbmNvZGVyLiIiIgoKICAgIHNoYXdfcmVsX3Bvc19zZHBhX2NvbmZpZzogT3B0aW9uYWxbU2hhd1JlbGF0aXZlUG9zaXRpb25TRFBBQ29uZmlnXQogICAgIiIiVGhlIHBhcmFtZXRlcnMgZm9yIFNoYXdSZWxhdGl2ZVBvc2l0aW9uU0RQQS4iIiIKCgpjb25mb3JtZXJfc2hhd19hcmNocyA9IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5W0NvbmZvcm1lclNoYXdFbmNvZGVyQ29uZmlnXSgKICAgICJjb25mb3JtZXJfc2hhdyIKKQoKY29uZm9ybWVyX3NoYXdfYXJjaCA9IGNvbmZvcm1lcl9zaGF3X2FyY2hzLmRlY29yYXRvcgoKCkBjb25mb3JtZXJfc2hhd19hcmNoKCI2MDBtIikKZGVmIF9jb25mb3JtZXJfc2hhd182MDBtX2VuY29kZXIoKSAtPiBDb25mb3JtZXJTaGF3RW5jb2RlckNvbmZpZzoKICAgIHcydmJlcnRfY29uZmlnID0gdzJ2YmVydF9hcmNocy5nZXRfY29uZmlnKCI2MDBtIikKICAgIHcydjJfZW5jb2Rlcl9jb25maWcgPSB3MnZiZXJ0X2NvbmZpZy53MnYyX2NvbmZpZy5lbmNvZGVyX2NvbmZpZwogICAgc2RwYV9jb25maWcgPSBTaGF3UmVsYXRpdmVQb3NpdGlvblNEUEFDb25maWcoCiAgICAgICAgbWF4X2xlZnRfcmVsX3Bvcz02NCwKICAgICAgICBtYXhfcmlnaHRfcmVsX3Bvcz04LAogICAgICAgIHVzZV9yZWxfcG9zX3ZhbHVlcz1GYWxzZSwKICAgICkKICAgIGNvbmZvcm1lcl9zaGF3X2VuY29kZXJfY29uZmlnID0gQ29uZm9ybWVyU2hhd0VuY29kZXJDb25maWcoCiAgICAgICAgKiphc2RpY3QodzJ2Ml9lbmNvZGVyX2NvbmZpZyksCiAgICAgICAgc2hhd19yZWxfcG9zX3NkcGFfY29uZmlnPXNkcGFfY29uZmlnLAogICAgKQogICAgY29uZm9ybWVyX3NoYXdfZW5jb2Rlcl9jb25maWcucG9zX2VuY29kZXJfdHlwZSA9ICJzaGF3X3JlbGF0aXZlIgogICAgcmV0dXJuIGNvbmZvcm1lcl9zaGF3X2VuY29kZXJfY29uZmlnCgoKQHdhdjJ2ZWMyX2FyY2goImNvbmZvcm1lcl9zaGF3XzYwMG0iKQpkZWYgX2NvbmZvcm1lcl9zaGF3XzYwMG0oKSAtPiBXYXYyVmVjMkNvbmZpZzoKICAgIGVuY29kZXJfY29uZmlnID0gX2NvbmZvcm1lcl9zaGF3XzYwMG1fZW5jb2RlcigpCgogICAgcmV0dXJuIFdhdjJWZWMyQ29uZmlnKAogICAgICAgIGVuY29kZXJfY29uZmlnLAogICAgICAgIGZpbmFsX2RpbT03NjgsCiAgICAgICAgZmluYWxfcHJval9iaWFzPVRydWUsCiAgICAgICAgdGVtcG9yYWxfbWFza19zcGFuX2xlbj0xMCwKICAgICAgICBtYXhfdGVtcG9yYWxfbWFza19wcm9iPTAuNjUsCiAgICAgICAgc3BhdGlhbF9tYXNrX3NwYW5fbGVuPTEwLAogICAgICAgIG1heF9zcGF0aWFsX21hc2tfcHJvYj0wLjAsCiAgICAgICAgcXVhbnRpemVkX2RpbT03NjgsCiAgICAgICAgbnVtX2NvZGVib29rcz0yLAogICAgICAgIG51bV9jb2RlYm9va19lbnRyaWVzPTMyMCwKICAgICAgICBjb2RlYm9va19zYW1wbGluZ190ZW1wZXJhdHVyZT0oMi4wLCAwLjEsIDAuOTk5OTk1KSwKICAgICAgICBudW1fZGlzdHJhY3RvcnM9MTAwLAogICAgICAgIGxvZ2l0X3RlbXA9MC4xLAogICAgICAgIGRpdmVyc2l0eV9sb3NzX3dlaWdodD0wLjIsCiAgICApCgoKY2xhc3MgQ29uZm9ybWVyU2hhd0VuY29kZXJCdWlsZGVyKFdhdjJWZWMyRW5jb2RlckJ1aWxkZXIpOgogICAgIiIiCiAgICBCdWlsZHMgbW9kdWxlcyBvZiBhIGBDb25mb3JtZXJTaGF3RW5jb2RlckJ1aWxkZXJgLgoKICAgIFRoaXMgaXMgYSBDb25mb3JtZXIgYXJjaGl0ZWN0dXJlIHdpdGggdGhlc2UgZGlmZmVyZW5jZXM6CiAgICAtIFNoYXdSZWxhdGl2ZVBvc2l0aW9uU0RQQSBhcyB0aGUgU0RQQS4KICAgIC0gQ29uZm9ybWVyQ29udm9sdXRpb24gd2l0aCBjYXVzYWwgZGVwdGh3aXNlIGNvbnZvbHV0aW9uCiAgICBhbmQgbm9ybV90eXBlICJsYXllcl9ub3JtIi4KICAgICIiIgoKICAgIGNvbmZpZzogQ29uZm9ybWVyU2hhd0VuY29kZXJDb25maWcKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBjb25maWc6IENvbmZvcm1lclNoYXdFbmNvZGVyQ29uZmlnLAogICAgICAgICosCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gY29uZmlnOgogICAgICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICAgICAgOnBhcmFtIGRldmljZToKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBpbml0aWFsaXplIG1vZHVsZXMuCiAgICAgICAgOnBhcmFtIGR0eXBlOgogICAgICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgICAgICIiIgogICAgICAgIHN1cGVyKCkuX19pbml0X18oY29uZmlnLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZSkKCiAgICAgICAgYXNzZXJ0IHNlbGYuY29uZmlnLnVzZV9jb25mb3JtZXIsICJUaGlzIGFyY2hpdGVjdHVyZSBvbmx5IHN1cHBvcnRzIGEgQ29uZm9ybWVyLiIKICAgICAgICBhc3NlcnQgKAogICAgICAgICAgICBzZWxmLmNvbmZpZy5wb3NfZW5jb2Rlcl90eXBlID09ICJzaGF3X3JlbGF0aXZlIgogICAgICAgICksICJUaGlzIGFyY2hpdGVjdHVyZSBvbmx5IHN1cHBvcnRzIFNoYXdSZWxhdGl2ZVBvc2l0aW9uU0RQQS4iCgogICAgZGVmIGJ1aWxkX3NkcGEoc2VsZikgLT4gU0RQQToKICAgICAgICBpZiBzZWxmLmNvbmZpZy5zaGF3X3JlbF9wb3Nfc2RwYV9jb25maWcgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgICJgc2hhd19yZWxfcG9zX3NkcGFfY29uZmlnYCBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGBwb3NfZW5jb2Rlcl90eXBlYCBpcyAnc2hhd19yZWxhdGl2ZScuIgogICAgICAgICAgICApCgogICAgICAgIHNkcGEgPSBjcmVhdGVfZGVmYXVsdF9zZHBhKGF0dG5fZHJvcG91dF9wPXNlbGYuY29uZmlnLmF0dG5fZHJvcG91dF9wKQoKICAgICAgICBzZHBhX2NvbmZpZyA9IHNlbGYuY29uZmlnLnNoYXdfcmVsX3Bvc19zZHBhX2NvbmZpZwoKICAgICAgICByZXR1cm4gU2hhd1JlbGF0aXZlUG9zaXRpb25TRFBBKAogICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlbF9kaW0sCiAgICAgICAgICAgIHNlbGYuY29uZmlnLm51bV9lbmNvZGVyX2F0dG5faGVhZHMsCiAgICAgICAgICAgIHNkcGFfY29uZmlnLm1heF9sZWZ0X3JlbF9wb3MsCiAgICAgICAgICAgIG1heF9yaWdodF9yZWxfcG9zPXNkcGFfY29uZmlnLm1heF9yaWdodF9yZWxfcG9zLAogICAgICAgICAgICB1c2VfcmVsX3Bvc192YWx1ZXM9c2RwYV9jb25maWcudXNlX3JlbF9wb3NfdmFsdWVzLAogICAgICAgICAgICBpbm5lcl9zZHBhPXNkcGEsCiAgICAgICAgICAgIGRldmljZT1zZWxmLmRldmljZSwKICAgICAgICAgICAgZHR5cGU9c2VsZi5kdHlwZSwKICAgICAgICApCgogICAgZGVmIGJ1aWxkX2NvbmZvcm1lcl9jb252KHNlbGYpIC0+IENvbmZvcm1lckNvbnZvbHV0aW9uOgogICAgICAgIHJldHVybiBDb25mb3JtZXJDb252b2x1dGlvbigKICAgICAgICAgICAgc2VsZi5jb25maWcubW9kZWxfZGltLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5kZXB0aHdpc2VfY29udl9rZXJuZWxfc2l6ZSwKICAgICAgICAgICAgY2F1c2FsX2RlcHRod2lzZV9jb252PVRydWUsCiAgICAgICAgICAgIG5vcm1fdHlwZT0ibGF5ZXJfbm9ybSIsCiAgICAgICAgICAgIGRldmljZT1zZWxmLmRldmljZSwKICAgICAgICAgICAgZHR5cGU9c2VsZi5kdHlwZSwKICAgICAgICApCgoKZGVmIGNyZWF0ZV9jb25mb3JtZXJfc2hhd19tb2RlbCgKICAgIGNvbmZpZzogV2F2MlZlYzJDb25maWcsCiAgICAqLAogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAopIC0+IFdhdjJWZWMyTW9kZWw6CiAgICAiIiJDcmVhdGUgYSBjb25mb3JtZXIgc2hhdyBtb2RlbC4KCiAgICA6cGFyYW0gY29uZmlnOgogICAgICAgIFRoZSBjb25maWd1cmF0aW9uLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCiAgICBhc3NlcnQgaXNpbnN0YW5jZShjb25maWcuZW5jb2Rlcl9jb25maWcsIENvbmZvcm1lclNoYXdFbmNvZGVyQ29uZmlnKQoKICAgIGVuY29kZXJfYnVpbGRlciA9IENvbmZvcm1lclNoYXdFbmNvZGVyQnVpbGRlcigKICAgICAgICBjb25maWcuZW5jb2Rlcl9jb25maWcsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlCiAgICApCgogICAgYnVpbGRlciA9IFdhdjJWZWMyQnVpbGRlcihjb25maWcsIGVuY29kZXJfYnVpbGRlciwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpCgogICAgcmV0dXJuIGJ1aWxkZXIuYnVpbGRfbW9kZWwoKQo='),
    ('seamless/src/seamless_communication/models/generator/streamable.py', ''),
    ('seamless/src/seamless_communication/models/generator/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCg=='),
    ('seamless/src/seamless_communication/models/generator/ecapa_tdnn.py', ''),
    ('seamless/src/seamless_communication/models/generator/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgoKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgTWFwcGluZwoKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzIGltcG9ydCBDb25maWdMb2FkZXIsIE1vZGVsTG9hZGVyCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmdlbmVyYXRvci5idWlsZGVyIGltcG9ydCAoCiAgICBWb2NvZGVyQ29uZmlnLAogICAgY3JlYXRlX3ZvY29kZXJfbW9kZWwsCiAgICB2b2NvZGVyX2FyY2hzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuZ2VuZXJhdG9yLnZvY29kZXIgaW1wb3J0IFByZXRzc2VsVm9jb2RlcgoKbG9hZF9wcmV0c3NlbF92b2NvZGVyX2NvbmZpZyA9IENvbmZpZ0xvYWRlcltWb2NvZGVyQ29uZmlnXShhc3NldF9zdG9yZSwgdm9jb2Rlcl9hcmNocykKCgpsb2FkX3ByZXRzc2VsX3ZvY29kZXJfbW9kZWwgPSBNb2RlbExvYWRlcltQcmV0c3NlbFZvY29kZXIsIFZvY29kZXJDb25maWddKAogICAgYXNzZXRfc3RvcmUsCiAgICBkb3dubG9hZF9tYW5hZ2VyLAogICAgbG9hZF9wcmV0c3NlbF92b2NvZGVyX2NvbmZpZywKICAgIGNyZWF0ZV92b2NvZGVyX21vZGVsLAogICAgcmVzdHJpY3RfY2hlY2twb2ludHM9RmFsc2UsCikK'),
    ('seamless/src/seamless_communication/models/generator/builder.py', ''),
    ('seamless/src/seamless_communication/models/generator/ecapa_tdnn_builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIE9wdGlvbmFsCgpmcm9tIGZhaXJzZXEyLm1vZGVscy51dGlscy5hcmNoX3JlZ2lzdHJ5IGltcG9ydCBBcmNoaXRlY3R1cmVSZWdpc3RyeQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZQoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5nZW5lcmF0b3IuZWNhcGFfdGRubiBpbXBvcnQgRUNBUEFfVEROTgoKCkBkYXRhY2xhc3MKY2xhc3MgRWNhcGFURE5OQ29uZmlnOgogICAgY2hhbm5lbHM6IExpc3RbaW50XQogICAga2VybmVsX3NpemVzOiBMaXN0W2ludF0KICAgIGRpbGF0aW9uczogTGlzdFtpbnRdCiAgICBhdHRlbnRpb25fY2hhbm5lbHM6IGludAogICAgcmVzMm5ldF9zY2FsZTogaW50CiAgICBzZV9jaGFubmVsczogaW50CiAgICBnbG9iYWxfY29udGV4dDogYm9vbAogICAgZ3JvdXBzOiBMaXN0W2ludF0KICAgIGVtYmVkX2RpbTogaW50CiAgICBpbnB1dF9kaW06IGludAoKCmVjYXBhX3Rkbm5fYXJjaHMgPSBBcmNoaXRlY3R1cmVSZWdpc3RyeVtFY2FwYVRETk5Db25maWddKCJlY2FwYV90ZG5uIikKCmVjYXBhX3Rkbm5fYXJjaCA9IGVjYXBhX3Rkbm5fYXJjaHMuZGVjb3JhdG9yCgoKQGVjYXBhX3Rkbm5fYXJjaCgiYmFzZSIpCmRlZiBfYmFzZV9lY2FwYV90ZG5uKCkgLT4gRWNhcGFURE5OQ29uZmlnOgogICAgcmV0dXJuIEVjYXBhVEROTkNvbmZpZygKICAgICAgICBjaGFubmVscz1bNTEyLCA1MTIsIDUxMiwgNTEyLCAxNTM2XSwKICAgICAgICBrZXJuZWxfc2l6ZXM9WzUsIDMsIDMsIDMsIDFdLAogICAgICAgIGRpbGF0aW9ucz1bMSwgMiwgMywgNCwgMV0sCiAgICAgICAgYXR0ZW50aW9uX2NoYW5uZWxzPTEyOCwKICAgICAgICByZXMybmV0X3NjYWxlPTgsCiAgICAgICAgc2VfY2hhbm5lbHM9MTI4LAogICAgICAgIGdsb2JhbF9jb250ZXh0PVRydWUsCiAgICAgICAgZ3JvdXBzPVsxLCAxLCAxLCAxLCAxXSwKICAgICAgICBlbWJlZF9kaW09NTEyLAogICAgICAgIGlucHV0X2RpbT04MCwKICAgICkKCgpjbGFzcyBFY2FwYVRETk5CdWlsZGVyOgogICAgIiIiCiAgICBCdWlsZGVyIG1vZHVsZSBmb3IgRUNBUEFfVEROTiBtb2RlbAogICAgIiIiCgogICAgY29uZmlnOiBFY2FwYVRETk5Db25maWcKICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXQogICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGNvbmZpZzogRWNhcGFURE5OQ29uZmlnLAogICAgICAgICosCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gY29uZmlnOgogICAgICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICAgICAgOnBhcmFtIGRldmljZXY6CiAgICAgICAgICAgIFRoZSBkZXZpY2Ugb24gd2hpY2ggdG8gaW5pdGlhbGl6ZSBtb2R1bGVzLgogICAgICAgIDpwYXJhbSBkdHlwZToKICAgICAgICAgICAgVGhlIGRhdGEgdHlwZSBvZiBtb2R1bGUgcGFyYW1ldGVycyBhbmQgYnVmZmVycy4KICAgICAgICAiIiIKICAgICAgICBzZWxmLmNvbmZpZyA9IGNvbmZpZwoKICAgICAgICBzZWxmLmRldmljZSwgc2VsZi5kdHlwZSA9IGRldmljZSwgZHR5cGUKCiAgICBkZWYgYnVpbGRfbW9kZWwoc2VsZikgLT4gRUNBUEFfVEROTjoKICAgICAgICAiIiJCdWlsZCBhIG1vZGVsLiIiIgogICAgICAgIG1vZGVsID0gRUNBUEFfVEROTigKICAgICAgICAgICAgc2VsZi5jb25maWcuY2hhbm5lbHMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmtlcm5lbF9zaXplcywKICAgICAgICAgICAgc2VsZi5jb25maWcuZGlsYXRpb25zLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5hdHRlbnRpb25fY2hhbm5lbHMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnJlczJuZXRfc2NhbGUsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnNlX2NoYW5uZWxzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5nbG9iYWxfY29udGV4dCwKICAgICAgICAgICAgc2VsZi5jb25maWcuZ3JvdXBzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5lbWJlZF9kaW0sCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmlucHV0X2RpbSwKICAgICAgICApCiAgICAgICAgbW9kZWwudG8oZGV2aWNlPXNlbGYuZGV2aWNlLCBkdHlwZT1zZWxmLmR0eXBlKQogICAgICAgIHJldHVybiBtb2RlbAoKCmRlZiBjcmVhdGVfZWNhcGFfdGRubl9tb2RlbCgKICAgIGNvbmZpZzogRWNhcGFURE5OQ29uZmlnLAogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAopIC0+IEVDQVBBX1RETk46CiAgICAiIiJDcmVhdGUgYSBFQ0FQQV9URE5OIG1vZGVsLgoKICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCgogICAgcmV0dXJuIEVjYXBhVEROTkJ1aWxkZXIoY29uZmlnLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZSkuYnVpbGRfbW9kZWwoKQo='),
    ('seamless/src/seamless_communication/models/generator/vocoder.py', ''),
    ('seamless/src/seamless_communication/models/aligner/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuYWxpZ25lci5tb2RlbCBpbXBvcnQgKAogICAgVW5pdFkyQWxpZ25tZW50RW5jb2RlciBhcyBVbml0WTJBbGlnbm1lbnRFbmNvZGVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuYWxpZ25lci5tb2RlbCBpbXBvcnQgKAogICAgVW5pdFkyQWxpZ25tZW50RnJvbnRlbmQgYXMgVW5pdFkyQWxpZ25tZW50RnJvbnRlbmQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5hbGlnbmVyLm1vZGVsIGltcG9ydCAoCiAgICBVbml0WTJBbGlnbm1lbnRNb2RlbCBhcyBVbml0WTJBbGlnbm1lbnRNb2RlbCwKKQo='),
    ('seamless/src/seamless_communication/models/aligner/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBBbnksIExpc3QsIE1hcHBpbmcKCmltcG9ydCB0b3JjaApmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgYXNzZXRfc3RvcmUsIGRvd25sb2FkX21hbmFnZXIKZnJvbSBmYWlyc2VxMi5tb2RlbHMudXRpbHMgaW1wb3J0IENvbmZpZ0xvYWRlciwgTW9kZWxMb2FkZXIKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuYWxpZ25lci5idWlsZGVyIGltcG9ydCAoCiAgICBVbml0WTJBbGlnbm1lbnRDb25maWcsCiAgICBhbGlnbmVyX2FyY2hzLAogICAgY3JlYXRlX3VuaXR5Ml9hbGlnbm1lbnRfbW9kZWwsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5hbGlnbmVyLm1vZGVsIGltcG9ydCBVbml0WTJBbGlnbm1lbnRNb2RlbApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmNoYXJfdG9rZW5pemVyIGltcG9ydCBsb2FkX3VuaXR5X2NoYXJfdG9rZW5pemVyCgoKZGVmIGNvbnZlcnRfdW5pdHkyX2FsaWduZXJfY2hlY2twb2ludCgKICAgIGNoZWNrcG9pbnQ6IE1hcHBpbmdbc3RyLCBBbnldLCBjb25maWc6IFVuaXRZMkFsaWdubWVudENvbmZpZwopIC0+IE1hcHBpbmdbc3RyLCBBbnldOgogICAgaWYgKAogICAgICAgICJtb2RlbCIgaW4gY2hlY2twb2ludAogICAgICAgIGFuZCAiYWxpZ25tZW50X2VuY29kZXIudF9jb252LjEud2VpZ2h0IiBpbiBjaGVja3BvaW50WyJtb2RlbCJdCiAgICApOgogICAgICAgIHJldHVybiBjaGVja3BvaW50CgogICAgYWxpZ25tZW50X2Zyb250ZW5kX3N0YXRlZGljdCA9IHt9CiAgICB0ZXh0X2VtYl9zdGF0ZV9rZXltYXAgPSB7IndlaWdodCI6ICJhbGlnbm1lbnRfZnJvbnRlbmQuZW1iZWRfdGV4dC53ZWlnaHQifQogICAgZm9yIGssIHYgaW4gY2hlY2twb2ludFsidGV4dF9lbWJfc3RhdGUiXS5pdGVtcygpOgogICAgICAgIGFsaWdubWVudF9mcm9udGVuZF9zdGF0ZWRpY3RbdGV4dF9lbWJfc3RhdGVfa2V5bWFwW2tdXSA9IHYKCiAgICB1bml0X2VtYl9zdGF0ZV9rZXltYXAgPSB7IndlaWdodCI6ICJhbGlnbm1lbnRfZnJvbnRlbmQuZW1iZWRfdW5pdC53ZWlnaHQifQogICAgZm9yIGssIHYgaW4gY2hlY2twb2ludFsidW5pdF9lbWJfc3RhdGUiXS5pdGVtcygpOgogICAgICAgIGFsaWdubWVudF9mcm9udGVuZF9zdGF0ZWRpY3RbdW5pdF9lbWJfc3RhdGVfa2V5bWFwW2tdXSA9IHYKCiAgICBhbGlnbm1lbnRfZW5jb2Rlcl9zdGF0ZV9kaWN0ID0ge30KICAgIGZvciBrLCB2IGluIGNoZWNrcG9pbnRbImFsaWduZXJfc3RhdGUiXS5pdGVtcygpOgogICAgICAgIGFsaWdubWVudF9lbmNvZGVyX3N0YXRlX2RpY3RbZiJhbGlnbm1lbnRfZW5jb2Rlci57a30iXSA9IHYKCiAgICBtb2RlbF9zdGF0ZSA9IHsKICAgICAgICAqKmFsaWdubWVudF9lbmNvZGVyX3N0YXRlX2RpY3QsCiAgICAgICAgKiphbGlnbm1lbnRfZnJvbnRlbmRfc3RhdGVkaWN0LAogICAgfQoKICAgIGNoYXJfZW1iZWRzID0gbW9kZWxfc3RhdGVbImFsaWdubWVudF9mcm9udGVuZC5lbWJlZF90ZXh0LndlaWdodCJdCgogICAgaW5kZXhfbWFwcGluZyA9IF9nZXRfY2hhcl9pbmRleF9tYXBwaW5nKGNvbmZpZykKICAgIHZvY2FiX3NpemUgPSBsZW4oaW5kZXhfbWFwcGluZykKICAgIGNoYXJfZW1iZWRzW3RvcmNoLmFyYW5nZSh2b2NhYl9zaXplKV0gPSBjaGFyX2VtYmVkc1tpbmRleF9tYXBwaW5nXQoKICAgIGNoZWNrcG9pbnRbIm1vZGVsIl0gPSBtb2RlbF9zdGF0ZQoKICAgIHJldHVybiBjaGVja3BvaW50CgoKZGVmIF9nZXRfY2hhcl9pbmRleF9tYXBwaW5nKGNvbmZpZzogVW5pdFkyQWxpZ25tZW50Q29uZmlnKSAtPiBMaXN0W2ludF06CiAgICBjaGFyX3Rva2VuaXplciA9IGxvYWRfdW5pdHlfY2hhcl90b2tlbml6ZXIoY29uZmlnLm1vZGVsX25hbWVfb3JfY2FyZCkKICAgIHNwbV9vcmRlciA9IFsKICAgICAgICBjaGFyX3Rva2VuaXplci5tb2RlbC5pbmRleF90b190b2tlbihpKQogICAgICAgIGZvciBpIGluIHJhbmdlKGNoYXJfdG9rZW5pemVyLm1vZGVsLnZvY2FidWxhcnlfc2l6ZSkKICAgIF1bNDpdCiAgICBzcG1fdG9fZGljdF9tYXBwaW5nID0gewogICAgICAgIGNoOiBpZHgKICAgICAgICBmb3IgKGlkeCwgY2gpIGluIHppcCgKICAgICAgICAgICAgcmFuZ2UoNCwgY2hhcl90b2tlbml6ZXIubW9kZWwudm9jYWJ1bGFyeV9zaXplKSwKICAgICAgICAgICAgc29ydGVkKHNwbV9vcmRlciksCiAgICAgICAgKQogICAgfQogICAgbW9kZWxfdG9fZGljdF9tYXBwaW5nID0gWzAsIDEsIDIsIDNdICsgW3NwbV90b19kaWN0X21hcHBpbmdbY2hdIGZvciBjaCBpbiBzcG1fb3JkZXJdCiAgICByZXR1cm4gbW9kZWxfdG9fZGljdF9tYXBwaW5nCgoKbG9hZF91bml0eTJfYWxpZ25tZW50X2NvbmZpZyA9IENvbmZpZ0xvYWRlcltVbml0WTJBbGlnbm1lbnRDb25maWddKAogICAgYXNzZXRfc3RvcmUsIGFsaWduZXJfYXJjaHMKKQoKbG9hZF91bml0eTJfYWxpZ25tZW50X21vZGVsID0gTW9kZWxMb2FkZXJbVW5pdFkyQWxpZ25tZW50TW9kZWwsIFVuaXRZMkFsaWdubWVudENvbmZpZ10oCiAgICBhc3NldF9zdG9yZSwKICAgIGRvd25sb2FkX21hbmFnZXIsCiAgICBsb2FkX3VuaXR5Ml9hbGlnbm1lbnRfY29uZmlnLAogICAgY3JlYXRlX3VuaXR5Ml9hbGlnbm1lbnRfbW9kZWwsCiAgICBjb252ZXJ0X3VuaXR5Ml9hbGlnbmVyX2NoZWNrcG9pbnQsCiAgICByZXN0cmljdF9jaGVja3BvaW50cz1GYWxzZSwKKQo='),
    ('seamless/src/seamless_communication/models/aligner/builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gZGF0YWNsYXNzZXMgaW1wb3J0IGRhdGFjbGFzcwpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIFVuaW9uCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5hc3NldHMuY2FyZCBpbXBvcnQgQXNzZXRDYXJkCmZyb20gZmFpcnNlcTIuZGF0YS52b2NhYnVsYXJ5X2luZm8gaW1wb3J0IFZvY2FidWxhcnlJbmZvCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzLmFyY2hfcmVnaXN0cnkgaW1wb3J0IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5CmZyb20gZmFpcnNlcTIubm4uZW1iZWRkaW5nIGltcG9ydCBTdGFuZGFyZEVtYmVkZGluZywgaW5pdF9zY2FsZWRfZW1iZWRkaW5nCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmFsaWduZXIubW9kZWwgaW1wb3J0ICgKICAgIFVuaXRZMkFsaWdubWVudEVuY29kZXIsCiAgICBVbml0WTJBbGlnbm1lbnRGcm9udGVuZCwKICAgIFVuaXRZMkFsaWdubWVudE1vZGVsLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkuY2hhcl90b2tlbml6ZXIgaW1wb3J0IGxvYWRfdW5pdHlfY2hhcl90b2tlbml6ZXIKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5sb2FkZXIgaW1wb3J0IGxvYWRfdW5pdHlfdW5pdF90b2tlbml6ZXIKCgpAZGF0YWNsYXNzCmNsYXNzIEFsaWdubWVudEVuY29kZXJDb25maWc6CiAgICBtb2RlbF9kaW06IGludAoKICAgIGZlYXRfZGltOiBpbnQKCiAgICBudW1fdGV4dF9sYXllcnM6IGludAoKICAgIG51bV9mZWF0X2xheWVyczogaW50CgogICAgZHJvcG91dDogZmxvYXQKCiAgICB0ZW1wZXJhdHVyZTogZmxvYXQKCiAgICByZWR1Y3Rpb25fZmFjdG9yOiBpbnQKCgpAZGF0YWNsYXNzCmNsYXNzIFVuaXRZMkFsaWdubWVudEZyb250ZW5kQ29uZmlnOgogICAgdW5pdF92b2NhYl9pbmZvOiBWb2NhYnVsYXJ5SW5mbwoKICAgIHRleHRfdm9jYWJfc2l6ZTogaW50CgoKQGRhdGFjbGFzcwpjbGFzcyBVbml0WTJBbGlnbm1lbnRDb25maWc6CiAgICBtb2RlbF9uYW1lX29yX2NhcmQ6IFVuaW9uW3N0ciwgQXNzZXRDYXJkXQoKICAgIGFsaWdubWVudF9lbmNvZGVyX2NvbmZpZzogQWxpZ25tZW50RW5jb2RlckNvbmZpZwoKICAgIGFsaWdubWVudF9mcm9udGVuZF9jb25maWc6IFVuaXRZMkFsaWdubWVudEZyb250ZW5kQ29uZmlnCgoKYWxpZ25lcl9hcmNocyA9IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5W1VuaXRZMkFsaWdubWVudENvbmZpZ10oInVuaXR5Ml9hbGlnbmVyIikKCmFsaWduZXJfYXJjaCA9IGFsaWduZXJfYXJjaHMuZGVjb3JhdG9yCgoKQGFsaWduZXJfYXJjaCgibmFyX3QydV9hbGlnbmVyIikKZGVmIF9hbGlnbmVyX25hcl90MnUoKSAtPiBVbml0WTJBbGlnbm1lbnRDb25maWc6CiAgICBlbmNvZGVyX2NvbmZpZyA9IEFsaWdubWVudEVuY29kZXJDb25maWcoCiAgICAgICAgbW9kZWxfZGltPTEwMjQsCiAgICAgICAgZmVhdF9kaW09MTAyNCwKICAgICAgICBudW1fdGV4dF9sYXllcnM9MiwKICAgICAgICBudW1fZmVhdF9sYXllcnM9MywKICAgICAgICBkcm9wb3V0PTAuMSwKICAgICAgICB0ZW1wZXJhdHVyZT0xLjAsCiAgICAgICAgcmVkdWN0aW9uX2ZhY3Rvcj0xLAogICAgKQoKICAgIGZyb250ZW5kX2NvbmZpZyA9IFVuaXRZMkFsaWdubWVudEZyb250ZW5kQ29uZmlnKAogICAgICAgIHVuaXRfdm9jYWJfaW5mbz1Wb2NhYnVsYXJ5SW5mbygKICAgICAgICAgICAgc2l6ZT0xMDA4MiwgdW5rX2lkeD0zLCBib3NfaWR4PTAsIGVvc19pZHg9MiwgcGFkX2lkeD0xCiAgICAgICAgKSwKICAgICAgICB0ZXh0X3ZvY2FiX3NpemU9MTA5NDMsCiAgICApCgogICAgcmV0dXJuIFVuaXRZMkFsaWdubWVudENvbmZpZygKICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ9Im5hcl90MnVfYWxpZ25lciIsCiAgICAgICAgYWxpZ25tZW50X2VuY29kZXJfY29uZmlnPWVuY29kZXJfY29uZmlnLAogICAgICAgIGFsaWdubWVudF9mcm9udGVuZF9jb25maWc9ZnJvbnRlbmRfY29uZmlnLAogICAgKQoKCmNsYXNzIFVuaXRZMkFsaWdubWVudEJ1aWxkZXI6CiAgICBjb25maWc6IFVuaXRZMkFsaWdubWVudENvbmZpZwogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdCiAgICBkdHlwZTogRGF0YVR5cGUKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBjb25maWc6IFVuaXRZMkFsaWdubWVudENvbmZpZywKICAgICAgICAqLAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IERhdGFUeXBlID0gdG9yY2guZmxvYXQzMiwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gY29uZmlnOgogICAgICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICAgICAgOnBhcmFtIGRldmljZToKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBpbml0aWFsaXplIG1vZHVsZXMuCiAgICAgICAgOnBhcmFtIGR0eXBlOgogICAgICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29uZmlnID0gY29uZmlnCgogICAgICAgIHNlbGYuZGV2aWNlLCBzZWxmLmR0eXBlID0gZGV2aWNlLCBkdHlwZQoKICAgIGRlZiBidWlsZF9tb2RlbChzZWxmKSAtPiBVbml0WTJBbGlnbm1lbnRNb2RlbDoKICAgICAgICBhbGlnbm1lbnRfZnJvbnRlbmQgPSBzZWxmLmJ1aWxkX2FsaWdubWVudF9mcm9udGVuZCgpCgogICAgICAgIGFsaWdubWVudF9lbmNvZGVyID0gc2VsZi5idWlsZF9hbGlnbm1lbnRfZW5jb2RlcigpCgogICAgICAgIHJldHVybiBVbml0WTJBbGlnbm1lbnRNb2RlbChhbGlnbm1lbnRfZnJvbnRlbmQsIGFsaWdubWVudF9lbmNvZGVyKQoKICAgIGRlZiBidWlsZF9hbGlnbm1lbnRfZnJvbnRlbmQoc2VsZikgLT4gVW5pdFkyQWxpZ25tZW50RnJvbnRlbmQ6CiAgICAgICAgdGV4dF90b2tlbml6ZXIgPSBsb2FkX3VuaXR5X2NoYXJfdG9rZW5pemVyKHNlbGYuY29uZmlnLm1vZGVsX25hbWVfb3JfY2FyZCkKCiAgICAgICAgdW5pdF90b2tlbml6ZXIgPSBsb2FkX3VuaXR5X3VuaXRfdG9rZW5pemVyKHNlbGYuY29uZmlnLm1vZGVsX25hbWVfb3JfY2FyZCkKCiAgICAgICAgZW1iZWRfdGV4dCA9IFN0YW5kYXJkRW1iZWRkaW5nKAogICAgICAgICAgICBudW1fZW1iZWRkaW5ncz1zZWxmLmNvbmZpZy5hbGlnbm1lbnRfZnJvbnRlbmRfY29uZmlnLnRleHRfdm9jYWJfc2l6ZSwKICAgICAgICAgICAgZW1iZWRkaW5nX2RpbT1zZWxmLmNvbmZpZy5hbGlnbm1lbnRfZW5jb2Rlcl9jb25maWcubW9kZWxfZGltLAogICAgICAgICAgICBwYWRfaWR4PXNlbGYuY29uZmlnLmFsaWdubWVudF9mcm9udGVuZF9jb25maWcudW5pdF92b2NhYl9pbmZvLnBhZF9pZHgsCiAgICAgICAgICAgIGluaXRfZm49aW5pdF9zY2FsZWRfZW1iZWRkaW5nLAogICAgICAgICAgICBkZXZpY2U9c2VsZi5kZXZpY2UsCiAgICAgICAgICAgIGR0eXBlPXNlbGYuZHR5cGUsCiAgICAgICAgKQoKICAgICAgICBlbWJlZF91bml0ID0gU3RhbmRhcmRFbWJlZGRpbmcoCiAgICAgICAgICAgIG51bV9lbWJlZGRpbmdzPXNlbGYuY29uZmlnLmFsaWdubWVudF9mcm9udGVuZF9jb25maWcudW5pdF92b2NhYl9pbmZvLnNpemUsCiAgICAgICAgICAgIGVtYmVkZGluZ19kaW09c2VsZi5jb25maWcuYWxpZ25tZW50X2VuY29kZXJfY29uZmlnLm1vZGVsX2RpbSwKICAgICAgICAgICAgcGFkX2lkeD1zZWxmLmNvbmZpZy5hbGlnbm1lbnRfZnJvbnRlbmRfY29uZmlnLnVuaXRfdm9jYWJfaW5mby5wYWRfaWR4LAogICAgICAgICAgICBpbml0X2ZuPWluaXRfc2NhbGVkX2VtYmVkZGluZywKICAgICAgICAgICAgZGV2aWNlPXNlbGYuZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1zZWxmLmR0eXBlLAogICAgICAgICkKCiAgICAgICAgcmV0dXJuIFVuaXRZMkFsaWdubWVudEZyb250ZW5kKAogICAgICAgICAgICBlbWJlZF90ZXh0LCBlbWJlZF91bml0LCB0ZXh0X3Rva2VuaXplciwgdW5pdF90b2tlbml6ZXIKICAgICAgICApCgogICAgZGVmIGJ1aWxkX2FsaWdubWVudF9lbmNvZGVyKHNlbGYsIHRyYWluaW5nOiBib29sID0gRmFsc2UpIC0+IFVuaXRZMkFsaWdubWVudEVuY29kZXI6CiAgICAgICAgY2ZnID0gc2VsZi5jb25maWcuYWxpZ25tZW50X2VuY29kZXJfY29uZmlnCiAgICAgICAgYWxpZ25tZW50X2VuY29kZXIgPSBVbml0WTJBbGlnbm1lbnRFbmNvZGVyKAogICAgICAgICAgICBlbWJlZF9kaW09Y2ZnLm1vZGVsX2RpbSwKICAgICAgICAgICAgZmVhdF9kaW09Y2ZnLmZlYXRfZGltLAogICAgICAgICAgICB0ZXh0X2xheWVycz1jZmcubnVtX3RleHRfbGF5ZXJzLAogICAgICAgICAgICBmZWF0X2xheWVycz1jZmcubnVtX2ZlYXRfbGF5ZXJzLAogICAgICAgICAgICBkcm9wb3V0PWNmZy5kcm9wb3V0LAogICAgICAgICAgICB0ZW1wZXJhdHVyZT1jZmcudGVtcGVyYXR1cmUsCiAgICAgICAgICAgIHJlZHVjdGlvbl9mYWN0b3I9Y2ZnLnJlZHVjdGlvbl9mYWN0b3IsCiAgICAgICAgICAgIGR0eXBlPXNlbGYuZHR5cGUsCiAgICAgICAgKQogICAgICAgIGFsaWdubWVudF9lbmNvZGVyLnRyYWluaW5nID0gdHJhaW5pbmcKCiAgICAgICAgcmV0dXJuIGFsaWdubWVudF9lbmNvZGVyCgoKZGVmIGNyZWF0ZV91bml0eTJfYWxpZ25tZW50X21vZGVsKAogICAgY29uZmlnOiBVbml0WTJBbGlnbm1lbnRDb25maWcsCiAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgZHR5cGU6IERhdGFUeXBlID0gdG9yY2guZmxvYXQzMiwKKSAtPiBVbml0WTJBbGlnbm1lbnRNb2RlbDoKICAgICIiIkNyZWF0ZSBhIFVuaXRZIG1vZGVsLgoKICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCgogICAgdW5pdHkyX2FsaWduZXJfYnVpbGRlciA9IFVuaXRZMkFsaWdubWVudEJ1aWxkZXIoCiAgICAgICAgY29uZmlnLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApCgogICAgcmV0dXJuIHVuaXR5Ml9hbGlnbmVyX2J1aWxkZXIuYnVpbGRfbW9kZWwoKQo='),
    ('seamless/src/seamless_communication/models/aligner/alignment_extractor.py', ''),
    ('seamless/src/seamless_communication/models/aligner/model.py', ''),
    ('seamless/src/seamless_communication/denoise/__init__.py', ''),
    ('seamless/src/seamless_communication/denoise/demucs.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aAppbXBvcnQgc3VicHJvY2VzcyBhcyBzcAppbXBvcnQgdGVtcGZpbGUKZnJvbSB0eXBpbmcgaW1wb3J0IFVuaW9uCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvcgppbXBvcnQgdG9yY2hhdWRpbwpmcm9tIGZhaXJzZXEyLm1lbW9yeSBpbXBvcnQgTWVtb3J5QmxvY2sKZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzCmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbAppbXBvcnQgb3MKaW1wb3J0IGxvZ2dpbmcKClNBTVBMSU5HX1JBVEUgPSAxNjAwMAoKbG9nZ2luZy5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dpbmcuSU5GTywKICAgIGZvcm1hdD0iJShhc2N0aW1lKXMgJShsZXZlbG5hbWUpcyAtLSAlKG5hbWUpczogJShtZXNzYWdlKXMiLAopCgpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcigiZGVtdWNzIikKCkBkYXRhY2xhc3MKY2xhc3MgRGVub2lzaW5nQ29uZmlnOgogICAgZGVmIF9faW5pdF9fKAogICAgICAgICAgICBzZWxmLAogICAgICAgICAgICBmaWx0ZXJfd2lkdGg6IGludCA9IDMsCiAgICAgICAgICAgIG1vZGVsPSJodGRlbXVjcyIsIAogICAgICAgICAgICBzYW1wbGVfcmF0ZT1TQU1QTElOR19SQVRFLAogICAgICAgICAgICB0d29fc3RlbXM9Tm9uZSwKICAgICAgICAgICAgZmxvYXQzMj1GYWxzZSwKICAgICAgICAgICAgaW50MjQ9RmFsc2UpOgogICAgICAgIHNlbGYuZmlsdGVyX3dpZHRoID0gZmlsdGVyX3dpZHRoCiAgICAgICAgc2VsZi5tb2RlbCA9IG1vZGVsCiAgICAgICAgc2VsZi5zYW1wbGVfcmF0ZSA9IHNhbXBsZV9yYXRlCiAgICAgICAgc2VsZi50d29fc3RlbXMgPSB0d29fc3RlbXMKICAgICAgICBzZWxmLmZsb2F0MzIgPSBmbG9hdDMyCiAgICAgICAgc2VsZi5pbnQyNCA9IGludDI0CgpjbGFzcyBEZW11Y3MoKToKICAgIGRlZiBfX2luaXRfXygKICAgICAgICAgICAgc2VsZiwgCiAgICAgICAgICAgIGRlbm9pc2VfY29uZmlnOiBPcHRpb25hbFtEZW5vaXNpbmdDb25maWddKToKICAgICAgICBzZWxmLmRlbm9pc2VfY29uZmlnID0gZGVub2lzZV9jb25maWcKICAgICAgICBzZWxmLnRlbXBfZmlsZXMgPSBbXQoKICAgIGRlZiBydW5fY29tbWFuZF93aXRoX3RlbXBfZmlsZShzZWxmLCBjbWQpOgogICAgICAgIHdpdGggdGVtcGZpbGUuTmFtZWRUZW1wb3JhcnlGaWxlKG1vZGU9J3crJywgZGVsZXRlPUZhbHNlKSBhcyB0ZW1wOgogICAgICAgICAgICBzZWxmLnRlbXBfZmlsZXMuYXBwZW5kKHRlbXAubmFtZSkKICAgICAgICAgICAgcmVzdWx0ID0gc3AucnVuKGNtZCwgc3Rkb3V0PXRlbXAsIHN0ZGVycj10ZW1wLCB0ZXh0PVRydWUpCiAgICAgICAgICAgICMgSWYgdGhlcmUgd2FzIGFuIGVycm9yLCBsb2cgdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGUKICAgICAgICAgICAgaWYgcmVzdWx0LnJldHVybmNvZGUgIT0gMDoKICAgICAgICAgICAgICAgIHRlbXAuc2VlaygwKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8odGVtcC5yZWFkKCkpCgogICAgZGVmIGNsZWFudXBfdGVtcF9maWxlcyhzZWxmKToKICAgICAgICBmb3IgdGVtcF9maWxlIGluIHNlbGYudGVtcF9maWxlczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MucmVtb3ZlKHRlbXBfZmlsZSkgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIkZhaWxlZCB0byByZW1vdmUgdGVtcG9yYXJ5IGZpbGU6IHt0ZW1wX2ZpbGV9LiBFcnJvcjoge2V9IikKCiAgICBkZWYgZGVub2lzZShzZWxmLCBhdWRpbzogVW5pb25bc3RyLCBUZW5zb3JdKToKCiAgICAgICAgaWYgc2VsZi5kZW5vaXNlX2NvbmZpZyBpcyBOb25lOgogICAgICAgICAgc2VsZi5kZW5vaXNlX2NvbmZpZyA9IERlbm9pc2luZ0NvbmZpZygpCgogICAgICAgIGlmIGlzaW5zdGFuY2UoYXVkaW8sIFRlbnNvcik6CiAgICAgICAgICAgIHdpdGggdGVtcGZpbGUuTmFtZWRUZW1wb3JhcnlGaWxlKHN1ZmZpeD0iLndhdiIsIGRlbGV0ZT1GYWxzZSkgYXMgdGVtcF93YXY6CiAgICAgICAgICAgICAgICBzZWxmLnRlbXBfZmlsZXMuYXBwZW5kKHRlbXBfd2F2Lm5hbWUpCiAgICAgICAgICAgICAgICB0b3JjaGF1ZGlvLnNhdmUodGVtcF93YXYubmFtZSwgYXVkaW8sIHNlbGYuZGVub2lzZV9jb25maWcuc2FtcGxlX3JhdGUpCiAgICAgICAgICAgICAgICBhdWRpbyA9IHRlbXBfd2F2Lm5hbWUKCiAgICAgICAgaWYgbm90IFBhdGgoYXVkaW8pLmV4aXN0cygpOgogICAgICAgICAgICBsb2dnZXIuaW5mbygiSW5wdXQgZmlsZSBkb2VzIG5vdCBleGlzdC4iKQogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICB3aXRoIHRlbXBmaWxlLlRlbXBvcmFyeURpcmVjdG9yeSgpIGFzIHRlbXBfZGlyOgogICAgICAgICAgICBjbWQgPSBbInB5dGhvbjMiLCAiLW0iLCAiZGVtdWNzLnNlcGFyYXRlIiwgIi1vIiwgdGVtcF9kaXIsICItbiIsIHNlbGYuZGVub2lzZV9jb25maWcubW9kZWxdCiAgICAgICAgICAgIGlmIHNlbGYuZGVub2lzZV9jb25maWcuZmxvYXQzMjoKICAgICAgICAgICAgICAgIGNtZCArPSBbIi0tZmxvYXQzMiJdCiAgICAgICAgICAgIGlmIHNlbGYuZGVub2lzZV9jb25maWcuaW50MjQ6CiAgICAgICAgICAgICAgICBjbWQgKz0gWyItLWludDI0Il0KICAgICAgICAgICAgaWYgc2VsZi5kZW5vaXNlX2NvbmZpZy50d29fc3RlbXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBjbWQgKz0gW2YiLS10d28tc3RlbXM9e3NlbGYuZGVub2lzZV9jb25maWcudHdvX3N0ZW1zfSJdCgogICAgICAgICAgICBhdWRpb19wYXRoID0gUGF0aChhdWRpbykKICAgICAgICAgICAgYXVkaW9fbmFtZSA9IGF1ZGlvX3BhdGguc3RlbQogICAgICAgICAgICBhdWRpbyA9IFtzdHIoYXVkaW8pXQoKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkV4ZWN1dGluZyBjb21tYW5kOiIsICIgIi5qb2luKGNtZCkpCiAgICAgICAgICAgIHNlbGYucnVuX2NvbW1hbmRfd2l0aF90ZW1wX2ZpbGUoY21kICsgYXVkaW8pCgogICAgICAgICAgICBzZXBhcmF0ZWRfZmlsZXMgPSBsaXN0KFBhdGgodGVtcF9kaXIgKyAiL2h0ZGVtdWNzLyIgKyBhdWRpb19uYW1lKS5nbG9iKCIqdm9jYWxzLndhdioiKSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBzZXBhcmF0ZWRfZmlsZXM6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiU2VwYXJhdGVkIHZvY2FscyBmaWxlIG5vdCBmb3VuZC4iKQogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgICAgIHdhdmVmb3JtLCBzYW1wbGVfcmF0ZSA9IHRvcmNoYXVkaW8ubG9hZChzZXBhcmF0ZWRfZmlsZXNbMF0pCgogICAgICAgICAgICBpZiB3YXZlZm9ybS5zaGFwZVswXSA+IDE6CiAgICAgICAgICAgICAgICB3YXZlZm9ybSA9IHdhdmVmb3JtLm1lYW4oZGltPTAsIGtlZXBkaW09VHJ1ZSkKICAgICAgICAgICAgaWYgc2FtcGxlX3JhdGUgIT0gMTYwMDA6CiAgICAgICAgICAgICAgICByZXNhbXBsZXIgPSB0b3JjaGF1ZGlvLnRyYW5zZm9ybXMuUmVzYW1wbGUob3JpZ19mcmVxPXNhbXBsZV9yYXRlLCBuZXdfZnJlcT0xNjAwMCkKICAgICAgICAgICAgICAgIHdhdmVmb3JtID0gcmVzYW1wbGVyKHdhdmVmb3JtKQogICAgICAgICAgICAgICAgc2FtcGxlX3JhdGUgPSAxNjAwMAoKICAgICAgICAgICAgd2l0aCB0ZW1wZmlsZS5OYW1lZFRlbXBvcmFyeUZpbGUoc3VmZml4PSIud2F2IiwgZGVsZXRlPVRydWUpIGFzIHRlbXBfd2F2MjoKICAgICAgICAgICAgICAgIHRvcmNoYXVkaW8uc2F2ZSh0ZW1wX3dhdjIubmFtZSwgd2F2ZWZvcm0sIHNhbXBsZV9yYXRlPXNhbXBsZV9yYXRlKQogICAgICAgICAgICAgICAgYmxvY2sgPSBNZW1vcnlCbG9jayh0ZW1wX3dhdjIucmVhZCgpKQoKICAgICAgICAgICAgc2VsZi5jbGVhbnVwX3RlbXBfZmlsZXMoKQoKICAgICAgICAgICAgcmV0dXJuIGJsb2NrCiAgICAgICAg'),
    ('seamless/src/seamless_communication/datasets/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/src/seamless_communication/datasets/huggingface.py', ''),
    ('seamless/src/seamless_communication/datasets/datatypes.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdCwgTGlzdCwgT3B0aW9uYWwKCmltcG9ydCB0b3JjaAoKCkBkYXRhY2xhc3MKY2xhc3MgTXVsdGltb2RhbFNhbXBsZToKICAgIGlkOiBpbnQKICAgIGxhbmc6IHN0cgogICAgdGV4dDogc3RyCiAgICBhdWRpb19sb2NhbF9wYXRoOiBPcHRpb25hbFtzdHJdID0gTm9uZQogICAgd2F2ZWZvcm06IE9wdGlvbmFsW3RvcmNoLlRlbnNvcl0gPSBOb25lCiAgICBzYW1wbGluZ19yYXRlOiBPcHRpb25hbFtpbnRdID0gTm9uZQogICAgdW5pdHM6IE9wdGlvbmFsW0xpc3RbaW50XV0gPSBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9qc29uKGNscywganM6IERpY3Rbc3RyLCBBbnldKSAtPiAiTXVsdGltb2RhbFNhbXBsZSI6CiAgICAgICAgcmV0dXJuIGNscygKICAgICAgICAgICAgaWQ9anNbImlkIl0sCiAgICAgICAgICAgIGxhbmc9anNbImxhbmciXSwKICAgICAgICAgICAgdGV4dD1qc1sidGV4dCJdLAogICAgICAgICAgICBhdWRpb19sb2NhbF9wYXRoPWpzLmdldCgiYXVkaW9fbG9jYWxfcGF0aCIpLAogICAgICAgICAgICB3YXZlZm9ybT1Ob25lLCAgIyBkb24ndCBzZXJpYWxpemUKICAgICAgICAgICAgc2FtcGxpbmdfcmF0ZT1qcy5nZXQoInNhbXBsaW5nX3JhdGUiKSwKICAgICAgICAgICAgdW5pdHM9anMuZ2V0KCJ1bml0cyIpLAogICAgICAgICkKCgpAZGF0YWNsYXNzCmNsYXNzIExhbmdQYWlyU2FtcGxlOgogICAgc291cmNlOiBNdWx0aW1vZGFsU2FtcGxlCiAgICB0YXJnZXQ6IE11bHRpbW9kYWxTYW1wbGUKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX2pzb24oY2xzLCBqczogRGljdFtzdHIsIEFueV0pIC0+ICJMYW5nUGFpclNhbXBsZSI6CiAgICAgICAgcmV0dXJuIGNscygKICAgICAgICAgICAgc291cmNlPU11bHRpbW9kYWxTYW1wbGUuZnJvbV9qc29uKGpzWyJzb3VyY2UiXSksCiAgICAgICAgICAgIHRhcmdldD1NdWx0aW1vZGFsU2FtcGxlLmZyb21fanNvbihqc1sidGFyZ2V0Il0pLAogICAgICAgICkK'),
    ('seamless/build/lib/seamless_communication/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aAoKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IEZpbGVBc3NldE1ldGFkYXRhUHJvdmlkZXIsIGFzc2V0X3N0b3JlCgpfX3ZlcnNpb25fXyA9ICIwLjEuMCIKCgpkZWYgX3VwZGF0ZV9hc3NldF9zdG9yZSgpIC0+IE5vbmU6CiAgICBjYXJkc19kaXIgPSBQYXRoKF9fZmlsZV9fKS5wYXJlbnQuam9pbnBhdGgoImNhcmRzIikKCiAgICBhc3NldF9zdG9yZS5tZXRhZGF0YV9wcm92aWRlcnMuYXBwZW5kKEZpbGVBc3NldE1ldGFkYXRhUHJvdmlkZXIoY2FyZHNfZGlyKSkKCgpfdXBkYXRlX2Fzc2V0X3N0b3JlKCkK'),
    ('seamless/build/lib/seamless_communication/store.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgpmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgSW5Qcm9jQXNzZXRNZXRhZGF0YVByb3ZpZGVyLCBhc3NldF9zdG9yZQoKCmRlZiBhZGRfZ2F0ZWRfYXNzZXRzKG1vZGVsX2RpcjogUGF0aCkgLT4gTm9uZToKICAgIGFzc2V0X3N0b3JlLmVudl9yZXNvbHZlcnMuYXBwZW5kKGxhbWJkYTogImdhdGVkIikKCiAgICBtb2RlbF9kaXIgPSBtb2RlbF9kaXIucmVzb2x2ZSgpCgogICAgZ2F0ZWRfbWV0YWRhdGEgPSBbCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJzZWFtbGVzc19leHByZXNzaXZpdHlAZ2F0ZWQiLAogICAgICAgICAgICAiY2hlY2twb2ludCI6IG1vZGVsX2Rpci5qb2lucGF0aCgibTJtX2V4cHJlc3NpdmVfdW5pdHkucHQiKSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAidm9jb2Rlcl9wcmV0c3NlbEBnYXRlZCIsCiAgICAgICAgICAgICJjaGVja3BvaW50IjogbW9kZWxfZGlyLmpvaW5wYXRoKCJwcmV0c3NlbF9tZWxoaWZpZ2FuX3dtLnB0IiksCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogInZvY29kZXJfcHJldHNzZWxfMTZraHpAZ2F0ZWQiLAogICAgICAgICAgICAiY2hlY2twb2ludCI6IG1vZGVsX2Rpci5qb2lucGF0aCgicHJldHNzZWxfbWVsaGlmaWdhbl93bS0xNmtoei5wdCIpLAogICAgICAgIH0sCiAgICBdCgogICAgYXNzZXRfc3RvcmUubWV0YWRhdGFfcHJvdmlkZXJzLmFwcGVuZChJblByb2NBc3NldE1ldGFkYXRhUHJvdmlkZXIoZ2F0ZWRfbWV0YWRhdGEpKQo='),
    ('seamless/build/lib/seamless_communication/inference/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLmdlbmVyYXRvciBpbXBvcnQgKAogICAgU2VxdWVuY2VHZW5lcmF0b3JPcHRpb25zIGFzIFNlcXVlbmNlR2VuZXJhdG9yT3B0aW9ucywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLmdlbmVyYXRvciBpbXBvcnQgVW5pdFlHZW5lcmF0b3IgYXMgVW5pdFlHZW5lcmF0b3IKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZS50cmFuc2xhdG9yIGltcG9ydCAoCiAgICBCYXRjaGVkU3BlZWNoT3V0cHV0IGFzIEJhdGNoZWRTcGVlY2hPdXRwdXQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZS50cmFuc2xhdG9yIGltcG9ydCBNb2RhbGl0eSBhcyBNb2RhbGl0eQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLnRyYW5zbGF0b3IgaW1wb3J0IFRhc2sgYXMgVGFzawpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLnRyYW5zbGF0b3IgaW1wb3J0IFRyYW5zbGF0b3IgYXMgVHJhbnNsYXRvcgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZS50cmFuc2NyaWJlciBpbXBvcnQgVHJhbnNjcmliZXIgYXMgVHJhbnNjcmliZXIK'),
    ('seamless/build/lib/seamless_communication/inference/transcriber.py', ''),
    ('seamless/build/lib/seamless_communication/inference/generator.py', ''),
    ('seamless/build/lib/seamless_communication/inference/translator.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKaW1wb3J0IGxvZ2dpbmcKZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzCmZyb20gZW51bSBpbXBvcnQgRW51bSwgYXV0bwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIE9wdGlvbmFsLCBUdXBsZSwgVW5pb24sIGNhc3QKCmltcG9ydCB0b3JjaAppbXBvcnQgdG9yY2gubm4gYXMgbm4KZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IGFzc2V0X3N0b3JlCmZyb20gZmFpcnNlcTIuYXNzZXRzLmNhcmQgaW1wb3J0IEFzc2V0Q2FyZApmcm9tIGZhaXJzZXEyLmRhdGEgaW1wb3J0IENvbGxhdGVyLCBTZXF1ZW5jZURhdGEsIFN0cmluZ0xpa2UKZnJvbSBmYWlyc2VxMi5kYXRhLmF1ZGlvIGltcG9ydCBBdWRpb0RlY29kZXIsIFdhdmVmb3JtVG9GYmFua0NvbnZlcnRlcgpmcm9tIGZhaXJzZXEyLmRhdGEudGV4dCBpbXBvcnQgVGV4dFRva2VuaXplcgpmcm9tIGZhaXJzZXEyLm1lbW9yeSBpbXBvcnQgTWVtb3J5QmxvY2sKZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBQYWRkaW5nTWFzaywgZ2V0X3NlcXNfYW5kX3BhZGRpbmdfbWFzawpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZQpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5pbmZlcmVuY2UuZ2VuZXJhdG9yIGltcG9ydCAoCiAgICBTZXF1ZW5jZUdlbmVyYXRvck9wdGlvbnMsCiAgICBVbml0WUdlbmVyYXRvciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5IGltcG9ydCAoCiAgICBVbml0VG9rZW5pemVyLAogICAgVW5pdFlNb2RlbCwKICAgIFVuaXRZTkFSVDJVTW9kZWwsCiAgICBVbml0WVQyVU1vZGVsLAogICAgbG9hZF91bml0eV9tb2RlbCwKICAgIGxvYWRfdW5pdHlfdGV4dF90b2tlbml6ZXIsCiAgICBsb2FkX3VuaXR5X3VuaXRfdG9rZW5pemVyLAogICAgdW5pdHlfYXJjaHMsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy52b2NvZGVyIGltcG9ydCBsb2FkX3ZvY29kZXJfbW9kZWwKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnRveGljaXR5IGltcG9ydCAoCiAgICBFVE9YQmFkV29yZENoZWNrZXIsCiAgICBsb2FkX2V0b3hfYmFkX3dvcmRfY2hlY2tlciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24udG94aWNpdHkubWludG94IGltcG9ydCBtaW50b3hfcGlwZWxpbmUKCmxvZ2dpbmcuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICBmb3JtYXQ9IiUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgLS0gJShuYW1lKXM6ICUobWVzc2FnZSlzIiwKKQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKY2xhc3MgVGFzayhFbnVtKToKICAgIFMyU1QgPSBhdXRvKCkKICAgIFMyVFQgPSBhdXRvKCkKICAgIFQyU1QgPSBhdXRvKCkKICAgIFQyVFQgPSBhdXRvKCkKICAgIEFTUiA9IGF1dG8oKQoKCmNsYXNzIE1vZGFsaXR5KEVudW0pOgogICAgU1BFRUNIID0gInNwZWVjaCIKICAgIFRFWFQgPSAidGV4dCIKCgpAZGF0YWNsYXNzCmNsYXNzIEJhdGNoZWRTcGVlY2hPdXRwdXQ6CiAgICB1bml0czogTGlzdFtMaXN0W2ludF1dCiAgICAiIiJUaGUgYmF0Y2hlZCBsaXN0IG9mIGdlbmVyYXRlZCB1bml0cy4iIiIKCiAgICBhdWRpb193YXZzOiBMaXN0W1RlbnNvcl0KICAgICIiIlRoZSBiYXRjaGVkIGxpc3Qgb2YgYXVkaW8gd2F2ZWZvcm1zLiIiIgoKICAgIHNhbXBsZV9yYXRlOiBpbnQgPSAxNjAwMAogICAgIiIiU2FtcGxlIHJhdGUgb2YgdGhlIGF1ZGlvIHdhdmVmb3Jtcy4iIiIKCgpjbGFzcyBUcmFuc2xhdG9yKG5uLk1vZHVsZSk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ6IFVuaW9uW3N0ciwgQXNzZXRDYXJkXSwKICAgICAgICB2b2NvZGVyX25hbWVfb3JfY2FyZDogVW5pb25bc3RyLCBBc3NldENhcmQsIE5vbmVdLAogICAgICAgIGRldmljZTogRGV2aWNlLAogICAgICAgIHRleHRfdG9rZW5pemVyOiBPcHRpb25hbFtUZXh0VG9rZW5pemVyXSA9IE5vbmUsCiAgICAgICAgYXBwbHlfbWludG94OiBib29sID0gRmFsc2UsCiAgICAgICAgZHR5cGU6IERhdGFUeXBlID0gdG9yY2guZmxvYXQxNiwKICAgICAgICBpbnB1dF9tb2RhbGl0eTogT3B0aW9uYWxbTW9kYWxpdHldID0gTm9uZSwKICAgICAgICBvdXRwdXRfbW9kYWxpdHk6IE9wdGlvbmFsW01vZGFsaXR5XSA9IE5vbmUsCiAgICApOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQoKICAgICAgICBpZiBpc2luc3RhbmNlKG1vZGVsX25hbWVfb3JfY2FyZCwgc3RyKToKICAgICAgICAgICAgbW9kZWxfbmFtZV9vcl9jYXJkID0gYXNzZXRfc3RvcmUucmV0cmlldmVfY2FyZChtb2RlbF9uYW1lX29yX2NhcmQpCgogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKG1vZGVsX25hbWVfb3JfY2FyZCwgQXNzZXRDYXJkKQoKICAgICAgICBpZiBpbnB1dF9tb2RhbGl0eSBvciBvdXRwdXRfbW9kYWxpdHk6CiAgICAgICAgICAgIHVuaXR5X2NvbmZpZyA9IHVuaXR5X2FyY2hzLmdldF9jb25maWcoCiAgICAgICAgICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQuZmllbGQoIm1vZGVsX2FyY2giKS5hc18oc3RyKQogICAgICAgICAgICApCiAgICAgICAgICAgICMgU2tpcCBsb2FkaW5nIHRoZSB0ZXh0IGVuY29kZXIuCiAgICAgICAgICAgIGlmIGlucHV0X21vZGFsaXR5ID09IE1vZGFsaXR5LlNQRUVDSDoKICAgICAgICAgICAgICAgIHVuaXR5X2NvbmZpZy51c2VfdGV4dF9lbmNvZGVyID0gRmFsc2UKICAgICAgICAgICAgIyBTa2lwIGxvYWRpbmcgdGhlIFQyVSBtb2RlbC4KICAgICAgICAgICAgaWYgb3V0cHV0X21vZGFsaXR5ID09IE1vZGFsaXR5LlRFWFQ6CiAgICAgICAgICAgICAgICB1bml0eV9jb25maWcudDJ1X2NvbmZpZyA9IE5vbmUKICAgICAgICAgICAgbW9kZWxfbmFtZV9vcl9jYXJkLmZpZWxkKCJtb2RlbF9jb25maWciKS5zZXQodW5pdHlfY29uZmlnKQoKICAgICAgICAjIExvYWQgdGhlIG1vZGVsLgogICAgICAgIGlmIGRldmljZSA9PSB0b3JjaC5kZXZpY2UoImNwdSIpOgogICAgICAgICAgICBkdHlwZSA9IHRvcmNoLmZsb2F0MzIKCiAgICAgICAgc2VsZi5tb2RlbCA9IGxvYWRfdW5pdHlfbW9kZWwobW9kZWxfbmFtZV9vcl9jYXJkLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZSkKICAgICAgICBzZWxmLm1vZGVsLmV2YWwoKQogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHNlbGYubW9kZWwsIFVuaXRZTW9kZWwpCgogICAgICAgIGlmIHRleHRfdG9rZW5pemVyIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYudGV4dF90b2tlbml6ZXI6IFRleHRUb2tlbml6ZXIgPSBsb2FkX3VuaXR5X3RleHRfdG9rZW5pemVyKAogICAgICAgICAgICAgICAgbW9kZWxfbmFtZV9vcl9jYXJkCiAgICAgICAgICAgICkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnRleHRfdG9rZW5pemVyID0gdGV4dF90b2tlbml6ZXIKCiAgICAgICAgc2VsZi51bml0X3Rva2VuaXplcjogT3B0aW9uYWxbVW5pdFRva2VuaXplcl0gPSBOb25lCiAgICAgICAgaWYgc2VsZi5tb2RlbC50MnVfbW9kZWwgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYudW5pdF90b2tlbml6ZXIgPSBsb2FkX3VuaXR5X3VuaXRfdG9rZW5pemVyKG1vZGVsX25hbWVfb3JfY2FyZCkKCiAgICAgICAgc2VsZi5iYWRfd29yZF9jaGVja2VyOiBPcHRpb25hbFtFVE9YQmFkV29yZENoZWNrZXJdID0gTm9uZQogICAgICAgIGlmIGFwcGx5X21pbnRveDoKICAgICAgICAgICAgc2VsZi5iYWRfd29yZF9jaGVja2VyID0gbG9hZF9ldG94X2JhZF93b3JkX2NoZWNrZXIoIm1pbnRveCIpCgogICAgICAgIHNlbGYuYXBwbHlfbWludG94ID0gYXBwbHlfbWludG94CgogICAgICAgIHNlbGYuZGV2aWNlID0gZGV2aWNlCiAgICAgICAgc2VsZi5kZWNvZGVfYXVkaW8gPSBBdWRpb0RlY29kZXIoZHR5cGU9dG9yY2guZmxvYXQzMiwgZGV2aWNlPWRldmljZSkKICAgICAgICBzZWxmLmNvbnZlcnRfdG9fZmJhbmsgPSBXYXZlZm9ybVRvRmJhbmtDb252ZXJ0ZXIoCiAgICAgICAgICAgIG51bV9tZWxfYmlucz04MCwKICAgICAgICAgICAgd2F2ZWZvcm1fc2NhbGU9MioqMTUsCiAgICAgICAgICAgIGNoYW5uZWxfbGFzdD1UcnVlLAogICAgICAgICAgICBzdGFuZGFyZGl6ZT1UcnVlLAogICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1kdHlwZSwKICAgICAgICApCiAgICAgICAgc2VsZi5jb2xsYXRlID0gQ29sbGF0ZXIoCiAgICAgICAgICAgIHBhZF92YWx1ZT1zZWxmLnRleHRfdG9rZW5pemVyLnZvY2FiX2luZm8ucGFkX2lkeCBvciAwLCBwYWRfdG9fbXVsdGlwbGU9MgogICAgICAgICkKICAgICAgICBzZWxmLnZvY29kZXIgPSBOb25lCiAgICAgICAgaWYgdm9jb2Rlcl9uYW1lX29yX2NhcmQgaXMgbm90IE5vbmUgYW5kICgKICAgICAgICAgICAgb3V0cHV0X21vZGFsaXR5IGlzIE5vbmUgb3Igb3V0cHV0X21vZGFsaXR5ID09IE1vZGFsaXR5LlNQRUVDSAogICAgICAgICk6CiAgICAgICAgICAgIHNlbGYudm9jb2RlciA9IGxvYWRfdm9jb2Rlcl9tb2RlbCgKICAgICAgICAgICAgICAgIHZvY29kZXJfbmFtZV9vcl9jYXJkLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZQogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbGYudm9jb2Rlci5ldmFsKCkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBnZXRfcHJlZGljdGlvbigKICAgICAgICBjbHMsCiAgICAgICAgbW9kZWw6IFVuaXRZTW9kZWwsCiAgICAgICAgdGV4dF90b2tlbml6ZXI6IFRleHRUb2tlbml6ZXIsCiAgICAgICAgdW5pdF90b2tlbml6ZXI6IE9wdGlvbmFsW1VuaXRUb2tlbml6ZXJdLAogICAgICAgIHNlcXM6IFRlbnNvciwKICAgICAgICBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwKICAgICAgICBpbnB1dF9tb2RhbGl0eTogTW9kYWxpdHksCiAgICAgICAgb3V0cHV0X21vZGFsaXR5OiBNb2RhbGl0eSwKICAgICAgICB0Z3RfbGFuZzogc3RyLAogICAgICAgIHRleHRfZ2VuZXJhdGlvbl9vcHRzOiBTZXF1ZW5jZUdlbmVyYXRvck9wdGlvbnMsCiAgICAgICAgdW5pdF9nZW5lcmF0aW9uX29wdHM6IE9wdGlvbmFsW1NlcXVlbmNlR2VuZXJhdG9yT3B0aW9uc10sCiAgICAgICAgdW5pdF9nZW5lcmF0aW9uX25ncmFtX2ZpbHRlcmluZzogYm9vbCA9IEZhbHNlLAogICAgICAgIGR1cmF0aW9uX2ZhY3RvcjogZmxvYXQgPSAxLjAsCiAgICAgICAgcHJvc29keV9lbmNvZGVyX2lucHV0OiBPcHRpb25hbFtTZXF1ZW5jZURhdGFdID0gTm9uZSwKICAgICkgLT4gVHVwbGVbTGlzdFtTdHJpbmdMaWtlXSwgT3B0aW9uYWxbVGVuc29yXV06CiAgICAgICAgIyBXZSBkaXNyZWdhcmQgdW5pdCBnZW5lcmF0aW9ucyBvcHRzIGZvciB0aGUgTkFSIFQyVSBkZWNvZGVyLgogICAgICAgIGlmIG91dHB1dF9tb2RhbGl0eSAhPSBNb2RhbGl0eS5TUEVFQ0ggb3IgaXNpbnN0YW5jZSgKICAgICAgICAgICAgbW9kZWwudDJ1X21vZGVsLCBVbml0WU5BUlQyVU1vZGVsCiAgICAgICAgKToKICAgICAgICAgICAgdW5pdF9nZW5lcmF0aW9uX29wdHMgPSBOb25lCgogICAgICAgIGdlbmVyYXRvciA9IFVuaXRZR2VuZXJhdG9yKAogICAgICAgICAgICBtb2RlbCwKICAgICAgICAgICAgdGV4dF90b2tlbml6ZXIsCiAgICAgICAgICAgIHRndF9sYW5nLAogICAgICAgICAgICB1bml0X3Rva2VuaXplciBpZiBvdXRwdXRfbW9kYWxpdHkgPT0gTW9kYWxpdHkuU1BFRUNIIGVsc2UgTm9uZSwKICAgICAgICAgICAgdGV4dF9vcHRzPXRleHRfZ2VuZXJhdGlvbl9vcHRzLAogICAgICAgICAgICB1bml0X29wdHM9dW5pdF9nZW5lcmF0aW9uX29wdHMsCiAgICAgICAgKQoKICAgICAgICByZXR1cm4gZ2VuZXJhdG9yKAogICAgICAgICAgICBzZXFzLAogICAgICAgICAgICBwYWRkaW5nX21hc2ssCiAgICAgICAgICAgIGlucHV0X21vZGFsaXR5LnZhbHVlLAogICAgICAgICAgICBvdXRwdXRfbW9kYWxpdHkudmFsdWUsCiAgICAgICAgICAgIG5ncmFtX2ZpbHRlcmluZz11bml0X2dlbmVyYXRpb25fbmdyYW1fZmlsdGVyaW5nLAogICAgICAgICAgICBkdXJhdGlvbl9mYWN0b3I9ZHVyYXRpb25fZmFjdG9yLAogICAgICAgICAgICBwcm9zb2R5X2VuY29kZXJfaW5wdXQ9cHJvc29keV9lbmNvZGVyX2lucHV0LAogICAgICAgICkKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgZ2V0X21vZGFsaXRpZXNfZnJvbV90YXNrX3N0cih0YXNrX3N0cjogc3RyKSAtPiBUdXBsZVtNb2RhbGl0eSwgTW9kYWxpdHldOgogICAgICAgIHRyeToKICAgICAgICAgICAgdGFzayA9IFRhc2tbdGFza19zdHIudXBwZXIoKV0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZiJVbnN1cHBvcnRlZCB0YXNrOiB7dGFza19zdHJ9IikKCiAgICAgICAgaWYgdGFzayA9PSBUYXNrLlMyU1Q6CiAgICAgICAgICAgIHJldHVybiBNb2RhbGl0eS5TUEVFQ0gsIE1vZGFsaXR5LlNQRUVDSAogICAgICAgICMgQVNSIGlzIHRyZWF0ZWQgYXMgUzJUVCB3aXRoIHNyY19sYW5nID09IHRndF9sYW5nCiAgICAgICAgZWxpZiB0YXNrID09IFRhc2suUzJUVCBvciB0YXNrID09IFRhc2suQVNSOgogICAgICAgICAgICByZXR1cm4gTW9kYWxpdHkuU1BFRUNILCBNb2RhbGl0eS5URVhUCiAgICAgICAgZWxpZiB0YXNrID09IFRhc2suVDJUVDoKICAgICAgICAgICAgcmV0dXJuIE1vZGFsaXR5LlRFWFQsIE1vZGFsaXR5LlRFWFQKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gTW9kYWxpdHkuVEVYVCwgTW9kYWxpdHkuU1BFRUNICgogICAgQHRvcmNoLmluZmVyZW5jZV9tb2RlKCkKICAgIGRlZiBwcmVkaWN0KAogICAgICAgIHNlbGYsCiAgICAgICAgaW5wdXQ6IFVuaW9uW3N0ciwgVGVuc29yLCBTZXF1ZW5jZURhdGFdLAogICAgICAgIHRhc2tfc3RyOiBzdHIsCiAgICAgICAgdGd0X2xhbmc6IHN0ciwKICAgICAgICBzcmNfbGFuZzogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgdGV4dF9nZW5lcmF0aW9uX29wdHM6IE9wdGlvbmFsW1NlcXVlbmNlR2VuZXJhdG9yT3B0aW9uc10gPSBOb25lLAogICAgICAgIHVuaXRfZ2VuZXJhdGlvbl9vcHRzOiBPcHRpb25hbFtTZXF1ZW5jZUdlbmVyYXRvck9wdGlvbnNdID0gTm9uZSwKICAgICAgICBzcGtyOiBPcHRpb25hbFtpbnRdID0gLTEsCiAgICAgICAgc2FtcGxlX3JhdGU6IGludCA9IDE2MDAwLAogICAgICAgIHVuaXRfZ2VuZXJhdGlvbl9uZ3JhbV9maWx0ZXJpbmc6IGJvb2wgPSBGYWxzZSwKICAgICAgICBkdXJhdGlvbl9mYWN0b3I6IGZsb2F0ID0gMS4wLAogICAgICAgIHByb3NvZHlfZW5jb2Rlcl9pbnB1dDogT3B0aW9uYWxbU2VxdWVuY2VEYXRhXSA9IE5vbmUsCiAgICAgICAgc3JjX3RleHQ6IE9wdGlvbmFsW1N0cmluZ0xpa2VdID0gTm9uZSwKICAgICkgLT4gVHVwbGVbTGlzdFtTdHJpbmdMaWtlXSwgT3B0aW9uYWxbQmF0Y2hlZFNwZWVjaE91dHB1dF1dOgogICAgICAgICIiIgogICAgICAgIFRoZSBtYWluIG1ldGhvZCB1c2VkIHRvIHBlcmZvcm0gaW5mZXJlbmNlIG9uIGFsbCB0YXNrcy4KCiAgICAgICAgOnBhcmFtIGlucHV0OgogICAgICAgICAgICBFaXRoZXIgdGV4dCBvciBwYXRoIHRvIGF1ZGlvIG9yIGF1ZGlvIFRlbnNvci4KICAgICAgICA6cGFyYW0gdGFza19zdHI6CiAgICAgICAgICAgIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIHRhc2suCiAgICAgICAgICAgIFZhbGlkIGNob2ljZXMgYXJlICJTMlNUIiwgIlMyVFQiLCAiVDJTVCIsICJUMlRUIiwgIkFTUiIKICAgICAgICA6cGFyYW0gdGd0X2xhbmc6CiAgICAgICAgICAgIFRhcmdldCBsYW5ndWFnZSB0byBkZWNvZGUgaW50by4KICAgICAgICA6cGFyYW0gc3JjX2xhbmc6CiAgICAgICAgICAgIFNvdXJjZSBsYW5ndWFnZSBvZiBpbnB1dCwgb25seSByZXF1aXJlZCBmb3IgVDJTVCwgVDJUVCB0YXNrcy4KICAgICAgICA6cGFyYW0gdGV4dF9nZW5lcmF0aW9uX29wdHM6CiAgICAgICAgICAgIFRleHQgZ2VuZXJhdGlvbiBoeXBlcnBhcmFtZXRlcnMgZm9yIGluY3JlbWVudGFsIGRlY29kaW5nLgogICAgICAgIDpwYXJhbSB1bml0X2dlbmVyYXRpb25fb3B0czoKICAgICAgICAgICAgVW5pdCBnZW5lcmF0aW9uIGh5cGVycGFyYW1ldGVycyBmb3IgaW5jcmVtZW50YWwgZGVjb2RpbmcuCiAgICAgICAgOnBhcmFtIHNwa3I6CiAgICAgICAgICAgIFNwZWFrZXIgaWQgZm9yIHZvY29kZXIuCiAgICAgICAgOnBhcmFtIHVuaXRfZ2VuZXJhdGlvbl9uZ3JhbV9maWx0ZXJpbmc6CiAgICAgICAgICAgIElmIFRydWUsIHJlbW92ZXMgY29uc2VjdXRpdmUgcmVwZWF0ZWQgbmdyYW1zCiAgICAgICAgICAgIGZyb20gdGhlIGRlY29kZWQgdW5pdCBvdXRwdXQuCiAgICAgICAgOnBhcmFtIHNyY190ZXh0OgogICAgICAgICAgICBPcHRpb25hbCBzb3VyY2UgdHJhbnNjcmlwdCAob2J0YWluZWQgYnkgQVNSIGZvciBpbnN0YW5jZSkuIFRoaXMgaXMgdXNlZCBmb3IKICAgICAgICAgICAgYXBwbHlpbmcgbWludG94IHRveGljaXR5IG1pdGlnYXRpb24uIElmIHRoaXMgaXMgbm90IHNwZWNpZnkgYW5kIGFwcGx5X21pbnRveD1UcnVlCiAgICAgICAgICAgIHRoZW4gc3JjX2xhbmcgbXVzdCBiZSBzcGVjaWZpZWQgYW5kIEFTUiB3aWxsIGJlIHJ1biBvbiB0aGUgYXVkaW8gc291cmNlLgoKICAgICAgICA6cmV0dXJuczoKICAgICAgICAgICAgLSBCYXRjaGVkIGxpc3Qgb2YgVHJhbnNsYXRlZCB0ZXh0LgogICAgICAgICAgICAtIFRyYW5zbGF0ZWQgQmF0Y2hlZFNwZWVjaE91dHB1dC4KICAgICAgICAiIiIKICAgICAgICBpbnB1dF9tb2RhbGl0eSwgb3V0cHV0X21vZGFsaXR5ID0gc2VsZi5nZXRfbW9kYWxpdGllc19mcm9tX3Rhc2tfc3RyKHRhc2tfc3RyKQoKICAgICAgICBpZiBzZWxmLmFwcGx5X21pbnRveCBhbmQgbm90IChzcmNfbGFuZyBpcyBub3QgTm9uZSBvciBzcmNfdGV4dCBpcyBub3QgTm9uZSk6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoCiAgICAgICAgICAgICAgICAiYHNyY19sYW5nYCBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGBhcHBseV9taW50b3hgIGlzIGBUcnVlYCBvciB5b3UgbmVlZCB0byBzcGVjaWZ5IHNyY190ZXh0LiIKICAgICAgICAgICAgKQoKICAgICAgICBpZiBpc2luc3RhbmNlKGlucHV0LCBkaWN0KToKICAgICAgICAgICAgc3JjID0gY2FzdChTZXF1ZW5jZURhdGEsIGlucHV0KQogICAgICAgIGVsaWYgaW5wdXRfbW9kYWxpdHkgPT0gTW9kYWxpdHkuU1BFRUNIOgogICAgICAgICAgICBhdWRpbyA9IGlucHV0CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoYXVkaW8sIHN0cik6CiAgICAgICAgICAgICAgICB3aXRoIFBhdGgoYXVkaW8pLm9wZW4oInJiIikgYXMgZmI6CiAgICAgICAgICAgICAgICAgICAgYmxvY2sgPSBNZW1vcnlCbG9jayhmYi5yZWFkKCkpCiAgICAgICAgICAgICAgICBkZWNvZGVkX2F1ZGlvID0gc2VsZi5kZWNvZGVfYXVkaW8oYmxvY2spCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBhc3NlcnQgKAogICAgICAgICAgICAgICAgICAgIGF1ZGlvLmRpbSgpIDw9IDIKICAgICAgICAgICAgICAgICksICJUaGUgYXVkaW8gdGVuc29yIGNhbid0IGJlIG1vcmUgdGhhbiAyIGRpbWVuc2lvbnMuIgogICAgICAgICAgICAgICAgaWYgYXVkaW8uZGltKCkgPT0gMToKICAgICAgICAgICAgICAgICAgICBhdWRpbyA9IGF1ZGlvLnVuc3F1ZWV6ZSgxKQogICAgICAgICAgICAgICAgZWxpZiBhdWRpby5kaW0oKSA9PSAyIGFuZCBhdWRpby5zaXplKDApIDwgYXVkaW8uc2l6ZSgxKToKICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZygKICAgICAgICAgICAgICAgICAgICAgICAgIlRyYW5zcG9zaW5nIGF1ZGlvIHRlbnNvciBmcm9tIChic3osIHNlcV9sZW4pIC0+IChzZXFfbGVuLCBic3opLiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgYXVkaW8gPSBhdWRpby50cmFuc3Bvc2UoMCwgMSkKCiAgICAgICAgICAgICAgICBkZWNvZGVkX2F1ZGlvID0gewogICAgICAgICAgICAgICAgICAgICJ3YXZlZm9ybSI6IGF1ZGlvLAogICAgICAgICAgICAgICAgICAgICJzYW1wbGVfcmF0ZSI6IHNhbXBsZV9yYXRlLAogICAgICAgICAgICAgICAgICAgICJmb3JtYXQiOiAtMSwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgc3JjID0gc2VsZi5jb2xsYXRlKHNlbGYuY29udmVydF90b19mYmFuayhkZWNvZGVkX2F1ZGlvKSlbImZiYW5rIl0KICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBzcmNfbGFuZyBpcyBOb25lOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigic3JjX2xhbmcgbXVzdCBiZSBzcGVjaWZpZWQgZm9yIFQyU1QsIFQyVFQgdGFza3MuIikKCiAgICAgICAgICAgIHRleHQgPSBpbnB1dAogICAgICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZSh0ZXh0LCBzdHIpCgogICAgICAgICAgICBzZWxmLnRva2VuX2VuY29kZXIgPSBzZWxmLnRleHRfdG9rZW5pemVyLmNyZWF0ZV9lbmNvZGVyKAogICAgICAgICAgICAgICAgdGFzaz0idHJhbnNsYXRpb24iLCBsYW5nPXNyY19sYW5nLCBtb2RlPSJzb3VyY2UiLCBkZXZpY2U9c2VsZi5kZXZpY2UKICAgICAgICAgICAgKQogICAgICAgICAgICBzcmMgPSBzZWxmLmNvbGxhdGUoc2VsZi50b2tlbl9lbmNvZGVyKHRleHQpKQoKICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShzZWxmLm1vZGVsLCBVbml0WU1vZGVsKQoKICAgICAgICBzZXFzLCBwYWRkaW5nX21hc2sgPSBnZXRfc2Vxc19hbmRfcGFkZGluZ19tYXNrKHNyYykKCiAgICAgICAgaWYgdGV4dF9nZW5lcmF0aW9uX29wdHMgaXMgTm9uZToKICAgICAgICAgICAgdGV4dF9nZW5lcmF0aW9uX29wdHMgPSBTZXF1ZW5jZUdlbmVyYXRvck9wdGlvbnMoCiAgICAgICAgICAgICAgICBiZWFtX3NpemU9NSwgc29mdF9tYXhfc2VxX2xlbj0oMSwgMjAwKQogICAgICAgICAgICApCiAgICAgICAgaWYgdW5pdF9nZW5lcmF0aW9uX29wdHMgaXMgTm9uZToKICAgICAgICAgICAgdW5pdF9nZW5lcmF0aW9uX29wdHMgPSBTZXF1ZW5jZUdlbmVyYXRvck9wdGlvbnMoCiAgICAgICAgICAgICAgICBiZWFtX3NpemU9NSwgc29mdF9tYXhfc2VxX2xlbj0oMjUsIDUwKQogICAgICAgICAgICApCgogICAgICAgIHRleHRzLCB1bml0cyA9IHNlbGYuZ2V0X3ByZWRpY3Rpb24oCiAgICAgICAgICAgIHNlbGYubW9kZWwsCiAgICAgICAgICAgIHNlbGYudGV4dF90b2tlbml6ZXIsCiAgICAgICAgICAgIHNlbGYudW5pdF90b2tlbml6ZXIsCiAgICAgICAgICAgIHNlcXMsCiAgICAgICAgICAgIHBhZGRpbmdfbWFzaywKICAgICAgICAgICAgaW5wdXRfbW9kYWxpdHksCiAgICAgICAgICAgIG91dHB1dF9tb2RhbGl0eSwKICAgICAgICAgICAgdGd0X2xhbmcsCiAgICAgICAgICAgIHRleHRfZ2VuZXJhdGlvbl9vcHRzLAogICAgICAgICAgICB1bml0X2dlbmVyYXRpb25fb3B0cywKICAgICAgICAgICAgdW5pdF9nZW5lcmF0aW9uX25ncmFtX2ZpbHRlcmluZz11bml0X2dlbmVyYXRpb25fbmdyYW1fZmlsdGVyaW5nLAogICAgICAgICAgICBkdXJhdGlvbl9mYWN0b3I9ZHVyYXRpb25fZmFjdG9yLAogICAgICAgICAgICBwcm9zb2R5X2VuY29kZXJfaW5wdXQ9cHJvc29keV9lbmNvZGVyX2lucHV0LAogICAgICAgICkKCiAgICAgICAgaWYgc2VsZi5hcHBseV9taW50b3ggYW5kIHRhc2tfc3RyICE9IFRhc2suQVNSLm5hbWU6CiAgICAgICAgICAgIGlmIGlucHV0X21vZGFsaXR5ID09IE1vZGFsaXR5LlNQRUVDSDoKICAgICAgICAgICAgICAgIGlmIHNyY190ZXh0IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHNyY190ZXh0cyA9IFtzcmNfdGV4dF0KICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc3JjX3RleHRzLCBfLCA9IHNlbGYucHJlZGljdCgKICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ9aW5wdXQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tfc3RyPVRhc2suQVNSLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRndF9sYW5nPXRndF9sYW5nLAogICAgICAgICAgICAgICAgICAgICAgICBzcmNfbGFuZz1zcmNfbGFuZywKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9nZW5lcmF0aW9uX29wdHM9dGV4dF9nZW5lcmF0aW9uX29wdHMsCiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRfZ2VuZXJhdGlvbl9vcHRzPXVuaXRfZ2VuZXJhdGlvbl9vcHRzLAogICAgICAgICAgICAgICAgICAgICAgICBzcGtyPXNwa3IsCiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZV9yYXRlPXNhbXBsZV9yYXRlLAogICAgICAgICAgICAgICAgICAgICAgICB1bml0X2dlbmVyYXRpb25fbmdyYW1fZmlsdGVyaW5nPXVuaXRfZ2VuZXJhdGlvbl9uZ3JhbV9maWx0ZXJpbmcsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2UoaW5wdXQsIHN0cikKCiAgICAgICAgICAgICAgICBzcmNfdGV4dHMgPSBbaW5wdXRdCgogICAgICAgICAgICBhc3NlcnQgc3JjX2xhbmcgaXMgbm90IE5vbmUKICAgICAgICAgICAgYXNzZXJ0IHNlbGYudW5pdF90b2tlbml6ZXIgaXMgbm90IE5vbmUKICAgICAgICAgICAgYXNzZXJ0IHNlbGYuYmFkX3dvcmRfY2hlY2tlciBpcyBub3QgTm9uZQoKICAgICAgICAgICAgdGV4dHMsIHVuaXRzID0gbWludG94X3BpcGVsaW5lKAogICAgICAgICAgICAgICAgbW9kZWw9c2VsZi5tb2RlbCwKICAgICAgICAgICAgICAgIHRleHRfdG9rZW5pemVyPXNlbGYudGV4dF90b2tlbml6ZXIsCiAgICAgICAgICAgICAgICB1bml0X3Rva2VuaXplcj1zZWxmLnVuaXRfdG9rZW5pemVyLAogICAgICAgICAgICAgICAgZGV2aWNlPXNlbGYuZGV2aWNlLAogICAgICAgICAgICAgICAgc3JjX2xhbmc9c3JjX2xhbmcsCiAgICAgICAgICAgICAgICB0Z3RfbGFuZz10Z3RfbGFuZywKICAgICAgICAgICAgICAgIG1vZGVsX2lucHV0PXNyYywKICAgICAgICAgICAgICAgIGlucHV0X21vZGFsaXR5PWlucHV0X21vZGFsaXR5LAogICAgICAgICAgICAgICAgb3V0cHV0X21vZGFsaXR5PW91dHB1dF9tb2RhbGl0eSwKICAgICAgICAgICAgICAgIHNyY190ZXh0cz1zcmNfdGV4dHMsCiAgICAgICAgICAgICAgICBvcmlnaW5hbF90ZXh0cz10ZXh0cywKICAgICAgICAgICAgICAgIG9yaWdpbmFsX3VuaXRzPXVuaXRzLAogICAgICAgICAgICAgICAgdW5pdF9nZW5lcmF0aW9uX25ncmFtX2ZpbHRlcmluZz11bml0X2dlbmVyYXRpb25fbmdyYW1fZmlsdGVyaW5nLAogICAgICAgICAgICAgICAgdGV4dF9nZW5lcmF0aW9uX29wdHM9dGV4dF9nZW5lcmF0aW9uX29wdHMsCiAgICAgICAgICAgICAgICB1bml0X2dlbmVyYXRpb25fb3B0cz11bml0X2dlbmVyYXRpb25fb3B0cywKICAgICAgICAgICAgICAgIGJhZF93b3JkX2NoZWNrZXI9c2VsZi5iYWRfd29yZF9jaGVja2VyLAogICAgICAgICAgICAgICAgZHVyYXRpb25fZmFjdG9yPWR1cmF0aW9uX2ZhY3RvciwKICAgICAgICAgICAgICAgIHByb3NvZHlfZW5jb2Rlcl9pbnB1dD1wcm9zb2R5X2VuY29kZXJfaW5wdXQsCiAgICAgICAgICAgICkKCiAgICAgICAgaWYgb3V0cHV0X21vZGFsaXR5ID09IE1vZGFsaXR5LlRFWFQ6CiAgICAgICAgICAgIHJldHVybiB0ZXh0cywgTm9uZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGFzc2VydCB1bml0cyBpcyBub3QgTm9uZQoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzZWxmLm1vZGVsLnQydV9tb2RlbCwgVW5pdFlUMlVNb2RlbCk6CiAgICAgICAgICAgICAgICAjIFJlbW92ZSB0aGUgbGFuZyB0b2tlbiBmb3IgQVIgVW5pdFkgc2luY2UgdGhlIHZvY29kZXIgZG9lc24ndCBuZWVkIGl0CiAgICAgICAgICAgICAgICAjIGluIHRoZSB1bml0IHNlcXVlbmNlLiB0Z3RfbGFuZyBpcyBmZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHZvY29kZXIuCiAgICAgICAgICAgICAgICB1bml0cyA9IHVuaXRzWzosIDE6XQogICAgICAgICAgICAgICAgZHVyYXRpb25fcHJlZGljdGlvbiA9IFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVm9jb2RlciBkdXJhdGlvbiBwcmVkaWN0aW9ucyBub3QgcmVxdWlyZWQgc2luY2UgdGhlIE5BUgogICAgICAgICAgICAgICAgIyBUMlUgbW9kZWwgYWxyZWFkeSBwcmVkaWN0cyBkdXJhdGlvbiBpbiB0aGUgdW5pdHMuCiAgICAgICAgICAgICAgICBkdXJhdGlvbl9wcmVkaWN0aW9uID0gRmFsc2UKCiAgICAgICAgICAgIGF1ZGlvX3dhdnMgPSBbXQogICAgICAgICAgICBzcGVlY2hfdW5pdHMgPSBbXQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4odW5pdHMpKToKICAgICAgICAgICAgICAgIGFzc2VydCBzZWxmLm1vZGVsLnQydV9tb2RlbCBpcyBub3QgTm9uZQogICAgICAgICAgICAgICAgdW5pdF9wYWRkaW5nX21hc2sgPSAoCiAgICAgICAgICAgICAgICAgICAgdW5pdHNbaV0gIT0gc2VsZi5tb2RlbC50MnVfbW9kZWwudGFyZ2V0X3ZvY2FiX2luZm8ucGFkX2lkeAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgdSA9IHVuaXRzW2ldW3VuaXRfcGFkZGluZ19tYXNrXQogICAgICAgICAgICAgICAgc3BlZWNoX3VuaXRzLmFwcGVuZCh1LnRvbGlzdCgpKQoKICAgICAgICAgICAgaWYgc2VsZi52b2NvZGVyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgdHJhbnNsYXRlZF9hdWRpb193YXYgPSBzZWxmLnZvY29kZXIoCiAgICAgICAgICAgICAgICAgICAgdW5pdHMsIHRndF9sYW5nLCBzcGtyLCBkdXJfcHJlZGljdGlvbj1kdXJhdGlvbl9wcmVkaWN0aW9uCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4odW5pdHMpKToKICAgICAgICAgICAgICAgICAgICBwYWRkaW5nX3JlbW92ZWRfYXVkaW9fd2F2ID0gdHJhbnNsYXRlZF9hdWRpb193YXZbCiAgICAgICAgICAgICAgICAgICAgICAgIGksCiAgICAgICAgICAgICAgICAgICAgICAgIDosCiAgICAgICAgICAgICAgICAgICAgICAgIDogaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlZF9hdWRpb193YXYuc2l6ZSgtMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbGVuKHNwZWVjaF91bml0c1tpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8gbGVuKHVuaXRzW2ldKQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF0udW5zcXVlZXplKDApCiAgICAgICAgICAgICAgICAgICAgYXVkaW9fd2F2cy5hcHBlbmQocGFkZGluZ19yZW1vdmVkX2F1ZGlvX3dhdikKICAgICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgICAgIHRleHRzLAogICAgICAgICAgICAgICAgQmF0Y2hlZFNwZWVjaE91dHB1dCgKICAgICAgICAgICAgICAgICAgICB1bml0cz1zcGVlY2hfdW5pdHMsCiAgICAgICAgICAgICAgICAgICAgYXVkaW9fd2F2cz1hdWRpb193YXZzLAogICAgICAgICAgICAgICAgICAgIHNhbXBsZV9yYXRlPXNhbXBsZV9yYXRlLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgKQo='),
    ('seamless/build/lib/seamless_communication/cli/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/build/lib/seamless_communication/cli/expressivity/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUu'),
    ('seamless/build/lib/seamless_communication/cli/expressivity/data/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUu'),
    ('seamless/build/lib/seamless_communication/cli/expressivity/data/prepare_mexpresso.py', ''),
    ('seamless/build/lib/seamless_communication/cli/expressivity/evaluate/__init__.py', ''),
    ('seamless/build/lib/seamless_communication/cli/expressivity/evaluate/post_process_pauserate.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBwYW5kYXMgYXMgcGQKaW1wb3J0IGNzdgppbXBvcnQgc2NpcHkKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QKCgpkZWYgZ2V0X3BhdXNlKHBhdXNlX2RhdGFfdHN2OiBzdHIpIC0+IERpY3Rbc3RyLCBmbG9hdF06CiAgICB1dHRfcGF1c2VfYWxpZ25fZGF0YSA9IHBkLnJlYWRfY3N2KAogICAgICAgIHBhdXNlX2RhdGFfdHN2LAogICAgICAgIHNlcD0iXHQiLAogICAgICAgIHF1b3Rpbmc9Y3N2LlFVT1RFX01JTklNQUwsCiAgICApCiAgICBtZXRyaWNzID0ge30KICAgIHBhdXNlX2R1cmF0aW9uX3dlaWdodCA9ICgKICAgICAgICB1dHRfcGF1c2VfYWxpZ25fZGF0YS50b3RhbF93ZWlnaHQgLyB1dHRfcGF1c2VfYWxpZ25fZGF0YS50b3RhbF93ZWlnaHQuc3VtKCkKICAgICkKICAgIGZvciBzY29yZV9uYW1lIGluIFsKICAgICAgICAid21lYW5fZHVyYXRpb25fc2NvcmUiLAogICAgICAgICJ3bWVhbl9hbGlnbm1lbnRfc2NvcmUiLAogICAgICAgICJ3bWVhbl9qb2ludF9zY29yZSIsCiAgICBdOgogICAgICAgIG1ldHJpY3Nbc2NvcmVfbmFtZV0gPSAoCiAgICAgICAgICAgIHV0dF9wYXVzZV9hbGlnbl9kYXRhW2Yie3Njb3JlX25hbWV9Il0gKiBwYXVzZV9kdXJhdGlvbl93ZWlnaHQKICAgICAgICApLnN1bSgpCiAgICByZXR1cm4gbWV0cmljcwoKCmRlZiBnZXRfcmF0ZSh0YXJnZXRfc3BlZWNoX3Rzdjogc3RyLCBzb3VyY2Vfc3BlZWNoX3Rzdjogc3RyKSAtPiBmbG9hdDoKICAgIHNwZWVjaF91bml0ID0gInN5bGxhYmxlIgoKICAgIHRhcmdldF9zcGVlY2hfZGYgPSBwZC5yZWFkX2NzdigKICAgICAgICB0YXJnZXRfc3BlZWNoX3Rzdiwgc2VwPSJcdCIsIHF1b3Rpbmc9Y3N2LlFVT1RFX01JTklNQUwKICAgICkuc2V0X2luZGV4KCJpZCIpCiAgICBzb3VyY2Vfc3BlZWNoX2RmID0gcGQucmVhZF9jc3YoCiAgICAgICAgc291cmNlX3NwZWVjaF90c3YsIHNlcD0iXHQiLCBxdW90aW5nPWNzdi5RVU9URV9NSU5JTUFMCiAgICApLnNldF9pbmRleCgiaWQiKQoKICAgICMgdXNpbmcgInN5bGxhYmxlIiBzcGVlY2ggdW5pdCBmb3IgcmF0ZSBjb21wdXRhdGlvbgogICAgc3JjX3NwZWVjaF9yYXRlID0gc291cmNlX3NwZWVjaF9kZltmInNwZWVjaF9yYXRlX3tzcGVlY2hfdW5pdH0iXS50b19udW1weSgpCiAgICB0Z3Rfc3BlZWNoX3JhdGUgPSB0YXJnZXRfc3BlZWNoX2RmW2Yic3BlZWNoX3JhdGVfe3NwZWVjaF91bml0fSJdLnRvX251bXB5KCkKICAgIHNyY190Z3Rfc3BlYXJtYW4gPSBzY2lweS5zdGF0cy5zcGVhcm1hbnIoc3JjX3NwZWVjaF9yYXRlLCB0Z3Rfc3BlZWNoX3JhdGUpCiAgICByZXR1cm4gc3JjX3RndF9zcGVhcm1hbi5jb3JyZWxhdGlvbiAgIyB0eXBlOiBpZ25vcmVbbm8tYW55LXJldHVybl0K'),
    ('seamless/build/lib/seamless_communication/cli/expressivity/evaluate/evaluate.py', ''),
    ('seamless/build/lib/seamless_communication/cli/expressivity/evaluate/run_asr_bleu.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gZmlyZSBpbXBvcnQgRmlyZQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLmV2YWxfdXRpbHMuY29tcHV0ZV9tZXRyaWNzIGltcG9ydCAoCiAgICBjb21wdXRlX3F1YWxpdHlfbWV0cmljcywKKQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGV2aWNlCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aAoKCmRlZiBydW5fYXNyX2JsZXVfZXhwcmVzc2l2ZV9tb2RlbCgKICAgIGdlbmVyYXRpb25fZGlyX3BhdGg6IHN0ciwKICAgIGdlbmVyYXRlX3Rzdl9maWxlbmFtZTogc3RyLAogICAgdGd0X2xhbmc6IHN0ciwKKToKICAgIGNvbXB1dGVfcXVhbGl0eV9tZXRyaWNzKAogICAgICAgIGYie2dlbmVyYXRpb25fZGlyX3BhdGh9L3tnZW5lcmF0ZV90c3ZfZmlsZW5hbWV9IiwKICAgICAgICBQYXRoKGdlbmVyYXRpb25fZGlyX3BhdGgpLAogICAgICAgIHRndF9sYW5nLAogICAgICAgICJTMlNUIiwKICAgICAgICBkZXZpY2U9RGV2aWNlKCJjdWRhIiksCiAgICAgICAgcmVmX3RleHRfY29sX25hbWU9InRndF90ZXh0IiwKICAgICAgICBwcmVkX3RleHRfY29sX25hbWU9InMydF9vdXQiLAogICAgICAgIHByZWRfYXVkaW9fY29sX25hbWU9Imh5cG9fYXVkaW8iLAogICAgKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBGaXJlKHJ1bl9hc3JfYmxldV9leHByZXNzaXZlX21vZGVsKQo='),
    ('seamless/build/lib/seamless_communication/cli/expressivity/predict/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUu'),
    ('seamless/build/lib/seamless_communication/cli/expressivity/predict/pretssel_generator.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QKCmltcG9ydCB0b3JjaApmcm9tIHRvcmNoLm5uIGltcG9ydCBNb2R1bGUKCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCgpmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgYXNzZXRfc3RvcmUKZnJvbSBmYWlyc2VxMi5kYXRhIGltcG9ydCAoCiAgICBDb2xsYXRlciwKICAgIFNlcXVlbmNlRGF0YSwKICAgIFZvY2FidWxhcnlJbmZvLAopCmZyb20gZmFpcnNlcTIubm4ucGFkZGluZyBpbXBvcnQgZ2V0X3NlcXNfYW5kX3BhZGRpbmdfbWFzawoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZSBpbXBvcnQgQmF0Y2hlZFNwZWVjaE91dHB1dApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmdlbmVyYXRvci5sb2FkZXIgaW1wb3J0IGxvYWRfcHJldHNzZWxfdm9jb2Rlcl9tb2RlbAoKCmNsYXNzIFByZXRzc2VsR2VuZXJhdG9yKE1vZHVsZSk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBwcmV0c3NlbF9uYW1lX29yX2NhcmQ6IHN0ciwKICAgICAgICB2b2NhYl9pbmZvOiBWb2NhYnVsYXJ5SW5mbywKICAgICAgICBkZXZpY2U6IERldmljZSwKICAgICAgICBkdHlwZTogRGF0YVR5cGUgPSB0b3JjaC5mbG9hdDE2LAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICAjIExvYWQgdGhlIG1vZGVsLgogICAgICAgIGlmIGRldmljZSA9PSB0b3JjaC5kZXZpY2UoImNwdSIpOgogICAgICAgICAgICBkdHlwZSA9IHRvcmNoLmZsb2F0MzIKCiAgICAgICAgc2VsZi5kZXZpY2UgPSBkZXZpY2UKICAgICAgICBzZWxmLmR0eXBlID0gZHR5cGUKCiAgICAgICAgc2VsZi5wcmV0c3NlbF9tb2RlbCA9IGxvYWRfcHJldHNzZWxfdm9jb2Rlcl9tb2RlbCgKICAgICAgICAgICAgcHJldHNzZWxfbmFtZV9vcl9jYXJkLAogICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1kdHlwZSwKICAgICAgICApCiAgICAgICAgc2VsZi5wcmV0c3NlbF9tb2RlbC5ldmFsKCkKCiAgICAgICAgdm9jb2Rlcl9tb2RlbF9jYXJkID0gYXNzZXRfc3RvcmUucmV0cmlldmVfY2FyZChwcmV0c3NlbF9uYW1lX29yX2NhcmQpCiAgICAgICAgc2VsZi5vdXRwdXRfc2FtcGxlX3JhdGUgPSB2b2NvZGVyX21vZGVsX2NhcmQuZmllbGQoInNhbXBsZV9yYXRlIikuYXNfKGludCkKCiAgICAgICAgc2VsZi52b2NhYl9pbmZvID0gdm9jYWJfaW5mbwogICAgICAgIHNlbGYudW5pdF9jb2xsYXRlID0gQ29sbGF0ZXIocGFkX3ZhbHVlPXZvY2FiX2luZm8ucGFkX2lkeCkKICAgICAgICBzZWxmLmR1cmF0aW9uX2NvbGxhdGUgPSBDb2xsYXRlcihwYWRfdmFsdWU9MCkKICAgICAgICBzZWxmLnVuaXRfZW9zX3Rva2VuID0gdG9yY2gudGVuc29yKFt2b2NhYl9pbmZvLmVvc19pZHhdLCBkZXZpY2U9ZGV2aWNlKQoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgcHJlZGljdCgKICAgICAgICBzZWxmLAogICAgICAgIHVuaXRzOiBMaXN0W0xpc3RbaW50XV0sCiAgICAgICAgdGd0X2xhbmc6IHN0ciwKICAgICAgICBwcm9zb2R5X2VuY29kZXJfaW5wdXQ6IFNlcXVlbmNlRGF0YSwKICAgICkgLT4gQmF0Y2hlZFNwZWVjaE91dHB1dDoKCiAgICAgICAgdW5pdHNfYmF0Y2gsIGR1cmF0aW9ucyA9IFtdLCBbXQogICAgICAgIGZvciB1IGluIHVuaXRzOgogICAgICAgICAgICB1bml0ID0gdG9yY2gudGVuc29yKHUpLnRvKHNlbGYudW5pdF9lb3NfdG9rZW4pCgogICAgICAgICAgICAjIGFkanVzdCB0aGUgY29udHJvbCBzeW1ib2xzIGZvciB0aGUgZW1iZWRkaW5nCiAgICAgICAgICAgIHVuaXQgKz0gNAogICAgICAgICAgICB1bml0ID0gdG9yY2guY2F0KFt1bml0LCBzZWxmLnVuaXRfZW9zX3Rva2VuXSwgZGltPTApCgogICAgICAgICAgICB1bml0LCBkdXJhdGlvbiA9IHRvcmNoLnVuaXF1ZV9jb25zZWN1dGl2ZSh1bml0LCByZXR1cm5fY291bnRzPVRydWUpCgogICAgICAgICAgICAjIGFkanVzdCBmb3IgdGhlIGxhc3QgZW9zIHRva2VuCiAgICAgICAgICAgIGR1cmF0aW9uWy0xXSA9IDAKCiAgICAgICAgICAgIHVuaXRzX2JhdGNoLmFwcGVuZCh1bml0KQogICAgICAgICAgICBkdXJhdGlvbnMuYXBwZW5kKGR1cmF0aW9uICogMikKCiAgICAgICAgc3BlZWNoX3VuaXRzID0gc2VsZi51bml0X2NvbGxhdGUodW5pdHNfYmF0Y2gpCiAgICAgICAgZHVyYXRpb25zID0gc2VsZi5kdXJhdGlvbl9jb2xsYXRlKGR1cmF0aW9ucylbInNlcXMiXQoKICAgICAgICB1bml0c190ZW5zb3IsIHVuaXRfcGFkZGluZ19tYXNrID0gZ2V0X3NlcXNfYW5kX3BhZGRpbmdfbWFzayhzcGVlY2hfdW5pdHMpCiAgICAgICAgcHJvc29keV9pbnB1dF9zZXFzLCBwcm9zb2R5X3BhZGRpbmdfbWFzayA9IGdldF9zZXFzX2FuZF9wYWRkaW5nX21hc2soCiAgICAgICAgICAgIHByb3NvZHlfZW5jb2Rlcl9pbnB1dAogICAgICAgICkKCiAgICAgICAgYXVkaW9fd2F2cyA9IHNlbGYucHJldHNzZWxfbW9kZWwoCiAgICAgICAgICAgIHVuaXRzX3RlbnNvciwKICAgICAgICAgICAgdGd0X2xhbmcsCiAgICAgICAgICAgIHByb3NvZHlfaW5wdXRfc2VxcywKICAgICAgICAgICAgcGFkZGluZ19tYXNrPXVuaXRfcGFkZGluZ19tYXNrLAogICAgICAgICAgICBwcm9zb2R5X3BhZGRpbmdfbWFzaz1wcm9zb2R5X3BhZGRpbmdfbWFzaywKICAgICAgICAgICAgZHVyYXRpb25zPWR1cmF0aW9ucywKICAgICAgICApCiAgICAgICAgcmV0dXJuIEJhdGNoZWRTcGVlY2hPdXRwdXQoCiAgICAgICAgICAgIHVuaXRzPXVuaXRzLAogICAgICAgICAgICBhdWRpb193YXZzPWF1ZGlvX3dhdnMsCiAgICAgICAgICAgIHNhbXBsZV9yYXRlPXNlbGYub3V0cHV0X3NhbXBsZV9yYXRlLAogICAgICAgICkK'),
    ('seamless/build/lib/seamless_communication/cli/expressivity/predict/predict.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBhcmdwYXJzZQppbXBvcnQgbG9nZ2luZwppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoYXVkaW8KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgpmcm9tIGZhaXJzZXEyLmRhdGEgaW1wb3J0IFNlcXVlbmNlRGF0YQpmcm9tIGZhaXJzZXEyLmRhdGEuYXVkaW8gaW1wb3J0IFdhdmVmb3JtVG9GYmFua0NvbnZlcnRlcgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5leHByZXNzaXZpdHkucHJlZGljdC5wcmV0c3NlbF9nZW5lcmF0b3IgaW1wb3J0ICgKICAgIFByZXRzc2VsR2VuZXJhdG9yLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkubTR0LnByZWRpY3QgaW1wb3J0ICgKICAgIGFkZF9pbmZlcmVuY2VfYXJndW1lbnRzLAogICAgc2V0X2dlbmVyYXRpb25fb3B0cywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlIGltcG9ydCBUcmFuc2xhdG9yCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkgaW1wb3J0ICgKICAgIGxvYWRfZ2Ntdm5fc3RhdHMsCiAgICBsb2FkX3VuaXR5X3VuaXRfdG9rZW5pemVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdG9yZSBpbXBvcnQgYWRkX2dhdGVkX2Fzc2V0cwoKCkFVRElPX1NBTVBMRV9SQVRFID0gMTYwMDAKCgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5JTkZPLAogICAgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKGxldmVsbmFtZSlzIC0tICUobmFtZSlzOiAlKG1lc3NhZ2UpcyIsCikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmRlZiByZW1vdmVfcHJvc29keV90b2tlbnNfZnJvbV90ZXh0KHRleHQ6IHN0cikgLT4gc3RyOgogICAgIyBmaWx0ZXIgb3V0IHByb3NvZHkgdG9rZW5zLCB0aGVyZSBpcyBvbmx5IGVtcGhhc2lzICcqJywgYW5kIHBhdXNlICc9JwogICAgdGV4dCA9IHRleHQucmVwbGFjZSgiKiIsICIiKS5yZXBsYWNlKCI9IiwgIiIpCiAgICB0ZXh0ID0gIiAiLmpvaW4odGV4dC5zcGxpdCgpKQogICAgcmV0dXJuIHRleHQKCgpkZWYgbWFpbigpIC0+IE5vbmU6CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihkZXNjcmlwdGlvbj0iUnVubmluZyBTZWFtbGVzc0V4cHJlc3NpdmUgaW5mZXJlbmNlLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCJpbnB1dCIsIHR5cGU9c3RyLCBoZWxwPSJBdWRpbyBXQVYgZmlsZSBwYXRoLiIpCgogICAgcGFyc2VyID0gYWRkX2luZmVyZW5jZV9hcmd1bWVudHMocGFyc2VyKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1nYXRlZC1tb2RlbC1kaXIiLAogICAgICAgIHR5cGU9UGF0aCwKICAgICAgICByZXF1aXJlZD1GYWxzZSwKICAgICAgICBoZWxwPSJTZWFtbGVzc0V4cHJlc3NpdmUgbW9kZWwgZGlyZWN0b3J5LiIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWR1cmF0aW9uX2ZhY3RvciIsCiAgICAgICAgdHlwZT1mbG9hdCwKICAgICAgICBoZWxwPSJUaGUgZHVyYXRpb24gZmFjdG9yIGZvciBOQVIgVDJVIG1vZGVsLiIsCiAgICAgICAgZGVmYXVsdD0xLjAsCiAgICApCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIGlmIG5vdCBhcmdzLnRndF9sYW5nIG9yIGFyZ3Mub3V0cHV0X3BhdGggaXMgTm9uZToKICAgICAgICByYWlzZSBFeGNlcHRpb24oCiAgICAgICAgICAgICItLXRndF9sYW5nLCAtLW91dHB1dF9wYXRoIG11c3QgYmUgcHJvdmlkZWQgZm9yIFNlYW1sZXNzRXhwcmVzc2l2ZSBpbmZlcmVuY2UuIgogICAgICAgICkKICAgICAgICAKICAgIGlmIGFyZ3MuZ2F0ZWRfbW9kZWxfZGlyOgogICAgICAgIGFkZF9nYXRlZF9hc3NldHMoYXJncy5nYXRlZF9tb2RlbF9kaXIpCiAgICAKICAgIGlmIHRvcmNoLmN1ZGEuaXNfYXZhaWxhYmxlKCk6CiAgICAgICAgZGV2aWNlID0gdG9yY2guZGV2aWNlKCJjdWRhOjAiKQogICAgICAgIGR0eXBlID0gdG9yY2guZmxvYXQxNgogICAgZWxzZToKICAgICAgICBkZXZpY2UgPSB0b3JjaC5kZXZpY2UoImNwdSIpCiAgICAgICAgZHR5cGUgPSB0b3JjaC5mbG9hdDMyCgogICAgbG9nZ2VyLmluZm8oZiJSdW5uaW5nIGluZmVyZW5jZSBvbiB7ZGV2aWNlPX0gd2l0aCB7ZHR5cGU9fS4iKQoKICAgIHVuaXRfdG9rZW5pemVyID0gbG9hZF91bml0eV91bml0X3Rva2VuaXplcihhcmdzLm1vZGVsX25hbWUpCiAgICAKICAgIHRyYW5zbGF0b3IgPSBUcmFuc2xhdG9yKAogICAgICAgIGFyZ3MubW9kZWxfbmFtZSwKICAgICAgICB2b2NvZGVyX25hbWVfb3JfY2FyZD1Ob25lLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApCgogICAgcHJldHNzZWxfZ2VuZXJhdG9yID0gUHJldHNzZWxHZW5lcmF0b3IoCiAgICAgICAgYXJncy52b2NvZGVyX25hbWUsCiAgICAgICAgdm9jYWJfaW5mbz11bml0X3Rva2VuaXplci52b2NhYl9pbmZvLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApCgogICAgZmJhbmtfZXh0cmFjdG9yID0gV2F2ZWZvcm1Ub0ZiYW5rQ29udmVydGVyKAogICAgICAgIG51bV9tZWxfYmlucz04MCwKICAgICAgICB3YXZlZm9ybV9zY2FsZT0yKioxNSwKICAgICAgICBjaGFubmVsX2xhc3Q9VHJ1ZSwKICAgICAgICBzdGFuZGFyZGl6ZT1GYWxzZSwKICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgIGR0eXBlPWR0eXBlLAogICAgKQoKICAgIF9nY212bl9tZWFuLCBfZ2Ntdm5fc3RkID0gbG9hZF9nY212bl9zdGF0cyhhcmdzLnZvY29kZXJfbmFtZSkKICAgIGdjbXZuX21lYW4gPSB0b3JjaC50ZW5zb3IoX2djbXZuX21lYW4sIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKQogICAgZ2Ntdm5fc3RkID0gdG9yY2gudGVuc29yKF9nY212bl9zdGQsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKQoKICAgIHdhdiwgc2FtcGxlX3JhdGUgPSB0b3JjaGF1ZGlvLmxvYWQoYXJncy5pbnB1dCkKICAgIHdhdiA9IHRvcmNoYXVkaW8uZnVuY3Rpb25hbC5yZXNhbXBsZSh3YXYsIG9yaWdfZnJlcT1zYW1wbGVfcmF0ZSwgbmV3X2ZyZXE9MTZfMDAwKQogICAgd2F2ID0gd2F2LnRyYW5zcG9zZSgwLCAxKQoKICAgIGRhdGEgPSBmYmFua19leHRyYWN0b3IoCiAgICAgICAgewogICAgICAgICAgICAid2F2ZWZvcm0iOiB3YXYsCiAgICAgICAgICAgICJzYW1wbGVfcmF0ZSI6IDE2MDAwLAogICAgICAgIH0KICAgICkKICAgIGZiYW5rID0gZGF0YVsiZmJhbmsiXQogICAgZ2Ntdm5fZmJhbmsgPSBmYmFuay5zdWJ0cmFjdChnY212bl9tZWFuKS5kaXZpZGUoZ2Ntdm5fc3RkKQogICAgc3RkLCBtZWFuID0gdG9yY2guc3RkX21lYW4oZmJhbmssIGRpbT0wKQogICAgZmJhbmsgPSBmYmFuay5zdWJ0cmFjdChtZWFuKS5kaXZpZGUoc3RkKQoKICAgIHNyYyA9IFNlcXVlbmNlRGF0YSgKICAgICAgICBzZXFzPWZiYW5rLnVuc3F1ZWV6ZSgwKSwKICAgICAgICBzZXFfbGVucz10b3JjaC5Mb25nVGVuc29yKFtmYmFuay5zaGFwZVswXV0pLAogICAgICAgIGlzX3JhZ2dlZD1GYWxzZSwKICAgICkKICAgIHNyY19nY212biA9IFNlcXVlbmNlRGF0YSgKICAgICAgICBzZXFzPWdjbXZuX2ZiYW5rLnVuc3F1ZWV6ZSgwKSwKICAgICAgICBzZXFfbGVucz10b3JjaC5Mb25nVGVuc29yKFtnY212bl9mYmFuay5zaGFwZVswXV0pLAogICAgICAgIGlzX3JhZ2dlZD1GYWxzZSwKICAgICkKCiAgICB0ZXh0X2dlbmVyYXRpb25fb3B0cywgdW5pdF9nZW5lcmF0aW9uX29wdHMgPSBzZXRfZ2VuZXJhdGlvbl9vcHRzKGFyZ3MpCgogICAgbG9nZ2VyLmluZm8oZiJ7dGV4dF9nZW5lcmF0aW9uX29wdHM9fSIpCiAgICBsb2dnZXIuaW5mbyhmInt1bml0X2dlbmVyYXRpb25fb3B0cz19IikKICAgIGxvZ2dlci5pbmZvKAogICAgICAgIGYidW5pdF9nZW5lcmF0aW9uX25ncmFtX2ZpbHRlcmluZz17YXJncy51bml0X2dlbmVyYXRpb25fbmdyYW1fZmlsdGVyaW5nfSIKICAgICkKCiAgICB0ZXh0X291dHB1dCwgdW5pdF9vdXRwdXQgPSB0cmFuc2xhdG9yLnByZWRpY3QoCiAgICAgICAgc3JjLAogICAgICAgICJzMnN0IiwKICAgICAgICBhcmdzLnRndF9sYW5nLAogICAgICAgIHRleHRfZ2VuZXJhdGlvbl9vcHRzPXRleHRfZ2VuZXJhdGlvbl9vcHRzLAogICAgICAgIHVuaXRfZ2VuZXJhdGlvbl9vcHRzPXVuaXRfZ2VuZXJhdGlvbl9vcHRzLAogICAgICAgIHVuaXRfZ2VuZXJhdGlvbl9uZ3JhbV9maWx0ZXJpbmc9YXJncy51bml0X2dlbmVyYXRpb25fbmdyYW1fZmlsdGVyaW5nLAogICAgICAgIGR1cmF0aW9uX2ZhY3Rvcj1hcmdzLmR1cmF0aW9uX2ZhY3RvciwKICAgICAgICBwcm9zb2R5X2VuY29kZXJfaW5wdXQ9c3JjX2djbXZuLAogICAgKQoKICAgIGFzc2VydCB1bml0X291dHB1dCBpcyBub3QgTm9uZQogICAgc3BlZWNoX291dHB1dCA9IHByZXRzc2VsX2dlbmVyYXRvci5wcmVkaWN0KAogICAgICAgIHVuaXRfb3V0cHV0LnVuaXRzLAogICAgICAgIHRndF9sYW5nPWFyZ3MudGd0X2xhbmcsCiAgICAgICAgcHJvc29keV9lbmNvZGVyX2lucHV0PXNyY19nY212biwKICAgICkKCiAgICBsb2dnZXIuaW5mbyhmIlNhdmluZyBleHByZXNzaXZlIHRyYW5zbGF0ZWQgYXVkaW8gaW4ge2FyZ3MudGd0X2xhbmd9IikKICAgIHRvcmNoYXVkaW8uc2F2ZSgKICAgICAgICBhcmdzLm91dHB1dF9wYXRoLAogICAgICAgIHNwZWVjaF9vdXRwdXQuYXVkaW9fd2F2c1swXVswXS50byh0b3JjaC5mbG9hdDMyKS5jcHUoKSwKICAgICAgICBzYW1wbGVfcmF0ZT1zcGVlY2hfb3V0cHV0LnNhbXBsZV9yYXRlLAogICAgKQoKICAgIHRleHRfb3V0ID0gcmVtb3ZlX3Byb3NvZHlfdG9rZW5zX2Zyb21fdGV4dChzdHIodGV4dF9vdXRwdXRbMF0pKQoKICAgIGxvZ2dlci5pbmZvKGYiVHJhbnNsYXRlZCB0ZXh0IGluIHthcmdzLnRndF9sYW5nfToge3RleHRfb3V0fSIpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo='),
    ('seamless/build/lib/seamless_communication/cli/eval_utils/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLmV2YWxfdXRpbHMuY29tcHV0ZV9tZXRyaWNzIGltcG9ydCAoCiAgICBjb21wdXRlX3F1YWxpdHlfbWV0cmljcyBhcyBjb21wdXRlX3F1YWxpdHlfbWV0cmljcywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLmV2YWxfdXRpbHMuY29tcHV0ZV9tZXRyaWNzIGltcG9ydCAoCiAgICBnZXRfdG9rZW5pemVyIGFzIGdldF90b2tlbml6ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5ldmFsX3V0aWxzLmxhbmdfbWFwcGluZyBpbXBvcnQgKAogICAgTEFORzJfTEFORzMgYXMgTEFORzJfTEFORzMsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLmNsaS5ldmFsX3V0aWxzLmxhbmdfbWFwcGluZyBpbXBvcnQgKAogICAgTEFORzNfTEFORzIgYXMgTEFORzNfTEFORzIsCikK'),
    ('seamless/build/lib/seamless_communication/cli/eval_utils/compute_metrics.py', ''),
    ('seamless/build/lib/seamless_communication/cli/eval_utils/lang_mapping.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCkxBTkcyX0xBTkczID0gewogICAgImVuIjogImVuZyIsCiAgICAiYXIiOiAiYXJiIiwKICAgICJhcyI6ICJhc20iLAogICAgImJlIjogImJlbCIsCiAgICAiYmciOiAiYnVsIiwKICAgICJibiI6ICJiZW4iLAogICAgImNhIjogImNhdCIsCiAgICAiY2tiIjogImNrYiIsCiAgICAiY3MiOiAiY2VzIiwKICAgICJjeSI6ICJjeW0iLAogICAgImRhIjogImRhbiIsCiAgICAiZGUiOiAiZGV1IiwKICAgICJlbCI6ICJlbGwiLAogICAgImVzIjogInNwYSIsCiAgICAiZXQiOiAiZXN0IiwKICAgICJmYSI6ICJwZXMiLAogICAgImZpIjogImZpbiIsCiAgICAiZnIiOiAiZnJhIiwKICAgICJnYSI6ICJnbGUiLAogICAgImhpIjogImhpbiIsCiAgICAiaHUiOiAiaHVuIiwKICAgICJpZCI6ICJpbmQiLAogICAgIml0IjogIml0YSIsCiAgICAiamEiOiAianBuIiwKICAgICJrYSI6ICJrYXQiLAogICAgImt5IjogImtpciIsCiAgICAibGciOiAibHVnIiwKICAgICJsdCI6ICJsaXQiLAogICAgImx2IjogImx2cyIsCiAgICAibW4iOiAia2hrIiwKICAgICJtciI6ICJtYXIiLAogICAgIm10IjogIm1sdCIsCiAgICAibmwiOiAibmxkIiwKICAgICJwYSI6ICJwYW4iLAogICAgInBsIjogInBvbCIsCiAgICAicHQiOiAicG9yIiwKICAgICJybyI6ICJyb24iLAogICAgInJ1IjogInJ1cyIsCiAgICAic2siOiAic2xrIiwKICAgICJzbCI6ICJzbHYiLAogICAgInN2IjogInN3ZSIsCiAgICAic3ciOiAic3doIiwKICAgICJ0YSI6ICJ0YW0iLAogICAgInRoIjogInRoYSIsCiAgICAidHIiOiAidHVyIiwKICAgICJ1ayI6ICJ1a3IiLAogICAgInVyIjogInVyZCIsCiAgICAidXoiOiAidXpuIiwKICAgICJ2aSI6ICJ2aWUiLAogICAgInl1ZSI6ICJ5dWUiLAogICAgImFmIjogImFmciIsCiAgICAiaXMiOiAiaXNsIiwKICAgICJsYiI6ICJsdHoiLAogICAgIm5vIjogIm5vYiIsCiAgICAiZ2wiOiAiZ2xnIiwKICAgICJrZWEiOiAia2VhIiwKICAgICJicyI6ICJib3MiLAogICAgImhyIjogImhydiIsCiAgICAibWsiOiAibWtkIiwKICAgICJzciI6ICJzcnAiLAogICAgImh5IjogImh5ZSIsCiAgICAiYXoiOiAiYXpqIiwKICAgICJrayI6ICJrYXoiLAogICAgImtvIjogImtvciIsCiAgICAiZ3UiOiAiZ3VqIiwKICAgICJrbiI6ICJrYW4iLAogICAgIm5lIjogIm5waSIsCiAgICAib3IiOiAib3J5IiwKICAgICJzZCI6ICJzbmQiLAogICAgInRlIjogInRlbCIsCiAgICAiY2ViIjogImNlYiIsCiAgICAianYiOiAiamF2IiwKICAgICJtcyI6ICJ6bG0iLAogICAgIm1sIjogIm1hbCIsCiAgICAidGwiOiAidGdsIiwKICAgICJ0bCI6ICJmaWwiLAogICAgIm15IjogIm15YSIsCiAgICAia20iOiAia2htIiwKICAgICJsbyI6ICJsYW8iLAogICAgImhlIjogImhlYiIsCiAgICAicHMiOiAicGJ0IiwKICAgICJ0ZyI6ICJ0Z2siLAogICAgImFtIjogImFtaCIsCiAgICAiaWciOiAiaWJvIiwKICAgICJsbiI6ICJsaW4iLAogICAgIm5zbyI6ICJuc28iLAogICAgInNvIjogInNvbSIsCiAgICAieGgiOiAieGhvIiwKICAgICJ5byI6ICJ5b3IiLAogICAgInp1IjogInp1bCIsCiAgICAia2FtIjogImthbSIsCiAgICAibHVvIjogImx1byIsCiAgICAibnkiOiAibnlhIiwKICAgICJvbSI6ICJnYXoiLAogICAgInNuIjogInNuYSIsCiAgICAidW1iIjogInVtYiIsCiAgICAiZ2EtSUUiOiAiZ2xlIiwKICAgICJwYSI6ICJwYW4iLAogICAgInN2IjogInN3ZSIsCiAgICAiYXN0IjogImFzdCIsCiAgICAiZmYiOiAiZnVsIiwKICAgICJtaSI6ICJtcmkiLAogICAgImhhIjogImhhdSIsCiAgICAid28iOiAid29sIiwKICAgICJvYyI6ICJvY2kiLAogICAgImlsbyI6ICJpbG8iLAogICAgImJhIjogImJhayIsCiAgICAiYnIiOiAiYnJlIiwKICAgICJmeSI6ICJmcnkiLAogICAgInlpIjogInlpZCIsCiAgICAidG4iOiAidHNuIiwKICAgICJnZCI6ICJnbGEiLAogICAgImh0IjogImhhdCIsCiAgICAibWciOiAibWxnIiwKICAgICJucyI6ICJuc28iLAogICAgInNpIjogInNpbiIsCiAgICAic3EiOiAic3FpIiwKICAgICJzcyI6ICJzc3ciLAogICAgInN1IjogInN1biIsCiAgICAiemgiOiAiY21uIiwKICAgICJhYiI6ICJhYmsiLAogICAgImJhcyI6ICJiYXMiLAogICAgImNuaCI6ICJjbmgiLAogICAgImN2IjogImNodiIsCiAgICAiZHYiOiAiZGl2IiwKICAgICJlbyI6ICJlcG8iLAogICAgImV1IjogImV1cyIsCiAgICAiZnktTkwiOiAiZnJ5IiwKICAgICJnbiI6ICJncm4iLAogICAgImhzYiI6ICJoc2IiLAogICAgImh5IjogImh5ZSIsCiAgICAiaWEiOiAiaW5hIiwKICAgICJrYWIiOiAia2FiIiwKICAgICJrbXIiOiAia21yIiwKICAgICJtZGYiOiAibWRmIiwKICAgICJtaHIiOiAibWhyIiwKICAgICJteXYiOiAibXl2IiwKICAgICJuYW4tdHciOiAiaGJsIiwKICAgICJuZSI6ICJucGkiLAogICAgIm5uLU5PIjogIm5ubyIsCiAgICAicm0tc3Vyc2lsdiI6ICJybS1zdXJzaWx2IiwKICAgICJybS12YWxsYWRlciI6ICJybS12YWxsYWRlciIsCiAgICAicnciOiAia2luIiwKICAgICJzYWgiOiAic2FoIiwKICAgICJzYXQiOiAic2F0IiwKICAgICJzYyI6ICJzcmQiLAogICAgInRpZyI6ICJ0aWciLAogICAgInRvayI6ICJ0b2siLAogICAgInR0IjogInRhdCIsCiAgICAidWciOiAidWlnIiwKICAgICJ2b3QiOiAidm90IiwKICAgICJtcmoiOiAibXJqIiwKICAgICJza3IiOiAic2tyIiwKICAgICJ0aSI6ICJ0aXIiLAogICAgInR3IjogInR3aSIsCiAgICAiYm8iOiAiYm9kIiwKICAgICJmbyI6ICJmYW8iLAogICAgImd2IjogImdsdiIsCiAgICAiaGF3IjogImhhdyIsCiAgICAibGEiOiAibGF0IiwKICAgICJzYSI6ICJzYW4iLAogICAgInNjbyI6ICJzY28iLAogICAgIndhciI6ICJ3YXIiLAogICAgImhlIjogImhlYiIsCiAgICAianciOiAiamF2IiwKICAgICJubiI6ICJubm8iLAogICAgInRrIjogInR1ayIsCn0KTEFORzNfTEFORzIgPSB7djogayBmb3IgaywgdiBpbiBMQU5HMl9MQU5HMy5pdGVtcygpfQo='),
    ('seamless/build/lib/seamless_communication/cli/m4t/__init__.py', ''),
    ('seamless/build/lib/seamless_communication/cli/m4t/audio_to_units/audio_to_units.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojCiMgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBsb2dnaW5nCgppbXBvcnQgdG9yY2gKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdF9leHRyYWN0b3IgaW1wb3J0IFVuaXRFeHRyYWN0b3IKCmxvZ2dpbmcuYmFzaWNDb25maWcobGV2ZWw9bG9nZ2luZy5JTkZPKQpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpkZWYgbWFpbigpOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoCiAgICAgICAgZGVzY3JpcHRpb249IkNvbnZlcnQgcmF3IGF1ZGlvIHRvIHVuaXRzIChhbmQgb3B0aW9uYWxseSBhdWRpbykgdXNpbmcgVW5pdEV4dHJhY3Rvci4iCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCJhdWRpbyIsIHR5cGU9c3RyLCBoZWxwPSJBdWRpbyBXQVYgZmlsZSBwYXRoLiIpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWttZWFuc191cmkiLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIGhlbHA9IlVSTCBwYXRoIHRvIHRoZSBLLU1lYW5zIG1vZGVsLiIsCiAgICAgICAgZGVmYXVsdD0iaHR0cHM6Ly9kbC5mYmFpcHVibGljZmlsZXMuY29tL3NlYW1sZXNzTTRUL21vZGVscy91bml0X2V4dHJhY3Rpb24va21lYW5zXzEway5ucHkiLAogICAgKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAiLS1tb2RlbF9uYW1lIiwKICAgICAgICB0eXBlPXN0ciwKICAgICAgICBoZWxwPSJGZWF0dXJlIGV4dHJhY3Rpb24gbW9kZWwgbmFtZSAoYHhsc3IyXzFiX3YyYCkiLAogICAgICAgIGRlZmF1bHQ9Inhsc3IyXzFiX3YyIiwKICAgICkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0tb3V0X2xheWVyX251bWJlciIsCiAgICAgICAgdHlwZT1pbnQsCiAgICAgICAgaGVscD0iTGF5ZXIgbnVtYmVyIG9mIHRoZSBmZWF0dXJlIGV4dHJhY3Rpb24gbW9kZWwgdG8gcHVsbCBvdXQgZmVhdHVyZXMgZnJvbS4iLAogICAgICAgIGRlZmF1bHQ9MzUsCiAgICApCgogICAgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKCkKCiAgICBpZiB0b3JjaC5jdWRhLmlzX2F2YWlsYWJsZSgpOgogICAgICAgIGRldmljZSA9IHRvcmNoLmRldmljZSgiY3VkYTowIikKICAgICAgICBsb2dnZXIuaW5mbygiUnVubmluZyB1bml0X2V4dHJhY3Rpb24gb24gdGhlIEdQVS4iKQogICAgZWxzZToKICAgICAgICBkZXZpY2UgPSB0b3JjaC5kZXZpY2UoImNwdSIpCiAgICAgICAgbG9nZ2VyLmluZm8oIlJ1bm5pbmcgdW5pdF9leHRyYWN0aW9uIG9uIHRoZSBDUFUuIikKCiAgICB1bml0X2V4dHJhY3RvciA9IFVuaXRFeHRyYWN0b3IoYXJncy5tb2RlbF9uYW1lLCBhcmdzLmttZWFuc191cmksIGRldmljZT1kZXZpY2UpCiAgICB1bml0cyA9IHVuaXRfZXh0cmFjdG9yLnByZWRpY3QoYXJncy5hdWRpbywgYXJncy5vdXRfbGF5ZXJfbnVtYmVyIC0gMSkKICAgIGxvZ2dlci5pbmZvKGYiQ29udmVydGVkIHRvIHVuaXRzOiB7dW5pdHN9IikKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg=='),
    ('seamless/build/lib/seamless_communication/cli/m4t/audio_to_units/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCg=='),
    ('seamless/build/lib/seamless_communication/cli/m4t/evaluate/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCg=='),
    ('seamless/build/lib/seamless_communication/cli/m4t/evaluate/evaluate.py', ''),
    ('seamless/build/lib/seamless_communication/cli/m4t/finetune/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCg=='),
    ('seamless/build/lib/seamless_communication/cli/m4t/finetune/dataset.py', ''),
    ('seamless/build/lib/seamless_communication/cli/m4t/finetune/finetune.py', ''),
    ('seamless/build/lib/seamless_communication/cli/m4t/finetune/dataloader.py', ''),
    ('seamless/build/lib/seamless_communication/cli/m4t/finetune/dist_utils.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgppbXBvcnQgbG9nZ2luZwppbXBvcnQgb3MKZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZWRlbHRhCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0CgppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoLmRpc3RyaWJ1dGVkIGFzIGRpc3QKaW1wb3J0IHRvcmNoLm11bHRpcHJvY2Vzc2luZwoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKZGVmIGlzX2Rpc3RfaW5pdGlhbGl6ZWQoKSAtPiBib29sOgogICAgaWYgbm90IGRpc3QuaXNfYXZhaWxhYmxlKCk6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBpZiBub3QgZGlzdC5pc19pbml0aWFsaXplZCgpOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIFRydWUKCgpkZWYgZ2V0X3JhbmsoKSAtPiBpbnQ6CiAgICBpZiBub3QgaXNfZGlzdF9pbml0aWFsaXplZCgpOgogICAgICAgIHJldHVybiAwCiAgICByZXR1cm4gZGlzdC5nZXRfcmFuaygpCgoKZGVmIGdldF9sb2NhbF9yYW5rKCkgLT4gaW50OgogICAgaWYgbm90IGlzX2Rpc3RfaW5pdGlhbGl6ZWQoKToKICAgICAgICByZXR1cm4gMAogICAgcmV0dXJuIGludChvcy5lbnZpcm9uWyJMT0NBTF9SQU5LIl0pCgoKZGVmIGdldF93b3JsZF9zaXplKCkgLT4gaW50OgogICAgaWYgbm90IGlzX2Rpc3RfaW5pdGlhbGl6ZWQoKToKICAgICAgICByZXR1cm4gMQogICAgcmV0dXJuIGRpc3QuZ2V0X3dvcmxkX3NpemUoKQoKCmRlZiBpc19tYWluX3Byb2Nlc3MoKSAtPiBib29sOgogICAgcmV0dXJuIGdldF9yYW5rKCkgPT0gMAoKCmRlZiBpbml0X2Rpc3RyaWJ1dGVkKGxvZ2dlcnM6IExpc3RbbG9nZ2luZy5Mb2dnZXJdKSAtPiBOb25lOgogICAgIiIiSW5pdGlhbGl6ZXMgdGhlIGRpc3RyaWJ1dGVkIGJhY2tlbmQiIiIKICAgIHRvcmNoLm11bHRpcHJvY2Vzc2luZy5zZXRfc3RhcnRfbWV0aG9kKCJzcGF3biIpCiAgICBpZiAiUkFOSyIgbm90IGluIG9zLmVudmlyb246CiAgICAgICAgbG9nZ2VyLmVycm9yKAogICAgICAgICAgICAiQ2Fubm90IGluaXQgZGlzcmlidXRlZCBjb250ZXh0LCBhcyBlbnZpcm9ubWVudCB2YXJhaWJsZXMgYXJlIG5vdCBzZXQuIgogICAgICAgICkKICAgICAgICByZXR1cm4KICAgIHJhbmsgPSBpbnQob3MuZW52aXJvblsiUkFOSyJdKQogICAgd29ybGRfc2l6ZSA9IGludChvcy5lbnZpcm9uWyJXT1JMRF9TSVpFIl0pCiAgICBsb2NhbF9yYW5rID0gaW50KG9zLmVudmlyb25bIkxPQ0FMX1JBTksiXSkKICAgIGxvZ2dlci5pbmZvKAogICAgICAgIGYiUmFuaz17cmFua30gbG9jYWwgcmFuaz17bG9jYWxfcmFua30sIHdvcmxkX3NpemU9e3dvcmxkX3NpemV9LCBpc19tYXN0ZXI9e3JhbmsgPT0gMH0iCiAgICApCiAgICBkaXN0LmluaXRfcHJvY2Vzc19ncm91cCgKICAgICAgICBiYWNrZW5kPSJuY2NsIiwKICAgICAgICBpbml0X21ldGhvZD0iZW52Oi8vIiwKICAgICAgICB3b3JsZF9zaXplPXdvcmxkX3NpemUsCiAgICAgICAgcmFuaz1yYW5rLAogICAgICAgIHRpbWVvdXQ9dGltZWRlbHRhKHNlY29uZHM9MTgwKSwKICAgICkKICAgIGxvZ2dlci5pbmZvKGYiU2V0dGluZyBjdWRhOntsb2NhbF9yYW5rfSBhcyBtYWluIGRldmljZSIpCiAgICBpZiBub3QgaXNfbWFpbl9wcm9jZXNzKCk6CiAgICAgICAgZm9yIHRvX211dGUgaW4gbG9nZ2VyczoKICAgICAgICAgICAgdG9fbXV0ZS5zZXRMZXZlbChsb2dnaW5nLkVSUk9SKQogICAgdG9yY2guY3VkYS5zZXRfZGV2aWNlKGxvY2FsX3JhbmspCiAgICBkaXN0LmJhcnJpZXIoKQo='),
    ('seamless/build/lib/seamless_communication/cli/m4t/finetune/trainer.py', ''),
    ('seamless/build/lib/seamless_communication/cli/m4t/predict/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLm00dC5wcmVkaWN0LnByZWRpY3QgaW1wb3J0ICgKICAgIGFkZF9pbmZlcmVuY2VfYXJndW1lbnRzIGFzIGFkZF9pbmZlcmVuY2VfYXJndW1lbnRzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkubTR0LnByZWRpY3QucHJlZGljdCBpbXBvcnQgKAogICAgc2V0X2dlbmVyYXRpb25fb3B0cyBhcyBzZXRfZ2VuZXJhdGlvbl9vcHRzLAopCg=='),
    ('seamless/build/lib/seamless_communication/cli/m4t/predict/predict.py', ''),
    ('seamless/build/lib/seamless_communication/cli/streaming/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/build/lib/seamless_communication/cli/streaming/evaluate.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBhcmdwYXJzZQppbXBvcnQgbG9nZ2luZwoKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uY2xpLnN0cmVhbWluZy5zY29yZXJzLnNlYW1sZXNzX3F1YWxpdHlfc2NvcmVyIGltcG9ydCAoCiAgICBTZWFtbGVzc1F1YWxpdHlTY29yZXIgYXMgU2VhbWxlc3NRdWFsaXR5U2NvcmVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnNlYW1sZXNzX3Myc3QgaW1wb3J0IFNlYW1sZXNzUzJTVEFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnNlYW1sZXNzX3N0cmVhbWluZ19zMnN0IGltcG9ydCAoCiAgICBTZWFtbGVzc1N0cmVhbWluZ1MyU1RBZ2VudCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5zZWFtbGVzc19zdHJlYW1pbmdfczJ0IGltcG9ydCAoCiAgICBTZWFtbGVzc1N0cmVhbWluZ1MyVEFnZW50LAopCgpmcm9tIHNpbXVsZXZhbC5jbGkgaW1wb3J0IGV2YWx1YXRlCgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5JTkZPLAogICAgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKGxldmVsbmFtZSlzIC0tICUobmFtZSlzOiAlKG1lc3NhZ2UpcyIsCikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmRlZiBtYWluKCkgLT4gTm9uZToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKAogICAgICAgIGFkZF9oZWxwPUZhbHNlLAogICAgICAgIGRlc2NyaXB0aW9uPSJTdHJlYW1pbmcgZXZhbHVhdGlvbiBvZiBTZWFtbGVzcyBVbml0WSBtb2RlbHMiLAogICAgICAgIGNvbmZsaWN0X2hhbmRsZXI9InJlc29sdmUiLAogICAgKQoKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgIi0tdGFzayIsCiAgICAgICAgY2hvaWNlcz1bInMyc3QiLCAiczJ0dCIsICJhc3IiXSwKICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgICAgIHR5cGU9c3RyLAogICAgICAgIGhlbHA9IlRhcmdldCBsYW5ndWFnZSB0byB0cmFuc2xhdGUvdHJhbnNjcmliZSBpbnRvLiIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLWV4cHJlc3NpdmUiLAogICAgICAgIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsCiAgICAgICAgZGVmYXVsdD1GYWxzZSwKICAgICAgICBoZWxwPSJFeHByZXNzaXZlIHN0cmVhbWluZyBTMlNUIGluZmVyZW5jZSIsCiAgICApCgogICAgYXJncywgXyA9IHBhcnNlci5wYXJzZV9rbm93bl9hcmdzKCkKCiAgICBtb2RlbF9jb25maWdzID0gZGljdCgKICAgICAgICBzb3VyY2Vfc2VnbWVudF9zaXplPTMyMCwKICAgICAgICBkZXZpY2U9ImN1ZGE6MCIsCiAgICAgICAgZHR5cGU9ImZwMTYiLAogICAgICAgIG1pbl9zdGFydGluZ193YWl0X3cydmJlcnQ9MTkyLAogICAgICAgIGRlY2lzaW9uX3RocmVzaG9sZD0wLjUsCiAgICAgICAgbm9fZWFybHlfc3RvcD1UcnVlLAogICAgICAgIG1heF9sZW5fYT0wLAogICAgICAgIG1heF9sZW5fYj0xMDAsCiAgICApCgogICAgZXZhbF9jb25maWdzID0gZGljdChxdWFsaXR5X21ldHJpY3M9IlNFQU1MRVNTX1FVQUxJVFlfU0NPUkVSIikKICAgIGlmIGFyZ3MudGFzayA9PSAiczJzdCI6CiAgICAgICAgbW9kZWxfY29uZmlnc1sibWluX3VuaXRfY2h1bmtfc2l6ZSJdID0gNTAKICAgICAgICBldmFsX2NvbmZpZ3NbImxhdGVuY3lfbWV0cmljcyJdID0gIlN0YXJ0T2Zmc2V0IEVuZE9mZnNldCIKCiAgICAgICAgaWYgYXJncy5leHByZXNzaXZlOgogICAgICAgICAgICBhZ2VudF9jbGFzcyA9IFNlYW1sZXNzUzJTVEFnZW50CiAgICAgICAgZWxzZToKICAgICAgICAgICAgYWdlbnRfY2xhc3MgPSBTZWFtbGVzc1N0cmVhbWluZ1MyU1RBZ2VudAogICAgZWxpZiBhcmdzLnRhc2sgaW4gWyJzMnR0IiwgImFzciJdOgogICAgICAgIGFzc2VydCBhcmdzLmV4cHJlc3NpdmUgaXMgRmFsc2UsICJTMlRUIGluZmVyZW5jZSBjYW5ub3QgYmUgZXhwcmVzc2l2ZS4iCiAgICAgICAgYWdlbnRfY2xhc3MgPSBTZWFtbGVzc1N0cmVhbWluZ1MyVEFnZW50CiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tdW5pdHktbW9kZWwtbmFtZSIsCiAgICAgICAgICAgIHR5cGU9c3RyLAogICAgICAgICAgICBoZWxwPSJVbml0eSBtb2RlbCBuYW1lLiIsCiAgICAgICAgICAgIGRlZmF1bHQ9InNlYW1sZXNzX3N0cmVhbWluZ191bml0eSIsCiAgICAgICAgKQogICAgICAgIGFyZ3MsIF8gPSBwYXJzZXIucGFyc2Vfa25vd25fYXJncygpCiAgICAgICAgYXNzZXRfY2FyZCA9IGFzc2V0X3N0b3JlLnJldHJpZXZlX2NhcmQobmFtZT1hcmdzLnVuaXR5X21vZGVsX25hbWUpCiAgICAgICAgdG9rZW5pemVyX3VyaSA9IGFzc2V0X2NhcmQuZmllbGQoInRva2VuaXplciIpLmFzX3VyaSgpCiAgICAgICAgdG9rZW5pemVyX3BhdGggPSBkb3dubG9hZF9tYW5hZ2VyLmRvd25sb2FkX3Rva2VuaXplcigKICAgICAgICAgICAgdG9rZW5pemVyX3VyaSwgYXNzZXRfY2FyZC5uYW1lLCBmb3JjZT1GYWxzZSwgcHJvZ3Jlc3M9VHJ1ZQogICAgICAgICkKICAgICAgICBldmFsX2NvbmZpZ3NbImxhdGVuY3lfbWV0cmljcyJdID0gIkFMIExBQUwiCiAgICAgICAgZXZhbF9jb25maWdzWyJldmFsX2xhdGVuY3lfdW5pdCJdID0gInNwbSIKICAgICAgICBldmFsX2NvbmZpZ3NbImV2YWxfbGF0ZW5jeV9zcG1fbW9kZWwiXSA9IHRva2VuaXplcl9wYXRoCgogICAgYmFzZV9jb25maWcgPSBkaWN0KAogICAgICAgIGRhdGFsb2FkZXI9ImZhaXJzZXEyX3MydHQiLAogICAgICAgIGRhdGFsb2FkZXJfY2xhc3M9InNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmRhdGFsb2FkZXJzLnMydHQuU2ltdWxFdmFsU3BlZWNoVG9UZXh0RGF0YWxvYWRlciIsCiAgICApCgogICAgZXZhbHVhdGUoYWdlbnRfY2xhc3MsIHsqKmJhc2VfY29uZmlnLCAqKm1vZGVsX2NvbmZpZ3MsICoqZXZhbF9jb25maWdzfSwgcGFyc2VyKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK'),
    ('seamless/build/lib/seamless_communication/cli/streaming/scorers/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/build/lib/seamless_communication/cli/streaming/scorers/seamless_quality_scorer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBqc29uCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBPcHRpb25hbAoKaW1wb3J0IHBhbmRhcwpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGV2aWNlCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5jbGkuZXZhbF91dGlscyBpbXBvcnQgY29tcHV0ZV9xdWFsaXR5X21ldHJpY3MKZnJvbSBzaW11bGV2YWwuZXZhbHVhdG9yLmluc3RhbmNlIGltcG9ydCBMb2dJbnN0YW5jZQpmcm9tIHNpbXVsZXZhbC5ldmFsdWF0b3Iuc2NvcmVycy5xdWFsaXR5X3Njb3JlciBpbXBvcnQgKAogICAgUXVhbGl0eVNjb3JlciwKICAgIHJlZ2lzdGVyX3F1YWxpdHlfc2NvcmVyLAopCgoKQHJlZ2lzdGVyX3F1YWxpdHlfc2NvcmVyKCJTRUFNTEVTU19RVUFMSVRZX1NDT1JFUiIpCmNsYXNzIFNlYW1sZXNzUXVhbGl0eVNjb3JlcihRdWFsaXR5U2NvcmVyKTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICB0Z3RfbGFuZzogc3RyLAogICAgICAgIHRhc2s6IHN0ciwKICAgICAgICBvdXRwdXRfZGlyOiBzdHIsCiAgICAgICAgZGV2aWNlOiBEZXZpY2UgPSAiY3VkYTowIiwKICAgICAgICB3aGlzcGVyX21vZGVsX25hbWU6IHN0ciA9ICJsYXJnZSIsCiAgICAgICAgd2hpc3Blcl9ub3JtYWxpemVfdGV4dF9vdXRwdXQ6IE9wdGlvbmFsW2Jvb2xdID0gTm9uZSwKICAgICAgICByZWZfdGV4dF9jb2xfbmFtZTogc3RyID0gInJlZl90Z3RfdGV4dCIsCiAgICAgICAgcHJlZF90ZXh0X2NvbF9uYW1lOiBzdHIgPSAicHJlZF90Z3RfdGV4dCIsCiAgICAgICAgcHJlZF9hdWRpb19jb2xfbmFtZTogc3RyID0gInByZWRfdGd0X2F1ZGlvIiwKICAgICkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLnRndF9sYW5nID0gdGd0X2xhbmcKICAgICAgICBzZWxmLnRhc2sgPSB0YXNrLnVwcGVyKCkKICAgICAgICBzZWxmLmRldmljZSA9IGRldmljZQogICAgICAgIHNlbGYub3V0cHV0X2RpciA9IFBhdGgob3V0cHV0X2RpcikKICAgICAgICBzZWxmLndoaXNwZXJfbW9kZWxfbmFtZSA9IHdoaXNwZXJfbW9kZWxfbmFtZQogICAgICAgIHNlbGYud2hpc3Blcl9ub3JtYWxpemVfdGV4dF9vdXRwdXQgPSB3aGlzcGVyX25vcm1hbGl6ZV90ZXh0X291dHB1dAogICAgICAgIGlmIHNlbGYud2hpc3Blcl9ub3JtYWxpemVfdGV4dF9vdXRwdXQgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi53aGlzcGVyX25vcm1hbGl6ZV90ZXh0X291dHB1dCA9ICgKICAgICAgICAgICAgICAgIEZhbHNlIGlmIHNlbGYudGFzayBpbiBbIlMyVFQiLCAiUzJTVCIsICJUMlRUIl0gZWxzZSBUcnVlCiAgICAgICAgICAgICkKICAgICAgICBzZWxmLnJlZl90ZXh0X2NvbF9uYW1lID0gcmVmX3RleHRfY29sX25hbWUKICAgICAgICBzZWxmLnByZWRfdGV4dF9jb2xfbmFtZSA9IHByZWRfdGV4dF9jb2xfbmFtZQogICAgICAgIHNlbGYucHJlZF9hdWRpb19jb2xfbmFtZSA9IHByZWRfYXVkaW9fY29sX25hbWUKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgaW5zdGFuY2VzOiBEaWN0W2ludCwgTG9nSW5zdGFuY2VdKSAtPiBmbG9hdDoKICAgICAgICByZWZlcmVuY2VzID0gW2lucy5yZWZlcmVuY2UgZm9yIGlucyBpbiBpbnN0YW5jZXMudmFsdWVzKCldCiAgICAgICAgZGYgPSBwYW5kYXMuRGF0YUZyYW1lKHtzZWxmLnJlZl90ZXh0X2NvbF9uYW1lOiByZWZlcmVuY2VzfSkKICAgICAgICBpZiBzZWxmLnRhc2sgaW4gWyJBU1IiLCAiUzJUVCIsICJUMlRUIl06CiAgICAgICAgICAgIHByZWRpY3Rpb25zID0gW2lucy5wcmVkaWN0aW9uIGZvciBpbnMgaW4gaW5zdGFuY2VzLnZhbHVlcygpXQogICAgICAgICAgICBkZltzZWxmLnByZWRfdGV4dF9jb2xfbmFtZV0gPSBwcmVkaWN0aW9ucwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByZWRpY3Rpb25zID0gW2lucy5wcmVkaWN0aW9uIGZvciBpbnMgaW4gaW5zdGFuY2VzLnZhbHVlcygpXQogICAgICAgICAgICBkZltzZWxmLnByZWRfYXVkaW9fY29sX25hbWVdID0gcHJlZGljdGlvbnMKCiAgICAgICAgZGYudG9fY3N2KAogICAgICAgICAgICBzZWxmLm91dHB1dF9kaXIgLyAicmVzdWx0cy50c3YiLAogICAgICAgICAgICBzZXA9Ilx0IiwKICAgICAgICAgICAgcXVvdGluZz0zLAogICAgICAgICAgICBlbmNvZGluZz0idXRmLTgiLAogICAgICAgICkKICAgICAgICBmaWxlbmFtZSA9IGNvbXB1dGVfcXVhbGl0eV9tZXRyaWNzKAogICAgICAgICAgICBzZWxmLm91dHB1dF9kaXIgLyAicmVzdWx0cy50c3YiLAogICAgICAgICAgICBzZWxmLm91dHB1dF9kaXIsCiAgICAgICAgICAgIHNlbGYudGd0X2xhbmcsCiAgICAgICAgICAgIHNlbGYudGFzaywKICAgICAgICAgICAgc2VsZi5kZXZpY2UsCiAgICAgICAgICAgIHNlbGYud2hpc3Blcl9tb2RlbF9uYW1lLAogICAgICAgICAgICBzZWxmLndoaXNwZXJfbm9ybWFsaXplX3RleHRfb3V0cHV0LAogICAgICAgICAgICBzZWxmLnJlZl90ZXh0X2NvbF9uYW1lLAogICAgICAgICAgICBzZWxmLnByZWRfdGV4dF9jb2xfbmFtZSBpZiBzZWxmLnRhc2sgaW4gWyJBU1IiLCAiUzJUVCIsICJUMlRUIl0gZWxzZSBOb25lLAogICAgICAgICAgICBzZWxmLnByZWRfYXVkaW9fY29sX25hbWUsCiAgICAgICAgKQoKICAgICAgICB3aXRoIG9wZW4oc2VsZi5vdXRwdXRfZGlyIC8gZmlsZW5hbWUsICJyIikgYXMgZjoKICAgICAgICAgICAgY29ycHVzX21ldHJpY19zY29yZSA9IGpzb24ubG9hZChmKVsic2NvcmUiXQoKICAgICAgICByZXR1cm4gY29ycHVzX21ldHJpY19zY29yZSAgIyB0eXBlOiBpZ25vcmVbbm8tYW55LXJldHVybl0KCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgYWRkX2FyZ3MocGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCItLXRhc2siLCB0eXBlPXN0ciwgaGVscD0iVGFzayB0byBldmFsdWF0ZSIsIHJlcXVpcmVkPVRydWUpCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tdGd0LWxhbmciLAogICAgICAgICAgICB0eXBlPXN0ciwKICAgICAgICAgICAgaGVscD0iVGFyZ2V0IGxhbmd1YWdlIHRvIHRyYW5zbGF0ZS90cmFuc2NyaWJlIGludG8uIiwKICAgICAgICAgICAgcmVxdWlyZWQ9VHJ1ZSwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0td2hpc3Blci1tb2RlbC1uYW1lIiwgdHlwZT1zdHIsIGhlbHA9IldoaXNwZXIgbW9kZWwgbmFtZSIsIGRlZmF1bHQ9ImxhcmdlIgogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS13aGlzcGVyLW5vcm1hbGl6ZS10ZXh0LW91dHB1dCIsCiAgICAgICAgICAgIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsCiAgICAgICAgICAgIGhlbHA9Ik5vcm1hbGl6ZSB0ZXh0IG91dHB1dCIsCiAgICAgICAgICAgIGRlZmF1bHQ9Tm9uZSwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tcmVmLXRleHQtY29sLW5hbWUiLAogICAgICAgICAgICB0eXBlPXN0ciwKICAgICAgICAgICAgaGVscD0iUmVmZXJlbmNlIHRleHQgY29sdW1uIG5hbWUiLAogICAgICAgICAgICBkZWZhdWx0PSJyZWZfdGd0X3RleHQiLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1wcmVkLXRleHQtY29sLW5hbWUiLAogICAgICAgICAgICB0eXBlPXN0ciwKICAgICAgICAgICAgaGVscD0iUHJlZGljdGlvbiB0ZXh0IGNvbHVtbiBuYW1lIiwKICAgICAgICAgICAgZGVmYXVsdD0icHJlZF90Z3RfdGV4dCIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXByZWQtYXVkaW8tY29sLW5hbWUiLAogICAgICAgICAgICB0eXBlPXN0ciwKICAgICAgICAgICAgaGVscD0iUHJlZGljdGlvbiBhdWRpbyBjb2x1bW4gbmFtZSIsCiAgICAgICAgICAgIGRlZmF1bHQ9InByZWRfdGd0X2F1ZGlvIiwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9hcmdzKGNscywgYXJnczogTmFtZXNwYWNlKSAtPiBTZWFtbGVzc1F1YWxpdHlTY29yZXI6CiAgICAgICAgcmV0dXJuIGNscygKICAgICAgICAgICAgdGd0X2xhbmc9YXJncy50Z3RfbGFuZywKICAgICAgICAgICAgdGFzaz1hcmdzLnRhc2ssCiAgICAgICAgICAgIG91dHB1dF9kaXI9YXJncy5vdXRwdXQsCiAgICAgICAgICAgIGRldmljZT1nZXRhdHRyKGFyZ3MsICJkZXZpY2UiLCAiY3B1IiksCiAgICAgICAgICAgIHdoaXNwZXJfbW9kZWxfbmFtZT1hcmdzLndoaXNwZXJfbW9kZWxfbmFtZSwKICAgICAgICAgICAgd2hpc3Blcl9ub3JtYWxpemVfdGV4dF9vdXRwdXQ9YXJncy53aGlzcGVyX25vcm1hbGl6ZV90ZXh0X291dHB1dCwKICAgICAgICAgICAgcmVmX3RleHRfY29sX25hbWU9YXJncy5yZWZfdGV4dF9jb2xfbmFtZSwKICAgICAgICAgICAgcHJlZF90ZXh0X2NvbF9uYW1lPWFyZ3MucHJlZF90ZXh0X2NvbF9uYW1lLAogICAgICAgICAgICBwcmVkX2F1ZGlvX2NvbF9uYW1lPWFyZ3MucHJlZF9hdWRpb19jb2xfbmFtZSwKICAgICAgICApCg=='),
    ('seamless/build/lib/seamless_communication/streaming/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/build/lib/seamless_communication/streaming/dataloaders/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuZGF0YWxvYWRlcnMuczJ0dCBpbXBvcnQgKAogICAgU2ltdWxFdmFsU3BlZWNoVG9UZXh0RGF0YWxvYWRlciBhcyBTaW11bEV2YWxTcGVlY2hUb1RleHREYXRhbG9hZGVyLAopCg=='),
    ('seamless/build/lib/seamless_communication/streaming/dataloaders/s2tt.py', ''),
    ('seamless/build/lib/seamless_communication/streaming/agents/seamless_streaming_s2t.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmRldG9rZW5pemVyIGltcG9ydCBEZXRva2VuaXplckFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9mZmxpbmVfdzJ2X2JlcnRfZW5jb2RlciBpbXBvcnQgKAogICAgT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV9mZWF0dXJlX2V4dHJhY3RvciBpbXBvcnQgKAogICAgT25saW5lRmVhdHVyZUV4dHJhY3RvckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV90ZXh0X2RlY29kZXIgaW1wb3J0ICgKICAgIE1NQVNwZWVjaFRvVGV4dERlY29kZXJBZ2VudCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5zaWxlcm9fdmFkIGltcG9ydCBTaWxlcm9WQURBZ2VudApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy51bml0eV9waXBlbGluZSBpbXBvcnQgVW5pdFlBZ2VudFBpcGVsaW5lCgoKY2xhc3MgU2VhbWxlc3NTdHJlYW1pbmdTMlREZXRva0FnZW50KFVuaXRZQWdlbnRQaXBlbGluZSk6CiAgICBwaXBlbGluZSA9IFsKICAgICAgICBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQsCiAgICAgICAgT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50LAogICAgICAgIE1NQVNwZWVjaFRvVGV4dERlY29kZXJBZ2VudCwKICAgICAgICBEZXRva2VuaXplckFnZW50LAogICAgXQoKCmNsYXNzIFNlYW1sZXNzU3RyZWFtaW5nUzJUQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgTU1BU3BlZWNoVG9UZXh0RGVjb2RlckFnZW50LAogICAgXQoKCmNsYXNzIFNlYW1sZXNzU3RyZWFtaW5nUzJUVkFEQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIFNpbGVyb1ZBREFnZW50LAogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgTU1BU3BlZWNoVG9UZXh0RGVjb2RlckFnZW50LAogICAgICAgIERldG9rZW5pemVyQWdlbnQsCiAgICBdCg=='),
    ('seamless/build/lib/seamless_communication/streaming/agents/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCg=='),
    ('seamless/build/lib/seamless_communication/streaming/agents/detokenizer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIsIE5hbWVzcGFjZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0Cgpmcm9tIHNpbXVsZXZhbC5hZ2VudHMgaW1wb3J0IFRleHRUb1RleHRBZ2VudApmcm9tIHNpbXVsZXZhbC5hZ2VudHMuYWN0aW9ucyBpbXBvcnQgQWN0aW9uLCBSZWFkQWN0aW9uLCBXcml0ZUFjdGlvbgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5jb21tb24gaW1wb3J0ICgKICAgIEFnZW50U3RhdGVzLAogICAgTm9VcGRhdGVUYXJnZXRNaXhpbiwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5vbmxpbmVfdGV4dF9kZWNvZGVyIGltcG9ydCAoCiAgICBVbml0WVRleHREZWNvZGVyT3V0cHV0LAopCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNlZ21lbnQsIEVtcHR5U2VnbWVudAoKCmNsYXNzIERldG9rZW5pemVyQWdlbnQoTm9VcGRhdGVUYXJnZXRNaXhpbiwgVGV4dFRvVGV4dEFnZW50KTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgX19pbml0X18oc2VsZiwgYXJnczogTmFtZXNwYWNlKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGFyZ3MpCiAgICAgICAgc2VsZi5kZXRva2VuaXplX29ubHkgPSBhcmdzLmRldG9rZW5pemVfb25seQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21fYXJncyhjbHMsIGFyZ3M6IE5hbWVzcGFjZSwgKiprd2FyZ3M6IERpY3Rbc3RyLCBBbnldKSAtPiBEZXRva2VuaXplckFnZW50OgogICAgICAgIHJldHVybiBjbHMoYXJncykKCiAgICBkZWYgYWRkX2FyZ3MocGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1kZXRva2VuaXplLW9ubHkiLAogICAgICAgICAgICBhY3Rpb249InN0b3JlX3RydWUiLAogICAgICAgICAgICBkZWZhdWx0PVRydWUsCiAgICAgICAgICAgIGhlbHA9IlJ1biBkZXRva2VuaXphdGlvbiB3aXRob3V0IHdhaXRpbmcgZm9yIGEgbmV3IHRva2VuLiIsCiAgICAgICAgKQoKICAgIGRlZiBwb2xpY3koc2VsZiwgc3RhdGVzOiBBZ2VudFN0YXRlcykgLT4gQWN0aW9uOgogICAgICAgIHBvc3NpYmxlX2Z1bGxfd29yZHMgPSBzZWxmLmRlY29kZSgiICIuam9pbihbeCBmb3IgeCBpbiBzdGF0ZXMuc291cmNlXSkpCgogICAgICAgIGlmIHNlbGYuZGV0b2tlbml6ZV9vbmx5IGFuZCBsZW4oc3RhdGVzLnNvdXJjZSkgPiAwOgogICAgICAgICAgICBzdGF0ZXMuc291cmNlID0gW10KICAgICAgICAgICAgaWYgbGVuKHBvc3NpYmxlX2Z1bGxfd29yZHMpID09IDAgYW5kIG5vdCBzdGF0ZXMuc291cmNlX2ZpbmlzaGVkOgogICAgICAgICAgICAgICAgcmV0dXJuIFJlYWRBY3Rpb24oKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIFdyaXRlQWN0aW9uKHBvc3NpYmxlX2Z1bGxfd29yZHMsIHN0YXRlcy5zb3VyY2VfZmluaXNoZWQpCgogICAgICAgIGlmIHN0YXRlcy5zb3VyY2VfZmluaXNoZWQ6CiAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbihwb3NzaWJsZV9mdWxsX3dvcmRzLCBUcnVlKQogICAgICAgIGVsaWYgbGVuKHBvc3NpYmxlX2Z1bGxfd29yZHMuc3BsaXQoKSkgPiAxOgogICAgICAgICAgICBmdWxsX3dvcmQgPSBwb3NzaWJsZV9mdWxsX3dvcmRzLnNwbGl0KClbMF0KICAgICAgICAgICAgc3RhdGVzLnNvdXJjZSA9IHN0YXRlcy5zb3VyY2VbLTE6XQogICAgICAgICAgICByZXR1cm4gV3JpdGVBY3Rpb24oZnVsbF93b3JkLCBmaW5pc2hlZD1GYWxzZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gUmVhZEFjdGlvbigpCgogICAgZGVmIGRlY29kZShzZWxmLCB4OiBzdHIpIC0+IHN0cjoKICAgICAgICByZXR1cm4geC5yZXBsYWNlKCIgIiwgIiIpLnJlcGxhY2UoIlx1MjU4MSIsICIgIikuc3RyaXAoKQoKCmNsYXNzIFVuaXRZRGV0b2tlbml6ZXJBZ2VudFN0YXRlcyhBZ2VudFN0YXRlcyk6CiAgICBkZWYgdXBkYXRlX3NvdXJjZShzZWxmLCBzZWdtZW50OiBTZWdtZW50KSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIEV4dHJhY3QgdG9rZW5zIGZyb20gVW5pdFlUZXh0RGVjb2Rlck91dHB1dAogICAgICAgICIiIgogICAgICAgIHNlbGYuc291cmNlX2ZpbmlzaGVkID0gc2VnbWVudC5maW5pc2hlZAogICAgICAgIGlmIGlzaW5zdGFuY2Uoc2VnbWVudCwgRW1wdHlTZWdtZW50KToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgIyBUZXh0U2VnbWVudAogICAgICAgIHNlZ21lbnRfY29udGVudDogVW5pdFlUZXh0RGVjb2Rlck91dHB1dCA9IHNlZ21lbnQuY29udGVudAogICAgICAgIHRva2VuID0gc2VnbWVudF9jb250ZW50LnRva2VucwogICAgICAgIHNlbGYuc291cmNlICs9IHRva2VuCgoKY2xhc3MgVW5pdFlEZXRva2VuaXplckFnZW50KERldG9rZW5pemVyQWdlbnQpOgogICAgZGVmIGJ1aWxkX3N0YXRlcyhzZWxmKSAtPiBVbml0WURldG9rZW5pemVyQWdlbnRTdGF0ZXM6CiAgICAgICAgcmV0dXJuIFVuaXRZRGV0b2tlbml6ZXJBZ2VudFN0YXRlcygpCg=='),
    ('seamless/build/lib/seamless_communication/streaming/agents/online_feature_extractor.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBtYXRoCmltcG9ydCB0b3JjaAoKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIsIE5hbWVzcGFjZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBMaXN0Cgpmcm9tIGZhaXJzZXEyLmRhdGEuYXVkaW8gaW1wb3J0IFdhdmVmb3JtVG9GYmFua0NvbnZlcnRlciwgV2F2ZWZvcm1Ub0ZiYW5rSW5wdXQKCmZyb20gc2ltdWxldmFsLmFnZW50cyBpbXBvcnQgU3BlZWNoVG9TcGVlY2hBZ2VudApmcm9tIHNpbXVsZXZhbC5hZ2VudHMuYWN0aW9ucyBpbXBvcnQgQWN0aW9uLCBSZWFkQWN0aW9uLCBXcml0ZUFjdGlvbgpmcm9tIHNpbXVsZXZhbC5kYXRhLnNlZ21lbnRzIGltcG9ydCBTZWdtZW50LCBTcGVlY2hTZWdtZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmNvbW1vbiBpbXBvcnQgQWdlbnRTdGF0ZXMKCgpTSElGVF9TSVpFID0gMTAKV0lORE9XX1NJWkUgPSAyNQpTQU1QTEVfUkFURSA9IDE2MDAwCkZFQVRVUkVfRElNID0gODAKCgpjbGFzcyBGZWF0dXJlU3RhdGVzKEFnZW50U3RhdGVzKTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgcmVzZXQoc2VsZikgLT4gTm9uZToKICAgICAgICBzdXBlcigpLnJlc2V0KCkKICAgICAgICBzZWxmLnByZXZpb3VzX3Jlc2lkdWFsX3NhbXBsZXM6IExpc3RbZmxvYXRdID0gW10KICAgICAgICBzZWxmLnRndF9sYW5nID0gTm9uZQoKICAgIGRlZiB1cGRhdGVfc291cmNlKHNlbGYsIHNlZ21lbnQ6IFNlZ21lbnQpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgVXBkYXRlIHN0YXRlcyBmcm9tIGlucHV0IHNlZ21lbnQKICAgICAgICBBcmdzOgogICAgICAgICAgICBzZWdtZW50ICh+c2ltdWxldmFsLmFnZW50cy5zZWdtZW50cy5TZWdtZW50KTogaW5wdXQgc2VnbWVudAogICAgICAgICIiIgogICAgICAgIHNlbGYuc291cmNlX2ZpbmlzaGVkID0gc2VnbWVudC5maW5pc2hlZAogICAgICAgIGlmIHNlbGYudGd0X2xhbmcgaXMgTm9uZSBhbmQgc2VnbWVudC50Z3RfbGFuZyBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi50Z3RfbGFuZyA9IHNlZ21lbnQudGd0X2xhbmcKICAgICAgICBpZiBub3Qgc2VnbWVudC5pc19lbXB0eToKICAgICAgICAgICAgc2VsZi5zb3VyY2UuYXBwZW5kKHNlZ21lbnQuY29udGVudCkKCgpjbGFzcyBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQoU3BlZWNoVG9TcGVlY2hBZ2VudCk6ICAjIHR5cGU6IGlnbm9yZQogICAgIiIiCiAgICBFeHRyYWN0IHNwZWVjaCBmZWF0dXJlcyBvbiB0aGUgZmx5LgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGFyZ3M6IE5hbWVzcGFjZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhhcmdzKQogICAgICAgIHNlbGYuc2hpZnRfc2l6ZSA9IGFyZ3Muc2hpZnRfc2l6ZQogICAgICAgIHNlbGYud2luZG93X3NpemUgPSBhcmdzLndpbmRvd19zaXplCiAgICAgICAgYXNzZXJ0IHNlbGYud2luZG93X3NpemUgPj0gc2VsZi5zaGlmdF9zaXplCgogICAgICAgIHNlbGYuc2FtcGxlX3JhdGUgPSBhcmdzLnNhbXBsZV9yYXRlCiAgICAgICAgc2VsZi5mZWF0dXJlX2RpbSA9IGFyZ3MuZmVhdHVyZV9kaW0KICAgICAgICBzZWxmLm51bV9zYW1wbGVzX3Blcl9zaGlmdCA9IGludChzZWxmLnNoaWZ0X3NpemUgKiBzZWxmLnNhbXBsZV9yYXRlIC8gMTAwMCkKICAgICAgICBzZWxmLm51bV9zYW1wbGVzX3Blcl93aW5kb3cgPSBpbnQoc2VsZi53aW5kb3dfc2l6ZSAqIHNlbGYuc2FtcGxlX3JhdGUgLyAxMDAwKQogICAgICAgIHNlbGYubGVuX21zX3RvX3NhbXBsZXMgPSBsYW1iZGEgeDogeCAqIHNlbGYuc2FtcGxlX3JhdGUgLyAxMDAwCgogICAgICAgIHNlbGYuY29udmVydF90b19mYmFuayA9IFdhdmVmb3JtVG9GYmFua0NvbnZlcnRlcigKICAgICAgICAgICAgbnVtX21lbF9iaW5zPTgwLAogICAgICAgICAgICB3YXZlZm9ybV9zY2FsZT0yKioxNSBpZiBhcmdzLmRlbm9ybWFsaXplIGVsc2UgMS4wLAogICAgICAgICAgICBzdGFuZGFyZGl6ZT1GYWxzZSwKICAgICAgICAgICAgZGV2aWNlPWFyZ3MuZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1hcmdzLmR0eXBlLAogICAgICAgICkKCiAgICBkZWYgYnVpbGRfc3RhdGVzKHNlbGYpIC0+IEZlYXR1cmVTdGF0ZXM6CiAgICAgICAgcmV0dXJuIEZlYXR1cmVTdGF0ZXMoKQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBhZGRfYXJncyhwYXJzZXI6IEFyZ3VtZW50UGFyc2VyKSAtPiBOb25lOgogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXNoaWZ0LXNpemUiLAogICAgICAgICAgICB0eXBlPWludCwKICAgICAgICAgICAgZGVmYXVsdD1TSElGVF9TSVpFLAogICAgICAgICAgICBoZWxwPSJTaGlmdCBzaXplIG9mIGZlYXR1cmUgZXh0cmFjdGlvbiB3aW5kb3cuIiwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0td2luZG93LXNpemUiLAogICAgICAgICAgICB0eXBlPWludCwKICAgICAgICAgICAgZGVmYXVsdD1XSU5ET1dfU0laRSwKICAgICAgICAgICAgaGVscD0iV2luZG93IHNpemUgb2YgZmVhdHVyZSBleHRyYWN0aW9uIHdpbmRvdy4iLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1mZWF0dXJlLWRpbSIsCiAgICAgICAgICAgIHR5cGU9aW50LAogICAgICAgICAgICBkZWZhdWx0PUZFQVRVUkVfRElNLAogICAgICAgICAgICBoZWxwPSJBY291c3RpYyBmZWF0dXJlIGRpbWVuc2lvbi4iLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1kZW5vcm1hbGl6ZSIsCiAgICAgICAgICAgIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsCiAgICAgICAgICAgIGhlbHA9ImRlbm9ybWFsaXplZCB0byAxNi1iaXQgc2lnbmVkIGludGVnZXJzIiwKICAgICAgICApCgogICAgZGVmIHBvbGljeShzZWxmLCBzdGF0ZXM6IEZlYXR1cmVTdGF0ZXMpIC0+IEFjdGlvbjoKICAgICAgICBpZiBsZW4oc3RhdGVzLnNvdXJjZSkgPT0gMDoKICAgICAgICAgICAgaWYgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbih7fSwgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKCiAgICAgICAgc2FtcGxlcyA9IHN0YXRlcy5zb3VyY2VbLTFdCgogICAgICAgIHNhbXBsZXMgPSBzdGF0ZXMucHJldmlvdXNfcmVzaWR1YWxfc2FtcGxlcyArIHNhbXBsZXMKICAgICAgICBpZiBsZW4oc2FtcGxlcykgPCBzZWxmLm51bV9zYW1wbGVzX3Blcl93aW5kb3c6CiAgICAgICAgICAgIHN0YXRlcy5wcmV2aW91c19yZXNpZHVhbF9zYW1wbGVzID0gc2FtcGxlcwogICAgICAgICAgICByZXR1cm4gUmVhZEFjdGlvbigpCgogICAgICAgICMgbnVtX2ZyYW1lcyBpcyB0aGUgbnVtYmVyIG9mIGZyYW1lcyBmcm9tIHRoZSBuZXcgc2VnbWVudAogICAgICAgIG51bV9mcmFtZXMgPSBtYXRoLmZsb29yKAogICAgICAgICAgICAobGVuKHNhbXBsZXMpIC0gc2VsZi5sZW5fbXNfdG9fc2FtcGxlcyhzZWxmLndpbmRvd19zaXplIC0gc2VsZi5zaGlmdF9zaXplKSkKICAgICAgICAgICAgLyBzZWxmLm51bV9zYW1wbGVzX3Blcl9zaGlmdAogICAgICAgICkKCiAgICAgICAgIyB0aGUgbnVtYmVyIG9mIGZyYW1lcyB1c2VkIGZvciBmZWF0dXJlIGV4dHJhY3Rpb24KICAgICAgICAjIGluY2x1ZGluZyBzb21lIHBhcnQgb2YgdGhlIHByZXZpb3VzIHNlZ21lbnQKICAgICAgICBlZmZlY3RpdmVfbnVtX3NhbXBsZXMgPSBpbnQoCiAgICAgICAgICAgIG51bV9mcmFtZXMgKiBzZWxmLmxlbl9tc190b19zYW1wbGVzKHNlbGYuc2hpZnRfc2l6ZSkKICAgICAgICAgICAgKyBzZWxmLmxlbl9tc190b19zYW1wbGVzKHNlbGYud2luZG93X3NpemUgLSBzZWxmLnNoaWZ0X3NpemUpCiAgICAgICAgKQoKICAgICAgICBpbnB1dF9zYW1wbGVzID0gc2FtcGxlc1s6ZWZmZWN0aXZlX251bV9zYW1wbGVzXQogICAgICAgIHN0YXRlcy5wcmV2aW91c19yZXNpZHVhbF9zYW1wbGVzID0gc2FtcGxlc1sKICAgICAgICAgICAgbnVtX2ZyYW1lcyAqIHNlbGYubnVtX3NhbXBsZXNfcGVyX3NoaWZ0IDoKICAgICAgICBdCgogICAgICAgIGRhdGE6IFdhdmVmb3JtVG9GYmFua0lucHV0ID0gewogICAgICAgICAgICAid2F2ZWZvcm0iOiB0b3JjaC50ZW5zb3IoaW5wdXRfc2FtcGxlcykudW5zcXVlZXplKDApLAogICAgICAgICAgICAic2FtcGxlX3JhdGUiOiBzZWxmLnNhbXBsZV9yYXRlLAogICAgICAgIH0KCiAgICAgICAgb3V0cHV0ID0gc2VsZi5jb252ZXJ0X3RvX2ZiYW5rKGRhdGEpWyJmYmFuayJdCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigKICAgICAgICAgICAgU3BlZWNoU2VnbWVudCgKICAgICAgICAgICAgICAgIGNvbnRlbnQ9b3V0cHV0LAogICAgICAgICAgICAgICAgdGd0X2xhbmc9c3RhdGVzLnRndF9sYW5nLAogICAgICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9hcmdzKGNscywgYXJnczogQW55LCAqKmt3YXJnczogQW55KSAtPiBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQ6CiAgICAgICAgcmV0dXJuIGNscyhhcmdzKQo='),
    ('seamless/build/lib/seamless_communication/streaming/agents/pretssel_vocoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBsb2dnaW5nCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBBbnksIERpY3QsIExpc3QKCmltcG9ydCB0b3JjaApmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgYXNzZXRfc3RvcmUKZnJvbSBmYWlyc2VxMi5kYXRhLmF1ZGlvIGltcG9ydCBXYXZlZm9ybVRvRmJhbmtDb252ZXJ0ZXIsIFdhdmVmb3JtVG9GYmFua0lucHV0CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuZ2VuZXJhdG9yLmxvYWRlciBpbXBvcnQgbG9hZF9wcmV0c3NlbF92b2NvZGVyX21vZGVsCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkgaW1wb3J0IGxvYWRfZ2Ntdm5fc3RhdHMKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0b3JlIGltcG9ydCBhZGRfZ2F0ZWRfYXNzZXRzCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmNvbW1vbiBpbXBvcnQgKAogICAgQWdlbnRTdGF0ZXMsCiAgICBOb1VwZGF0ZVRhcmdldE1peGluLAopCmZyb20gc2ltdWxldmFsLmFnZW50cyBpbXBvcnQgVGV4dFRvU3BlZWNoQWdlbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IFJlYWRBY3Rpb24sIFdyaXRlQWN0aW9uCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNwZWVjaFNlZ21lbnQKCmxvZ2dpbmcuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICBmb3JtYXQ9IiUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgLS0gJShuYW1lKXM6ICUobWVzc2FnZSlzIiwKKQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKY2xhc3MgUHJldHNzZWxWb2NvZGVyQWdlbnQoTm9VcGRhdGVUYXJnZXRNaXhpbiwgVGV4dFRvU3BlZWNoQWdlbnQpOiAgIyB0eXBlOiBpZ25vcmUKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBhcmdzOiBOYW1lc3BhY2UpIC0+IE5vbmU6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhhcmdzKQoKICAgICAgICBpZiBhcmdzLmdhdGVkX21vZGVsX2RpcjoKICAgICAgICAgICAgYWRkX2dhdGVkX2Fzc2V0cyhhcmdzLmdhdGVkX21vZGVsX2RpcikKCiAgICAgICAgbG9nZ2VyLmluZm8oCiAgICAgICAgICAgIGYiTG9hZGluZyB0aGUgVm9jb2RlciBtb2RlbDoge2FyZ3Mudm9jb2Rlcl9uYW1lfSBvbiBkZXZpY2U9e2FyZ3MuZGV2aWNlfSwgZHR5cGU9e2FyZ3MuZHR5cGV9IgogICAgICAgICkKICAgICAgICBhc3NlcnQgInByZXRzc2VsIiBpbiBhcmdzLnZvY29kZXJfbmFtZQogICAgICAgIHNlbGYudm9jb2RlciA9IGxvYWRfcHJldHNzZWxfdm9jb2Rlcl9tb2RlbCgKICAgICAgICAgICAgYXJncy52b2NvZGVyX25hbWUsIGRldmljZT1hcmdzLmRldmljZSwgZHR5cGU9YXJncy5kdHlwZQogICAgICAgICkKICAgICAgICBzZWxmLnZvY29kZXIuZXZhbCgpCgogICAgICAgIHZvY29kZXJfbW9kZWxfY2FyZCA9IGFzc2V0X3N0b3JlLnJldHJpZXZlX2NhcmQoYXJncy52b2NvZGVyX25hbWUpCiAgICAgICAgc2VsZi52b2NvZGVyX3NhbXBsZV9yYXRlID0gdm9jb2Rlcl9tb2RlbF9jYXJkLmZpZWxkKCJzYW1wbGVfcmF0ZSIpLmFzXyhpbnQpCiAgICAgICAgc2VsZi52b2NvZGVyX2xhbmdzID0gdm9jb2Rlcl9tb2RlbF9jYXJkLmZpZWxkKCJtb2RlbF9jb25maWciKS5maWVsZCgibGFuZ3MiKS5hc19saXN0KHN0cikKCiAgICAgICAgc2VsZi51cHN0cmVhbV9pZHggPSBhcmdzLnVwc3RyZWFtX2lkeAogICAgICAgIHNlbGYuc2FtcGxlX3JhdGUgPSBhcmdzLnNhbXBsZV9yYXRlICAjIGlucHV0IHNhbXBsZSByYXRlCiAgICAgICAgc2VsZi50Z3RfbGFuZyA9IGFyZ3MudGd0X2xhbmcKICAgICAgICBzZWxmLmNvbnZlcnRfdG9fZmJhbmsgPSBXYXZlZm9ybVRvRmJhbmtDb252ZXJ0ZXIoCiAgICAgICAgICAgIG51bV9tZWxfYmlucz04MCwKICAgICAgICAgICAgd2F2ZWZvcm1fc2NhbGU9MioqMTUsCiAgICAgICAgICAgIGNoYW5uZWxfbGFzdD1UcnVlLAogICAgICAgICAgICBzdGFuZGFyZGl6ZT1GYWxzZSwKICAgICAgICAgICAgZGV2aWNlPWFyZ3MuZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1hcmdzLmR0eXBlLAogICAgICAgICkKCiAgICAgICAgX2djbXZuX21lYW4sIF9nY212bl9zdGQgPSBsb2FkX2djbXZuX3N0YXRzKGFyZ3Mudm9jb2Rlcl9uYW1lKQogICAgICAgIHNlbGYuZ2Ntdm5fbWVhbiA9IHRvcmNoLnRlbnNvcigKICAgICAgICAgICAgX2djbXZuX21lYW4sIGRldmljZT1hcmdzLmRldmljZSwgZHR5cGU9YXJncy5kdHlwZQogICAgICAgICkKICAgICAgICBzZWxmLmdjbXZuX3N0ZCA9IHRvcmNoLnRlbnNvcihfZ2Ntdm5fc3RkLCBkZXZpY2U9YXJncy5kZXZpY2UsIGR0eXBlPWFyZ3MuZHR5cGUpCgogICAgZGVmIGdjbXZuX25vcm1hbGl6ZShzZWxmLCBzZXFzOiB0b3JjaC5UZW5zb3IpIC0+IHRvcmNoLlRlbnNvcjoKICAgICAgICByZXN1bHQ6IHRvcmNoLlRlbnNvciA9IHNlcXMuc3VidHJhY3Qoc2VsZi5nY212bl9tZWFuKS5kaXZpZGUoc2VsZi5nY212bl9zdGQpCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogQWdlbnRTdGF0ZXMpIC0+IFdyaXRlQWN0aW9uOgogICAgICAgICIiIgogICAgICAgIFRoZSBwb2xpY3kgaXMgYWx3YXlzIHdyaXRlIGlmIHRoZXJlIGlzIGEgd2F2ZWZvcm0KICAgICAgICAiIiIKICAgICAgICB1bml0cyA9IHN0YXRlcy5zb3VyY2UKCiAgICAgICAgaWYgbGVuKHVuaXRzKSA9PSAwIG9yIGxlbih1bml0c1swXSkgPT0gMDoKICAgICAgICAgICAgaWYgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbihjb250ZW50PVtdLCBmaW5pc2hlZD1UcnVlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIFJlYWRBY3Rpb24oKQoKICAgICAgICB1bml0ID0gdW5pdHNbMF1bMF0KCiAgICAgICAgIyBhZGp1c3QgdGhlIGNvbnRyb2wgc3ltYm9scyBmb3IgdGhlIGVtYmVkZGluZwogICAgICAgIHVuaXQgKz0gNAoKICAgICAgICB1bml0LCBkdXJhdGlvbiA9IHRvcmNoLnVuaXF1ZV9jb25zZWN1dGl2ZSh1bml0LCByZXR1cm5fY291bnRzPVRydWUpCgogICAgICAgIGR1cmF0aW9uICo9IDIKCiAgICAgICAgaWYgaXNpbnN0YW5jZShzdGF0ZXMudXBzdHJlYW1fc3RhdGVzW3NlbGYudXBzdHJlYW1faWR4XS5zb3VyY2UsIGxpc3QpOgogICAgICAgICAgICBzb3VyY2U6IExpc3RbZmxvYXRdID0gc3VtKAogICAgICAgICAgICAgICAgc3RhdGVzLnVwc3RyZWFtX3N0YXRlc1tzZWxmLnVwc3RyZWFtX2lkeF0uc291cmNlLCBbXQogICAgICAgICAgICApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc291cmNlID0gc3RhdGVzLnVwc3RyZWFtX3N0YXRlc1tzZWxmLnVwc3RyZWFtX2lkeF0uc291cmNlCgogICAgICAgIGF1ZGlvX2RpY3Q6IFdhdmVmb3JtVG9GYmFua0lucHV0ID0gewogICAgICAgICAgICAid2F2ZWZvcm0iOiB0b3JjaC50ZW5zb3IoCiAgICAgICAgICAgICAgICBzb3VyY2UsIGR0eXBlPXRvcmNoLmZsb2F0MzIsIGRldmljZT1zZWxmLmRldmljZQogICAgICAgICAgICApLnVuc3F1ZWV6ZSgxKSwKICAgICAgICAgICAgInNhbXBsZV9yYXRlIjogc2VsZi5zYW1wbGVfcmF0ZSwKICAgICAgICB9CgogICAgICAgIGZlYXRzID0gc2VsZi5jb252ZXJ0X3RvX2ZiYW5rKGF1ZGlvX2RpY3QpWyJmYmFuayJdCgogICAgICAgIGZlYXRzID0gc2VsZi5nY212bl9ub3JtYWxpemUoZmVhdHMpCgogICAgICAgIHRndF9sYW5nID0gc3RhdGVzLnRndF9sYW5nIGlmIHN0YXRlcy50Z3RfbGFuZyBlbHNlIHNlbGYudGd0X2xhbmcKCiAgICAgICAgCiAgICAgICAgaWYgdGd0X2xhbmcgbm90IGluIHNlbGYudm9jb2Rlcl9sYW5nczoKICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJ7dGd0X2xhbmd9IG5vdCBzdXBwb3J0ZWQhIikKICAgICAgICAgICAgY29udGVudCA9IFtdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2F2ID0gc2VsZi52b2NvZGVyKAogICAgICAgICAgICAgICAgdW5pdCwKICAgICAgICAgICAgICAgIHRndF9sYW5nPXRndF9sYW5nLAogICAgICAgICAgICAgICAgcHJvc29keV9pbnB1dF9zZXFzPWZlYXRzLAogICAgICAgICAgICAgICAgZHVyYXRpb25zPWR1cmF0aW9uLnVuc3F1ZWV6ZSgwKSwKICAgICAgICAgICAgICAgIG5vcm1hbGl6ZV9iZWZvcmU9VHJ1ZSwKICAgICAgICAgICAgKQogICAgICAgICAgICBjb250ZW50ID0gd2F2WzBdWzBdWzBdLnRvbGlzdCgpCgogICAgICAgIHN0YXRlcy5zb3VyY2UgPSBbXQoKICAgICAgICByZXR1cm4gV3JpdGVBY3Rpb24oCiAgICAgICAgICAgIFNwZWVjaFNlZ21lbnQoCiAgICAgICAgICAgICAgICBjb250ZW50PWNvbnRlbnQsCiAgICAgICAgICAgICAgICBmaW5pc2hlZD1zdGF0ZXMuc291cmNlX2ZpbmlzaGVkLAogICAgICAgICAgICAgICAgc2FtcGxlX3JhdGU9c2VsZi52b2NvZGVyX3NhbXBsZV9yYXRlLAogICAgICAgICAgICAgICAgdGd0X2xhbmc9dGd0X2xhbmcsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGZpbmlzaGVkPXN0YXRlcy5zb3VyY2VfZmluaXNoZWQsCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGFkZF9hcmdzKGNscywgcGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1nYXRlZC1tb2RlbC1kaXIiLAogICAgICAgICAgICB0eXBlPVBhdGgsCiAgICAgICAgICAgIHJlcXVpcmVkPUZhbHNlLAogICAgICAgICAgICBoZWxwPSJTZWFtbGVzc0V4cHJlc3NpdmUgbW9kZWwgZGlyZWN0b3J5LiIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXZvY29kZXItbmFtZSIsCiAgICAgICAgICAgIHR5cGU9c3RyLAogICAgICAgICAgICBoZWxwPSJWb2NvZGVyIG5hbWUgLSB2b2NvZGVyX3ByZXRzc2VsIG9yIHZvY29kZXJfcHJldHNzZWxfMTZraHoiLAogICAgICAgICAgICBkZWZhdWx0PSJ2b2NvZGVyX3ByZXRzc2VsIiwKICAgICAgICApCiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tdXBzdHJlYW0taWR4IiwKICAgICAgICAgICAgdHlwZT1pbnQsCiAgICAgICAgICAgIGRlZmF1bHQ9MCwKICAgICAgICAgICAgaGVscD0iaW5kZXggb2YgZW5jb2RlciBzdGF0ZXMgd2hlcmUgc3RhdGVzLnNvdXJjZSBjb250YWlucyBpbnB1dCBhdWRpbyIsCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21fYXJncygKICAgICAgICBjbHMsIGFyZ3M6IE5hbWVzcGFjZSwgKiprd2FyZ3M6IERpY3Rbc3RyLCBBbnldCiAgICApIC0+IFByZXRzc2VsVm9jb2RlckFnZW50OgogICAgICAgIHJldHVybiBjbHMoYXJncykK'),
    ('seamless/build/lib/seamless_communication/streaming/agents/silero_vad.py', ''),
    ('seamless/build/lib/seamless_communication/streaming/agents/seamless_s2st.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5kZXRva2VuaXplciBpbXBvcnQgVW5pdFlEZXRva2VuaXplckFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9mZmxpbmVfdzJ2X2JlcnRfZW5jb2RlciBpbXBvcnQgKAogICAgT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV9mZWF0dXJlX2V4dHJhY3RvciBpbXBvcnQgKAogICAgT25saW5lRmVhdHVyZUV4dHJhY3RvckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV90ZXh0X2RlY29kZXIgaW1wb3J0ICgKICAgIFVuaXRZTU1BVGV4dERlY29kZXJBZ2VudCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5vbmxpbmVfdW5pdF9kZWNvZGVyIGltcG9ydCAoCiAgICBOQVJVbml0WVVuaXREZWNvZGVyQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMucHJldHNzZWxfdm9jb2RlciBpbXBvcnQgKAogICAgUHJldHNzZWxWb2NvZGVyQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMuZHVhbF92b2NvZGVyX2FnZW50IGltcG9ydCAoCiAgICBEdWFsVm9jb2RlckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnNpbGVyb192YWQgaW1wb3J0IFNpbGVyb1ZBREFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnVuaXR5X3BpcGVsaW5lIGltcG9ydCAoCiAgICBVbml0WUFnZW50UGlwZWxpbmUsCiAgICBVbml0WUFnZW50VHJlZVBpcGVsaW5lLAopCgoKY2xhc3MgU2VhbWxlc3NTMlNUQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50LAogICAgICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudCwKICAgICAgICBQcmV0c3NlbFZvY29kZXJBZ2VudCwKICAgIF0KCgpjbGFzcyBTZWFtbGVzc1MyU1RKb2ludFZBREFnZW50KFVuaXRZQWdlbnRUcmVlUGlwZWxpbmUpOgogICAgcGlwZWxpbmUgPSB7CiAgICAgICAgU2lsZXJvVkFEQWdlbnQ6IFtPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnRdLAogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudDogW09mZmxpbmVXYXYyVmVjQmVydEVuY29kZXJBZ2VudF0sCiAgICAgICAgT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50OiBbVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50XSwKICAgICAgICBVbml0WU1NQVRleHREZWNvZGVyQWdlbnQ6IFtVbml0WURldG9rZW5pemVyQWdlbnQsIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudF0sCiAgICAgICAgVW5pdFlEZXRva2VuaXplckFnZW50OiBbXSwKICAgICAgICBOQVJVbml0WVVuaXREZWNvZGVyQWdlbnQ6IFtQcmV0c3NlbFZvY29kZXJBZ2VudF0sCiAgICAgICAgUHJldHNzZWxWb2NvZGVyQWdlbnQ6IFtdLAogICAgfQoKCmNsYXNzIFNlYW1sZXNzUzJTVER1YWxWb2NvZGVyVkFEQWdlbnQoVW5pdFlBZ2VudFRyZWVQaXBlbGluZSk6CiAgICBwaXBlbGluZSA9IHsKICAgICAgICBTaWxlcm9WQURBZ2VudDogW09ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudF0sCiAgICAgICAgT25saW5lRmVhdHVyZUV4dHJhY3RvckFnZW50OiBbT2ZmbGluZVdhdjJWZWNCZXJ0RW5jb2RlckFnZW50XSwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQ6IFtVbml0WU1NQVRleHREZWNvZGVyQWdlbnRdLAogICAgICAgIFVuaXRZTU1BVGV4dERlY29kZXJBZ2VudDogW1VuaXRZRGV0b2tlbml6ZXJBZ2VudCwgTkFSVW5pdFlVbml0RGVjb2RlckFnZW50XSwKICAgICAgICBVbml0WURldG9rZW5pemVyQWdlbnQ6IFtdLAogICAgICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudDogW0R1YWxWb2NvZGVyQWdlbnRdLAogICAgICAgIER1YWxWb2NvZGVyQWdlbnQ6IFtdLAogICAgfQo='),
    ('seamless/build/lib/seamless_communication/streaming/agents/dual_vocoder_agent.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKaW1wb3J0IGNvcHkKCmltcG9ydCBsb2dnaW5nCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueQoKZnJvbSBzaW11bGV2YWwuYWdlbnRzIGltcG9ydCBUZXh0VG9TcGVlY2hBZ2VudApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5jb21tb24gaW1wb3J0IEFnZW50U3RhdGVzCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNlZ21lbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IEFjdGlvbgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMucHJldHNzZWxfdm9jb2RlciBpbXBvcnQgKAogICAgUHJldHNzZWxWb2NvZGVyQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMub25saW5lX3ZvY29kZXIgaW1wb3J0IFZvY29kZXJBZ2VudAoKbG9nZ2luZy5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dpbmcuSU5GTywKICAgIGZvcm1hdD0iJShhc2N0aW1lKXMgJShsZXZlbG5hbWUpcyAtLSAlKG5hbWUpczogJShtZXNzYWdlKXMiLAopCgpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpjbGFzcyBEdWFsVm9jb2RlclN0YXRlcyhBZ2VudFN0YXRlcyk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwgdm9jb2Rlcl9zdGF0ZXM6IEFnZW50U3RhdGVzLCBleHByX3ZvY29kZXJfc3RhdGVzOiBBZ2VudFN0YXRlcwogICAgKSAtPiBOb25lOgogICAgICAgIHNlbGYudm9jb2Rlcl9zdGF0ZXMgPSB2b2NvZGVyX3N0YXRlcwogICAgICAgIHNlbGYuZXhwcl92b2NvZGVyX3N0YXRlcyA9IGV4cHJfdm9jb2Rlcl9zdGF0ZXMKICAgICAgICBzZWxmLmNvbmZpZzogRGljdFtzdHIsIEFueV0gPSB7fQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIHRhcmdldF9maW5pc2hlZChzZWxmKTogICMgdHlwZTogaWdub3JlCiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgc2VsZi52b2NvZGVyX3N0YXRlcy50YXJnZXRfZmluaXNoZWQKICAgICAgICAgICAgb3Igc2VsZi5leHByX3ZvY29kZXJfc3RhdGVzLnRhcmdldF9maW5pc2hlZAogICAgICAgICkKCiAgICBkZWYgcmVzZXQoc2VsZikgLT4gTm9uZToKICAgICAgICBzZWxmLnZvY29kZXJfc3RhdGVzLnJlc2V0KCkKICAgICAgICBzZWxmLmV4cHJfdm9jb2Rlcl9zdGF0ZXMucmVzZXQoKQogICAgICAgIHNlbGYuY29uZmlnID0ge30KCiAgICBkZWYgdXBkYXRlX3NvdXJjZShzZWxmLCBzZWdtZW50OiBTZWdtZW50KSAtPiBOb25lOgogICAgICAgIHNlbGYudm9jb2Rlcl9zdGF0ZXMudXBkYXRlX2NvbmZpZyhzZWdtZW50LmNvbmZpZykKICAgICAgICBzZWxmLnZvY29kZXJfc3RhdGVzLnVwZGF0ZV9zb3VyY2Uoc2VnbWVudCkKICAgICAgICBzZWxmLmV4cHJfdm9jb2Rlcl9zdGF0ZXMudXBkYXRlX2NvbmZpZyhzZWdtZW50LmNvbmZpZykKICAgICAgICBzZWxmLmV4cHJfdm9jb2Rlcl9zdGF0ZXMudXBkYXRlX3NvdXJjZShzZWdtZW50KQoKICAgIGRlZiB1cGRhdGVfdGFyZ2V0KHNlbGYsIHNlZ21lbnQ6IFNlZ21lbnQpIC0+IE5vbmU6CiAgICAgICAgc2VsZi52b2NvZGVyX3N0YXRlcy51cGRhdGVfdGFyZ2V0KHNlZ21lbnQpCiAgICAgICAgc2VsZi5leHByX3ZvY29kZXJfc3RhdGVzLnVwZGF0ZV90YXJnZXQoc2VnbWVudCkKCgpjbGFzcyBEdWFsVm9jb2RlckFnZW50KFRleHRUb1NwZWVjaEFnZW50KTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBhcmdzOiBOYW1lc3BhY2UsCiAgICAgICAgdm9jb2RlcjogVm9jb2RlckFnZW50LAogICAgICAgIGV4cHJfdm9jb2RlcjogUHJldHNzZWxWb2NvZGVyQWdlbnQsCiAgICApIC0+IE5vbmU6CiAgICAgICAgc2VsZi52b2NvZGVyID0gdm9jb2RlcgogICAgICAgIHNlbGYuZXhwcl92b2NvZGVyID0gZXhwcl92b2NvZGVyCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhhcmdzKQogICAgICAgIHNlbGYuZXhwcmVzc2l2ZSA9IGFyZ3MuZXhwcmVzc2l2ZQoKICAgIGRlZiBidWlsZF9zdGF0ZXMoc2VsZikgLT4gRHVhbFZvY29kZXJTdGF0ZXM6CiAgICAgICAgcmV0dXJuIER1YWxWb2NvZGVyU3RhdGVzKAogICAgICAgICAgICBzZWxmLnZvY29kZXIuYnVpbGRfc3RhdGVzKCksIHNlbGYuZXhwcl92b2NvZGVyLmJ1aWxkX3N0YXRlcygpCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGFkZF9hcmdzKGNscywgcGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBQcmV0c3NlbFZvY29kZXJBZ2VudC5hZGRfYXJncyhwYXJzZXIpCiAgICAgICAgVm9jb2RlckFnZW50LmFkZF9hcmdzKHBhcnNlcikKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1leHByLXZvY29kZXItbmFtZSIsCiAgICAgICAgICAgIHR5cGU9c3RyLAogICAgICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgICAgICAgICBoZWxwPSJleHByZXNzaXZlIHZvY29kZXIgbmFtZSAtIHZvY29kZXJfcHJldHNzZWwgb3Igdm9jb2Rlcl9wcmV0c3NlbF8xNmtoeiIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLWV4cHJlc3NpdmUiLAogICAgICAgICAgICBhY3Rpb249InN0b3JlX3RydWUiLAogICAgICAgICAgICBoZWxwPSJXaGV0aGVyIHRvIHVzZSBleHByZXNzaXZlIHZvY29kZXIgKG92ZXJyaWRhYmxlIGluIHNlZ21lbnQuY29uZmlnKSIsCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21fYXJncyhjbHMsIGFyZ3M6IE5hbWVzcGFjZSwgKiprd2FyZ3M6IERpY3Rbc3RyLCBBbnldKSAtPiBEdWFsVm9jb2RlckFnZW50OgogICAgICAgIHZvY29kZXIgPSBWb2NvZGVyQWdlbnQuZnJvbV9hcmdzKGFyZ3MpCiAgICAgICAgZXhwcl9hcmdzID0gY29weS5kZWVwY29weShhcmdzKQogICAgICAgIGV4cHJfYXJncy52b2NvZGVyX25hbWUgPSBhcmdzLmV4cHJfdm9jb2Rlcl9uYW1lCiAgICAgICAgZXhwcl92b2NvZGVyID0gUHJldHNzZWxWb2NvZGVyQWdlbnQuZnJvbV9hcmdzKGV4cHJfYXJncykKICAgICAgICByZXR1cm4gY2xzKGFyZ3MsIHZvY29kZXIsIGV4cHJfdm9jb2RlcikKCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogQWdlbnRTdGF0ZXMpIC0+IEFjdGlvbjoKICAgICAgICBleHByZXNzaXZlID0gc2VsZi5leHByZXNzaXZlCiAgICAgICAgaWYgc3RhdGVzLmNvbmZpZyBpcyBub3QgTm9uZSBhbmQgImV4cHJlc3NpdmUiIGluIHN0YXRlcy5jb25maWc6CiAgICAgICAgICAgIGV4cHJlc3NpdmUgPSBzdGF0ZXMuY29uZmlnWyJleHByZXNzaXZlIl0KICAgICAgICBpZiBleHByZXNzaXZlOgogICAgICAgICAgICBzdGF0ZXMuZXhwcl92b2NvZGVyX3N0YXRlcy51cHN0cmVhbV9zdGF0ZXMgPSBzdGF0ZXMudXBzdHJlYW1fc3RhdGVzCiAgICAgICAgICAgIGFjdGlvbiA9IHNlbGYuZXhwcl92b2NvZGVyLnBvbGljeShzdGF0ZXMuZXhwcl92b2NvZGVyX3N0YXRlcykKICAgICAgICAgICAgaWYgbGVuKHN0YXRlcy5leHByX3ZvY29kZXJfc3RhdGVzLnNvdXJjZSkgPT0gMDoKICAgICAgICAgICAgICAgIHN0YXRlcy52b2NvZGVyX3N0YXRlcy5zb3VyY2UgPSBbXQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGFjdGlvbiA9IHNlbGYudm9jb2Rlci5wb2xpY3koc3RhdGVzLnZvY29kZXJfc3RhdGVzKQogICAgICAgICAgICBpZiBsZW4oc3RhdGVzLnZvY29kZXJfc3RhdGVzLnNvdXJjZSkgPT0gMDoKICAgICAgICAgICAgICAgIHN0YXRlcy5leHByX3ZvY29kZXJfc3RhdGVzLnNvdXJjZSA9IFtdCiAgICAgICAgcmV0dXJuIGFjdGlvbgo='),
    ('seamless/build/lib/seamless_communication/streaming/agents/seamless_streaming_s2st.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmRldG9rZW5pemVyIGltcG9ydCBVbml0WURldG9rZW5pemVyQWdlbnQKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMub2ZmbGluZV93MnZfYmVydF9lbmNvZGVyIGltcG9ydCAoCiAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMub25saW5lX2ZlYXR1cmVfZXh0cmFjdG9yIGltcG9ydCAoCiAgICBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMub25saW5lX3RleHRfZGVjb2RlciBpbXBvcnQgKAogICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLm9ubGluZV91bml0X2RlY29kZXIgaW1wb3J0ICgKICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5vbmxpbmVfdm9jb2RlciBpbXBvcnQgVm9jb2RlckFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnNpbGVyb192YWQgaW1wb3J0IFNpbGVyb1ZBREFnZW50CmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLnVuaXR5X3BpcGVsaW5lIGltcG9ydCAoCiAgICBVbml0WUFnZW50UGlwZWxpbmUsCiAgICBVbml0WUFnZW50VHJlZVBpcGVsaW5lLAopCgoKY2xhc3MgU2VhbWxlc3NTdHJlYW1pbmdTMlNUQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50LAogICAgICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudCwKICAgICAgICBWb2NvZGVyQWdlbnQsCiAgICBdCgoKY2xhc3MgU2VhbWxlc3NTdHJlYW1pbmdTMlNUVkFEQWdlbnQoVW5pdFlBZ2VudFBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gWwogICAgICAgIFNpbGVyb1ZBREFnZW50LAogICAgICAgIE9ubGluZUZlYXR1cmVFeHRyYWN0b3JBZ2VudCwKICAgICAgICBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQsCiAgICAgICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50LAogICAgICAgIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudCwKICAgICAgICBWb2NvZGVyQWdlbnQsCiAgICBdCgoKY2xhc3MgU2VhbWxlc3NTdHJlYW1pbmdTMlNUSm9pbnRWQURBZ2VudChVbml0WUFnZW50VHJlZVBpcGVsaW5lKToKICAgIHBpcGVsaW5lID0gewogICAgICAgIFNpbGVyb1ZBREFnZW50OiBbT25saW5lRmVhdHVyZUV4dHJhY3RvckFnZW50XSwKICAgICAgICBPbmxpbmVGZWF0dXJlRXh0cmFjdG9yQWdlbnQ6IFtPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnRdLAogICAgICAgIE9mZmxpbmVXYXYyVmVjQmVydEVuY29kZXJBZ2VudDogW1VuaXRZTU1BVGV4dERlY29kZXJBZ2VudF0sCiAgICAgICAgVW5pdFlNTUFUZXh0RGVjb2RlckFnZW50OiBbVW5pdFlEZXRva2VuaXplckFnZW50LCBOQVJVbml0WVVuaXREZWNvZGVyQWdlbnRdLAogICAgICAgIFVuaXRZRGV0b2tlbml6ZXJBZ2VudDogW10sCiAgICAgICAgTkFSVW5pdFlVbml0RGVjb2RlckFnZW50OiBbVm9jb2RlckFnZW50XSwKICAgICAgICBWb2NvZGVyQWdlbnQ6IFtdLAogICAgfQo='),
    ('seamless/build/lib/seamless_communication/streaming/agents/online_vocoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBsb2dnaW5nCmZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyLCBOYW1lc3BhY2UKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdAoKaW1wb3J0IHRvcmNoCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci5sb2FkZXIgaW1wb3J0IGxvYWRfdm9jb2Rlcl9tb2RlbApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5jb21tb24gaW1wb3J0IEFnZW50U3RhdGVzCmZyb20gc2ltdWxldmFsLmFnZW50cyBpbXBvcnQgVGV4dFRvU3BlZWNoQWdlbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IFJlYWRBY3Rpb24sIFdyaXRlQWN0aW9uCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNwZWVjaFNlZ21lbnQKCmxvZ2dpbmcuYmFzaWNDb25maWcoCiAgICBsZXZlbD1sb2dnaW5nLklORk8sCiAgICBmb3JtYXQ9IiUoYXNjdGltZSlzICUobGV2ZWxuYW1lKXMgLS0gJShuYW1lKXM6ICUobWVzc2FnZSlzIiwKKQoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoX19uYW1lX18pCgoKY2xhc3MgVm9jb2RlckFnZW50KFRleHRUb1NwZWVjaEFnZW50KTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgX19pbml0X18oc2VsZiwgYXJnczogTmFtZXNwYWNlKSAtPiBOb25lOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oYXJncykKCiAgICAgICAgbG9nZ2VyLmluZm8oCiAgICAgICAgICAgIGYiTG9hZGluZyB0aGUgVm9jb2RlciBtb2RlbDoge2FyZ3Mudm9jb2Rlcl9uYW1lfSBvbiBkZXZpY2U9e2FyZ3MuZGV2aWNlfSwgZHR5cGU9e2FyZ3MuZHR5cGV9IgogICAgICAgICkKICAgICAgICBzZWxmLnZvY29kZXIgPSBsb2FkX3ZvY29kZXJfbW9kZWwoCiAgICAgICAgICAgIGFyZ3Mudm9jb2Rlcl9uYW1lLCBkZXZpY2U9YXJncy5kZXZpY2UsIGR0eXBlPWFyZ3MuZHR5cGUKICAgICAgICApCiAgICAgICAgc2VsZi52b2NvZGVyLmV2YWwoKQoKICAgICAgICBzZWxmLnNhbXBsZV9yYXRlID0gYXJncy5zYW1wbGVfcmF0ZQogICAgICAgIHNlbGYudGd0X2xhbmcgPSBhcmdzLnRndF9sYW5nCiAgICAgICAgc2VsZi5zcGVha2VyX2lkID0gYXJncy52b2NvZGVyX3NwZWFrZXJfaWQKCiAgICBAdG9yY2guaW5mZXJlbmNlX21vZGUoKQogICAgZGVmIHBvbGljeShzZWxmLCBzdGF0ZXM6IEFnZW50U3RhdGVzKSAtPiBXcml0ZUFjdGlvbjoKICAgICAgICAiIiIKICAgICAgICBUaGUgcG9saWN5IGlzIGFsd2F5cyB3cml0ZSBpZiB0aGVyZSBhcmUgdW5pdHMKICAgICAgICAiIiIKICAgICAgICB1bml0cyA9IHN0YXRlcy5zb3VyY2UKCiAgICAgICAgaWYgbGVuKHVuaXRzKSA9PSAwIG9yIGxlbih1bml0c1swXSkgPT0gMDoKICAgICAgICAgICAgaWYgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbihbXSwgZmluaXNoZWQ9VHJ1ZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKCiAgICAgICAgdGd0X2xhbmcgPSBzdGF0ZXMudGd0X2xhbmcgaWYgc3RhdGVzLnRndF9sYW5nIGVsc2Ugc2VsZi50Z3RfbGFuZwogICAgICAgIHUgPSB1bml0c1swXVswXQoKICAgICAgICB3YXYgPSBzZWxmLnZvY29kZXIodSwgdGd0X2xhbmcsIHNlbGYuc3BlYWtlcl9pZCwgZHVyX3ByZWRpY3Rpb249RmFsc2UpCiAgICAgICAgc3RhdGVzLnNvdXJjZSA9IFtdCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigKICAgICAgICAgICAgU3BlZWNoU2VnbWVudCgKICAgICAgICAgICAgICAgIGNvbnRlbnQ9d2F2WzBdWzBdLnRvbGlzdCgpLAogICAgICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICAgICAgICAgIHNhbXBsZV9yYXRlPXNlbGYuc2FtcGxlX3JhdGUsCiAgICAgICAgICAgICAgICB0Z3RfbGFuZz10Z3RfbGFuZywKICAgICAgICAgICAgKSwKICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgYWRkX2FyZ3MoY2xzLCBwYXJzZXI6IEFyZ3VtZW50UGFyc2VyKSAtPiBOb25lOgogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXZvY29kZXItbmFtZSIsCiAgICAgICAgICAgIHR5cGU9c3RyLAogICAgICAgICAgICBoZWxwPSJWb2NvZGVyIG5hbWUuIiwKICAgICAgICAgICAgZGVmYXVsdD0idm9jb2Rlcl92MiIsCiAgICAgICAgKQogICAgICAgIHBhcnNlci5hZGRfYXJndW1lbnQoCiAgICAgICAgICAgICItLXZvY29kZXItc3BlYWtlci1pZCIsCiAgICAgICAgICAgIHR5cGU9aW50LAogICAgICAgICAgICByZXF1aXJlZD1GYWxzZSwKICAgICAgICAgICAgZGVmYXVsdD0tMSwKICAgICAgICAgICAgaGVscD0iVm9jb2RlciBzcGVha2VyIGlkIiwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9hcmdzKGNscywgYXJnczogTmFtZXNwYWNlLCAqKmt3YXJnczogRGljdFtzdHIsIEFueV0pIC0+IFZvY29kZXJBZ2VudDoKICAgICAgICByZXR1cm4gY2xzKGFyZ3MpCg=='),
    ('seamless/build/lib/seamless_communication/streaming/agents/offline_w2v_bert_encoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIsIE5hbWVzcGFjZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0CgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5kYXRhIGltcG9ydCBTZXF1ZW5jZURhdGEKZnJvbSBmYWlyc2VxMi5kYXRhLmRhdGFfcGlwZWxpbmUgaW1wb3J0IENvbGxhdGVyCmZyb20gZmFpcnNlcTIuZGF0YS50ZXh0IGltcG9ydCBUZXh0VG9rZW5pemVyCmZyb20gZmFpcnNlcTIubW9kZWxzLndhdjJ2ZWMyIGltcG9ydCBXYXYyVmVjMkVuY29kZXJDb25maWcKZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBnZXRfc2Vxc19hbmRfcGFkZGluZ19tYXNrCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubW9kZWwgaW1wb3J0IFVuaXRZTW9kZWwKZnJvbSBzaW11bGV2YWwuYWdlbnRzIGltcG9ydCBTcGVlY2hUb1NwZWVjaEFnZW50CmZyb20gc2ltdWxldmFsLmFnZW50cy5hY3Rpb25zIGltcG9ydCBBY3Rpb24sIFJlYWRBY3Rpb24sIFdyaXRlQWN0aW9uCmZyb20gc2ltdWxldmFsLmRhdGEuc2VnbWVudHMgaW1wb3J0IFNwZWVjaFNlZ21lbnQKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnN0cmVhbWluZy5hZ2VudHMuY29tbW9uIGltcG9ydCAoCiAgICBBZ2VudFN0YXRlcywKICAgIE5vVXBkYXRlVGFyZ2V0TWl4aW4sCikKCgpjbGFzcyBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQoTm9VcGRhdGVUYXJnZXRNaXhpbiwgU3BlZWNoVG9TcGVlY2hBZ2VudCk6ICAjIHR5cGU6IGlnbm9yZQogICAgIiIiCiAgICBJbmNyZW1lbnRhbCBlbmNvZGluZyBvZiBhbiB3YXYydmVjIGVuY29kZXIgb3V0cHV0CiAgICBJdCB1cGRhdGUgdGhlIHdob2xlIGVuY29kZXIgc3RhdGVzIGV2ZXJ5IHRpbWUgd2hlbiB0aGVyZSBpcyBhIG5ldyBpbmNvbWluZyBzZWdtZW50LgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgdW5pdHlfbW9kZWw6IFVuaXRZTW9kZWwsCiAgICAgICAgdzJ2Ml9lbmNvZGVyX2NvbmZpZzogV2F2MlZlYzJFbmNvZGVyQ29uZmlnLAogICAgICAgIHRleHRfdG9rZW5pemVyOiBUZXh0VG9rZW5pemVyLAogICAgICAgIGFyZ3M6IE5hbWVzcGFjZSwKICAgICkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGFyZ3MpCiAgICAgICAgc2VsZi5tb2RlbCA9IHVuaXR5X21vZGVsCiAgICAgICAgc2VsZi53MnYyX2VuY29kZXJfY29uZmlnID0gdzJ2Ml9lbmNvZGVyX2NvbmZpZwogICAgICAgIHNlbGYuY29sbGF0ZSA9IENvbGxhdGVyKAogICAgICAgICAgICBwYWRfdmFsdWU9dGV4dF90b2tlbml6ZXIudm9jYWJfaW5mby5wYWRfaWR4LCBwYWRfdG9fbXVsdGlwbGU9MgogICAgICAgICkKICAgICAgICBzZWxmLmRldmljZSA9IGFyZ3MuZGV2aWNlCiAgICAgICAgc2VsZi5kdHlwZSA9IGFyZ3MuZHR5cGUKICAgICAgICBzZWxmLm1pbl9zdGFydGluZ193YWl0ID0gYXJncy5taW5fc3RhcnRpbmdfd2FpdF93MnZiZXJ0CgogICAgQHByb3BlcnR5CiAgICBkZWYgbWluX2lucHV0X2xlbmd0aChzZWxmKSAtPiBpbnQ6CiAgICAgICAgcmV0dXJuIHNlbGYudzJ2Ml9lbmNvZGVyX2NvbmZpZy5mYmFua19zdHJpZGUKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgYWRkX2FyZ3MocGFyc2VyOiBBcmd1bWVudFBhcnNlcikgLT4gTm9uZToKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1taW4tc3RhcnRpbmctd2FpdC13MnZiZXJ0IiwKICAgICAgICAgICAgZGVmYXVsdD1Ob25lLAogICAgICAgICAgICB0eXBlPWludCwKICAgICAgICAgICAgaGVscD0iTWluIHN0YXJ0aW5nIHdhaXQgaW4gdzJ2YmVydCIsCiAgICAgICAgKQoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogQWdlbnRTdGF0ZXMpIC0+IEFjdGlvbjoKICAgICAgICAiIiIKICAgICAgICBUaGUgcG9saWN5IGZvciBlbmNvZGVyIGlzIGFsd2F5cyB3cml0ZQogICAgICAgIG9ubHkgaWYgdGhlIGlucHV0IGlzIHRvbyBzaG9ydAogICAgICAgICIiIgogICAgICAgIGlmICgKICAgICAgICAgICAgc2VsZi5taW5fc3RhcnRpbmdfd2FpdCBpcyBub3QgTm9uZQogICAgICAgICAgICBhbmQgbGVuKHN0YXRlcy5zb3VyY2UpIDwgc2VsZi5taW5fc3RhcnRpbmdfd2FpdAogICAgICAgICAgICBhbmQgbm90IHN0YXRlcy5zb3VyY2VfZmluaXNoZWQKICAgICAgICApOgogICAgICAgICAgICByZXR1cm4gUmVhZEFjdGlvbigpCgogICAgICAgIGlmIGxlbihzdGF0ZXMuc291cmNlKSA8IHNlbGYubWluX2lucHV0X2xlbmd0aDoKICAgICAgICAgICAgaWYgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbih7fSwgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKCiAgICAgICAgaW5wdXRzID0gdG9yY2guc3RhY2soc3RhdGVzLnNvdXJjZSkudG8oZGV2aWNlPXNlbGYuZGV2aWNlLCBkdHlwZT1zZWxmLmR0eXBlKQogICAgICAgIHNyYzogU2VxdWVuY2VEYXRhID0gc2VsZi5jb2xsYXRlKGlucHV0cykKCiAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrID0gZ2V0X3NlcXNfYW5kX3BhZGRpbmdfbWFzayhzcmMpCiAgICAgICAgZW5jb2Rlcl9vdXRwdXQsIF8gPSBzZWxmLm1vZGVsLmVuY29kZV9zcGVlY2goCiAgICAgICAgICAgIHNlcXMsCiAgICAgICAgICAgIHBhZGRpbmdfbWFzaywKICAgICAgICApCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigKICAgICAgICAgICAgU3BlZWNoU2VnbWVudCgKICAgICAgICAgICAgICAgIGNvbnRlbnQ9ZW5jb2Rlcl9vdXRwdXQsCiAgICAgICAgICAgICAgICB0Z3RfbGFuZz1zdGF0ZXMudGd0X2xhbmcsCiAgICAgICAgICAgICAgICBmaW5pc2hlZD1zdGF0ZXMuc291cmNlX2ZpbmlzaGVkLAogICAgICAgICAgICApLAogICAgICAgICAgICBmaW5pc2hlZD1zdGF0ZXMuc291cmNlX2ZpbmlzaGVkLAogICAgICAgICkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX2FyZ3MoCiAgICAgICAgY2xzLCBhcmdzOiBOYW1lc3BhY2UsICoqa3dhcmdzOiBEaWN0W3N0ciwgQW55XQogICAgKSAtPiBPZmZsaW5lV2F2MlZlY0JlcnRFbmNvZGVyQWdlbnQ6CiAgICAgICAgdW5pdHlfbW9kZWwgPSBrd2FyZ3MuZ2V0KCJ1bml0eV9tb2RlbCIsIE5vbmUpCiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2UodW5pdHlfbW9kZWwsIFVuaXRZTW9kZWwpCiAgICAgICAgdW5pdHlfY29uZmlnID0ga3dhcmdzLmdldCgidW5pdHlfY29uZmlnIiwgTm9uZSkKICAgICAgICBhc3NlcnQgdW5pdHlfY29uZmlnIGlzIG5vdCBOb25lCiAgICAgICAgdGV4dF90b2tlbml6ZXIgPSBrd2FyZ3MuZ2V0KCJ0ZXh0X3Rva2VuaXplciIsIE5vbmUpCiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2UodGV4dF90b2tlbml6ZXIsIFRleHRUb2tlbml6ZXIpCiAgICAgICAgcmV0dXJuIGNscyh1bml0eV9tb2RlbCwgdW5pdHlfY29uZmlnLncydjJfZW5jb2Rlcl9jb25maWcsIHRleHRfdG9rZW5pemVyLCBhcmdzKQo='),
    ('seamless/build/lib/seamless_communication/streaming/agents/common.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCiIiIgpNaXhpbnMgKyBjb21tb24gZm9yIGZhaXJzZXEyIHNpbXVsZXZhbCBhZ2VudHMKIiIiCgpmcm9tIHNpbXVsZXZhbC5kYXRhLnNlZ21lbnRzIGltcG9ydCBTZWdtZW50CmZyb20gc2ltdWxldmFsLmFnZW50cy5zdGF0ZXMgaW1wb3J0IEFnZW50U3RhdGVzIGFzIEFnZW50U3RhdGVzT3JpZwoKCmNsYXNzIEVhcmx5U3RvcHBpbmdNaXhpbjoKICAgIGRlZiByZXNldF9lYXJseShzZWxmKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIEltcGxlbWVudCB0byBvdmVycmlkZSBmb3IgZGlmZmVyZW50IGJlaGF2aW9yIG9uIGEgcmVzZXQgdGhhdAogICAgICAgIGhhcHBlbnMgYmVmb3JlIEVPUwogICAgICAgICIiIgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoKQoKCmNsYXNzIEFnZW50U3RhdGVzKEFnZW50U3RhdGVzT3JpZyk6ICAjIHR5cGU6IGlnbm9yZQogICAgZGVmIHVwZGF0ZV90YXJnZXQoc2VsZiwgc2VnbWVudDogU2VnbWVudCkgLT4gTm9uZToKICAgICAgICAiIiJBbiBBZ2VudFN0YXRlcyBpbXBsIHdoaWNoIGRvZXNuJ3QgdXBkYXRlIHN0YXRlcy50YXJnZXQiIiIKICAgICAgICBzZWxmLnRhcmdldF9maW5pc2hlZCA9IHNlZ21lbnQuZmluaXNoZWQKCgpjbGFzcyBOb1VwZGF0ZVRhcmdldE1peGluOgogICAgIiIiQSBzaG9ydGN1dCB0byBtYWtlIGFnZW50cyBkZWZhdWx0IHRvIHRoZSBBZ2VudFN0YXRlcyBpbXBsIGFib3ZlIiIiCgogICAgZGVmIGJ1aWxkX3N0YXRlcyhzZWxmKSAtPiBBZ2VudFN0YXRlczoKICAgICAgICByZXR1cm4gQWdlbnRTdGF0ZXMoKQo='),
    ('seamless/build/lib/seamless_communication/streaming/agents/unity_pipeline.py', ''),
    ('seamless/build/lib/seamless_communication/streaming/agents/online_unit_decoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIsIE5hbWVzcGFjZQpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBMaXN0LCBPcHRpb25hbAoKaW1wb3J0IHRvcmNoCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubW9kZWwgaW1wb3J0IFVuaXRZTW9kZWwsIFVuaXRZTkFSVDJVTW9kZWwKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS51bml0X3Rva2VuaXplciBpbXBvcnQgVW5pdFRva2VuaXplcgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uc3RyZWFtaW5nLmFnZW50cy5vbmxpbmVfdGV4dF9kZWNvZGVyIGltcG9ydCAoCiAgICBVbml0WVRleHREZWNvZGVyT3V0cHV0LAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5zdHJlYW1pbmcuYWdlbnRzLmNvbW1vbiBpbXBvcnQgQWdlbnRTdGF0ZXMKZnJvbSBzaW11bGV2YWwuYWdlbnRzIGltcG9ydCBHZW5lcmljQWdlbnQKZnJvbSBzaW11bGV2YWwuYWdlbnRzLmFjdGlvbnMgaW1wb3J0IEFjdGlvbiwgUmVhZEFjdGlvbiwgV3JpdGVBY3Rpb24KZnJvbSBzaW11bGV2YWwuZGF0YS5zZWdtZW50cyBpbXBvcnQgU2VnbWVudCwgVGV4dFNlZ21lbnQKCgpjbGFzcyBOQVJVbml0RGVjb2RlckFnZW50U3RhdGVzKEFnZW50U3RhdGVzKTogICMgdHlwZTogaWdub3JlCiAgICBkZWYgcmVzZXQoc2VsZikgLT4gTm9uZToKICAgICAgICBzZWxmLnNvdXJjZV90b2tlbl9saXN0OiBMaXN0W3N0cl0gPSBbXQogICAgICAgIHNlbGYuc291cmNlX2luZGljZXM6IE9wdGlvbmFsW3RvcmNoLlRlbnNvcl0gPSBOb25lCiAgICAgICAgc2VsZi5kdXJhdGlvbl9zdGFydF9pbmRleDogaW50ID0gMAogICAgICAgIHNlbGYudGd0X2xhbmcgPSBOb25lCiAgICAgICAgc3VwZXIoKS5yZXNldCgpCgogICAgZGVmIHVwZGF0ZV9zb3VyY2Uoc2VsZiwgc2VnbWVudDogU2VnbWVudCkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBVcGRhdGUgc3RhdGVzIGZyb20gaW5wdXQgc2VnbWVudAogICAgICAgIEFkZGl0aW9ubGx5IHVwZGF0ZSBpbmNyZW1lbnRhbCBzdGF0ZXMKCiAgICAgICAgQXJnczoKICAgICAgICAgICAgc2VnbWVudCAofnNpbXVsZXZhbC5hZ2VudHMuc2VnbWVudHMuU2VnbWVudCk6IGlucHV0IHNlZ21lbnQKICAgICAgICAiIiIKICAgICAgICBzZWxmLnNvdXJjZV9maW5pc2hlZCA9IHNlZ21lbnQuZmluaXNoZWQKICAgICAgICBpZiBzZWxmLnRndF9sYW5nIGlzIE5vbmUgYW5kIHNlZ21lbnQudGd0X2xhbmcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYudGd0X2xhbmcgPSBzZWdtZW50LnRndF9sYW5nCiAgICAgICAgaWYgc2VnbWVudC5pc19lbXB0eToKICAgICAgICAgICAgaWYgc2VnbWVudC5maW5pc2hlZDoKICAgICAgICAgICAgICAgIHNlbGYudGFyZ2V0X2ZpbmlzaGVkID0gVHJ1ZQogICAgICAgICAgICByZXR1cm4KICAgICAgICBzZWdtZW50X2NvbnRlbnQ6IFVuaXRZVGV4dERlY29kZXJPdXRwdXQgPSBzZWdtZW50LmNvbnRlbnQKICAgICAgICBjb250ZW50ID0gc2VnbWVudF9jb250ZW50LmRlY29kZXJfZmVhdHVyZXMKICAgICAgICB0b2tlbiA9IHNlZ21lbnRfY29udGVudC50b2tlbnMKICAgICAgICBzZWxmLnNvdXJjZV9pbmRpY2VzID0gc2VnbWVudF9jb250ZW50LnRhcmdldF9pbmRpY2VzCiAgICAgICAgc2VsZi5zb3VyY2VfdG9rZW5fbGlzdCArPSB0b2tlbgogICAgICAgIHNlbGYuc291cmNlID0gY29udGVudAoKCmNsYXNzIE5BUlVuaXRZVW5pdERlY29kZXJBZ2VudChHZW5lcmljQWdlbnQpOiAgIyB0eXBlOiBpZ25vcmUKICAgICIiIk5vbi1hdXRvcmVncmVzc2l2ZSB1bml0IGRlY29kZXIiIiIKCiAgICBzb3VyY2VfdHlwZSA9ICJ0ZXh0IgogICAgdGFyZ2V0X3R5cGUgPSAidGV4dCIKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwgbW9kZWw6IFVuaXRZTkFSVDJVTW9kZWwsIHRva2VuaXplcjogVW5pdFRva2VuaXplciwgYXJnczogTmFtZXNwYWNlCiAgICApIC0+IE5vbmU6CiAgICAgICAgc2VsZi5tb2RlbCA9IG1vZGVsCiAgICAgICAgc2VsZi50b2tlbml6ZXIgPSB0b2tlbml6ZXIKICAgICAgICBzZWxmLm1pbl91bml0X2NodW5rX3NpemUgPSBhcmdzLm1pbl91bml0X2NodW5rX3NpemUKICAgICAgICBzZWxmLmRfZmFjdG9yID0gYXJncy5kX2ZhY3RvcgogICAgICAgIHNlbGYuZGV2aWNlID0gYXJncy5kZXZpY2UKICAgICAgICBzZWxmLmR0eXBlID0gYXJncy5kdHlwZQogICAgICAgIHNlbGYudG9rZW5fZGVjb2RlciA9IHNlbGYudG9rZW5pemVyLmNyZWF0ZV9kZWNvZGVyKCkKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGFyZ3MpCgogICAgZGVmIGJ1aWxkX3N0YXRlcyhzZWxmKSAtPiBOQVJVbml0RGVjb2RlckFnZW50U3RhdGVzOgogICAgICAgIHJldHVybiBOQVJVbml0RGVjb2RlckFnZW50U3RhdGVzKCkKCiAgICBAcHJvcGVydHkKICAgIGRlZiBtYXhfbGVuKHNlbGYpIC0+IGludDoKICAgICAgICByZXR1cm4gMjAwCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGFkZF9hcmdzKHBhcnNlcjogQXJndW1lbnRQYXJzZXIpIC0+IE5vbmU6CiAgICAgICAgcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICAgICAgICAgIi0tbWluLXVuaXQtY2h1bmstc2l6ZSIsCiAgICAgICAgICAgIHR5cGU9aW50LAogICAgICAgICAgICByZXF1aXJlZD1UcnVlLAogICAgICAgICAgICBoZWxwPSJNaW5pbWFsIHVuaXRzIHRvIHByb2R1Y2UgZXZlcnkgY2h1bmsiLAogICAgICAgICkKICAgICAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICAgICAiLS1kLWZhY3RvciIsCiAgICAgICAgICAgIHR5cGU9ZmxvYXQsCiAgICAgICAgICAgIGRlZmF1bHQ9MS4wLAogICAgICAgICAgICBoZWxwPSJzY2FsaW5nIGZhY3RvciBmb3IgZHVyYXRpb24gcHJlZGljdGlvbiIsCiAgICAgICAgKQoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgcG9saWN5KHNlbGYsIHN0YXRlczogTkFSVW5pdERlY29kZXJBZ2VudFN0YXRlcykgLT4gQWN0aW9uOgogICAgICAgIGlmIHN0YXRlcy50YXJnZXRfZmluaXNoZWQ6CiAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigiIiwgZmluaXNoZWQ9VHJ1ZSkKCiAgICAgICAgaWYgbGVuKHN0YXRlcy5zb3VyY2VfdG9rZW5fbGlzdCkgPCAyOgogICAgICAgICAgICBpZiBub3Qgc3RhdGVzLnNvdXJjZV9maW5pc2hlZDoKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigiIiwgZmluaXNoZWQ9VHJ1ZSkKCiAgICAgICAgbW9kZWxfb3V0cHV0LCBfLCBkdXJhdGlvbnMgPSBzZWxmLm1vZGVsKAogICAgICAgICAgICB0ZXh0X2RlY29kZXJfb3V0cHV0PXN0YXRlcy5zb3VyY2UsCiAgICAgICAgICAgIHRleHRfZGVjb2Rlcl9wYWRkaW5nX21hc2s9Tm9uZSwKICAgICAgICAgICAgdGV4dF9zZXFzPXN0YXRlcy5zb3VyY2VfaW5kaWNlcywKICAgICAgICAgICAgZHVyYXRpb25fZmFjdG9yPXNlbGYuZF9mYWN0b3IsCiAgICAgICAgKQogICAgICAgIGR1cmF0aW9ucyA9IGR1cmF0aW9uc1swXQoKICAgICAgICBpZiBzdGF0ZXMuc291cmNlX2ZpbmlzaGVkIGFuZCBzdGF0ZXMuZHVyYXRpb25fc3RhcnRfaW5kZXggPiAwOgogICAgICAgICAgICAjIFdlIGhhdmUgdG8gY29uc2lkZXIgb25lIG1vcmUgd29yZCBmb3IgRU9TLCBiZWNhdXNlIHdlIGFwcGVuZCBhbiBFT1MgYXQgdGhlIGVuZC4KICAgICAgICAgICAgaWYgc3VtKGR1cmF0aW9uc1tzdGF0ZXMuZHVyYXRpb25fc3RhcnRfaW5kZXggOl0pID09IDA6CiAgICAgICAgICAgICAgICAjIElmIHlvdSByZWFjaCBoZXJlLCBpdCBtZWFucyB0aGF0IHRoZSBsYXN0IHNvdXJjZSB0b2tlbiBpcyBhIHNpbGVuY2UgdG9rZW4gKGUuZy4gcHVuY3R1YXRpb25zKQogICAgICAgICAgICAgICAgIyBJbiB0aGF0IGNhc2Ugbm8gbmVlZCB0byBjb25zaWRlciBvbmUgbW9yZSB0b2tlbi4KICAgICAgICAgICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigiIiwgZmluaXNoZWQ9VHJ1ZSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN0YXRlcy5kdXJhdGlvbl9zdGFydF9pbmRleCA9IG1heChzdGF0ZXMuZHVyYXRpb25fc3RhcnRfaW5kZXggLSAxLCAwKQoKICAgICAgICBjdXJyZW50X2R1cmF0aW9uID0gc3VtKGR1cmF0aW9uc1tzdGF0ZXMuZHVyYXRpb25fc3RhcnRfaW5kZXggOl0pCgogICAgICAgIGlmIGN1cnJlbnRfZHVyYXRpb24gPCBzZWxmLm1pbl91bml0X2NodW5rX3NpemU6CiAgICAgICAgICAgIGlmIG5vdCBzdGF0ZXMuc291cmNlX2ZpbmlzaGVkOgogICAgICAgICAgICAgICAgIyBpZiBjdXJyZW50IHVudHJhbnNsYXRlZCBzb3VyY2UgcmVzdWx0IGxlc3MgdGhhbiBzZWxmLm1pbl91bml0X2NodW5rX3NpemUgdW5pdHMKICAgICAgICAgICAgICAgIHJldHVybiBSZWFkQWN0aW9uKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIGN1cnJlbnRfZHVyYXRpb24gPT0gMDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gV3JpdGVBY3Rpb24oIiIsIGZpbmlzaGVkPVRydWUpCgogICAgICAgIHVuaXRfc2VxcyA9IG1vZGVsX291dHB1dC5sb2dpdHNbMF0uYXJnbWF4KGRpbT0tMSkKICAgICAgICBpbmRleF9zdGFydF9vZmZzZXQgPSBzdW0oZHVyYXRpb25zWzogc3RhdGVzLmR1cmF0aW9uX3N0YXJ0X2luZGV4XSkKICAgICAgICB1bml0X3NlcXMgPSB1bml0X3NlcXNbaW5kZXhfc3RhcnRfb2Zmc2V0Ol0udW5zcXVlZXplKDApCiAgICAgICAgdW5pdHMgPSBzZWxmLnRva2VuX2RlY29kZXIodW5pdF9zZXFzKQoKICAgICAgICAjIG1pbnVzIG9uZSBiZWNhdXNlIHdlIGFkZCBhIGVuZGluZ190b2tlbiBvbiBlYWNoIHMydCBvdXRwdXQgcGhyYXNlCiAgICAgICAgc3RhdGVzLmR1cmF0aW9uX3N0YXJ0X2luZGV4ID0gbGVuKGR1cmF0aW9ucykgLSAxCgogICAgICAgIHJldHVybiBXcml0ZUFjdGlvbigKICAgICAgICAgICAgVGV4dFNlZ21lbnQoCiAgICAgICAgICAgICAgICBjb250ZW50PXVuaXRzLAogICAgICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICAgICAgICAgIHRndF9sYW5nPXN0YXRlcy50Z3RfbGFuZywKICAgICAgICAgICAgKSwKICAgICAgICAgICAgZmluaXNoZWQ9c3RhdGVzLnNvdXJjZV9maW5pc2hlZCwKICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9hcmdzKGNscywgYXJnczogTmFtZXNwYWNlLCAqKmt3YXJnczogQW55KSAtPiBOQVJVbml0WVVuaXREZWNvZGVyQWdlbnQ6CiAgICAgICAgdW5pdHlfbW9kZWw6IFVuaXRZTW9kZWwgPSBrd2FyZ3MuZ2V0KCJ1bml0eV9tb2RlbCIsIE5vbmUpCiAgICAgICAgdW5pdF90b2tlbml6ZXI6IFVuaXRUb2tlbml6ZXIgPSBrd2FyZ3MuZ2V0KCJ1bml0X3Rva2VuaXplciIsIE5vbmUpCiAgICAgICAgYXNzZXJ0IHVuaXR5X21vZGVsLnQydV9tb2RlbCBpcyBub3QgTm9uZSBhbmQgaXNpbnN0YW5jZSgKICAgICAgICAgICAgdW5pdHlfbW9kZWwudDJ1X21vZGVsLCBVbml0WU5BUlQyVU1vZGVsCiAgICAgICAgKQogICAgICAgIHJldHVybiBjbHMobW9kZWw9dW5pdHlfbW9kZWwudDJ1X21vZGVsLCB0b2tlbml6ZXI9dW5pdF90b2tlbml6ZXIsIGFyZ3M9YXJncykK'),
    ('seamless/build/lib/seamless_communication/streaming/agents/online_text_decoder.py', ''),
    ('seamless/build/lib/seamless_communication/toxicity/etox_bad_word_checker.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBjb2RlY3MKaW1wb3J0IHJlCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aApmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgU2V0LCBVbmlvbgoKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0ICgKICAgIEFzc2V0Q2FyZCwKICAgIEFzc2V0RG93bmxvYWRNYW5hZ2VyLAogICAgQXNzZXRTdG9yZSwKICAgIGFzc2V0X3N0b3JlIGFzIGJhc2VfYXNzZXRfc3RvcmUsCiAgICBkb3dubG9hZF9tYW5hZ2VyIGFzIGJhc2VfZG93bmxvYWRfbWFuYWdlciwKKQpmcm9tIGZhaXJzZXEyLmRhdGEgaW1wb3J0IFN0cmluZ0xpa2UKZnJvbSBmYWlyc2VxMi5kYXRhLnRleHQgaW1wb3J0IFNlbnRlbmNlUGllY2VFbmNvZGVyLCBTZW50ZW5jZVBpZWNlTW9kZWwKCgpjbGFzcyBFVE9YQmFkV29yZENoZWNrZXI6CiAgICBiYWRfd29yZHM6IERpY3Rbc3RyLCBMaXN0W3N0cl1dCiAgICBiYWRfd29yZF92YXJpYW50czogRGljdFtzdHIsIERpY3Rbc3RyLCBMaXN0W3N0cl1dXQogICAgc3BfZW5jb2RlcjogU2VudGVuY2VQaWVjZUVuY29kZXIKICAgIHNwX2xhbmdzOiBTZXRbc3RyXQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGJhZF93b3JkczogRGljdFtzdHIsIExpc3Rbc3RyXV0sCiAgICAgICAgYmFkX3dvcmRfdmFyaWFudHM6IERpY3Rbc3RyLCBEaWN0W3N0ciwgTGlzdFtzdHJdXV0sCiAgICAgICAgc3BfZW5jb2RlcjogU2VudGVuY2VQaWVjZUVuY29kZXIsCiAgICAgICAgc3BfbGFuZ3M6IFNldFtzdHJdLAogICAgKToKICAgICAgICBzZWxmLmJhZF93b3JkcyA9IGJhZF93b3JkcwogICAgICAgIHNlbGYuYmFkX3dvcmRfdmFyaWFudHMgPSBiYWRfd29yZF92YXJpYW50cwogICAgICAgIHNlbGYuc3BfZW5jb2RlciA9IHNwX2VuY29kZXIKICAgICAgICBzZWxmLnNwX2xhbmdzID0gc3BfbGFuZ3MKCiAgICBkZWYgZXh0cmFjdF9iYWRfd29yZHMoCiAgICAgICAgc2VsZiwKICAgICAgICBzb3VyY2VfdGV4dDogc3RyLAogICAgICAgIHRhcmdldF90ZXh0OiBzdHIsCiAgICAgICAgc291cmNlX2xhbmc6IHN0ciwKICAgICAgICB0YXJnZXRfbGFuZzogc3RyLAogICAgKSAtPiBMaXN0W3N0cl06CiAgICAgICAgYmFkX3dvcmRzX2luX3RhcmdldF90ZXh0ID0gc2VsZi5nZXRfYmFkX3dvcmRzKAogICAgICAgICAgICB0YXJnZXRfdGV4dCwKICAgICAgICAgICAgdGFyZ2V0X2xhbmcsCiAgICAgICAgKQoKICAgICAgICAjIElmIHRoZXJlIGFyZSBubyBiYWQgd29yZHMgaW4gdGhlIHRhcmdldCB0ZXh0LCBkbyBub3RoaW5nLgogICAgICAgIGlmIGxlbihiYWRfd29yZHNfaW5fdGFyZ2V0X3RleHQpID09IDA6CiAgICAgICAgICAgIHJldHVybiBbXQoKICAgICAgICBiYWRfd29yZHNfaW5fc291cmNlX3RleHQgPSBzZWxmLmdldF9iYWRfd29yZHMoCiAgICAgICAgICAgIHNvdXJjZV90ZXh0LAogICAgICAgICAgICBzb3VyY2VfbGFuZywKICAgICAgICApCgogICAgICAgICMgSWYgdGhlcmUgYXJlIGJhZCB3b3JkcyBpbiB0aGUgc291cmNlIHRleHQsIGRvIG5vdGhpbmcuCiAgICAgICAgaWYgbGVuKGJhZF93b3Jkc19pbl9zb3VyY2VfdGV4dCkgPiAwOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgYmFkX3dvcmRzOiBMaXN0W3N0cl0gPSBbXQoKICAgICAgICBmb3Igd29yZCBpbiBiYWRfd29yZHNfaW5fdGFyZ2V0X3RleHQ6CiAgICAgICAgICAgIGJhZF93b3Jkcy5leHRlbmQoc2VsZi5iYWRfd29yZF92YXJpYW50c1t0YXJnZXRfbGFuZ11bd29yZF0pCgogICAgICAgIHJldHVybiBiYWRfd29yZHMKCiAgICBkZWYgZ2V0X2JhZF93b3JkcyhzZWxmLCB0ZXh0OiBzdHIsIGxhbmc6IHN0cikgLT4gTGlzdFtzdHJdOgogICAgICAgIHRyeToKICAgICAgICAgICAgYmFkX3dvcmRzID0gc2VsZi5iYWRfd29yZHNbbGFuZ10KICAgICAgICBleGNlcHQgS2V5RXJyb3IgYXMgZToKICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKGYiTWluVG94IG1vZGVsIGRvZXMgbm90IHN1cHBvcnQge2xhbmd9LiIpIGZyb20gZQoKICAgICAgICB0ZXh0ID0gc2VsZi5fcHJlcHJvY2Vzcyh0ZXh0KQoKICAgICAgICBpZiBsYW5nIGluIHNlbGYuc3BfbGFuZ3M6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9maW5kX2JhZF93b3Jkc19pbl9zcCh0ZXh0LCBiYWRfd29yZHMpCgogICAgICAgIHJldHVybiBzZWxmLl9maW5kX2JhZF93b3Jkcyh0ZXh0LCBiYWRfd29yZHMpCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9wcmVwcm9jZXNzKHRleHQ6IHN0cikgLT4gc3RyOgogICAgICAgIHJldHVybiByZS5zdWIociJbXFcrXSIsICIgIiwgdGV4dC5sb3dlcigpKQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfZmluZF9iYWRfd29yZHModGV4dDogc3RyLCBiYWRfd29yZHM6IExpc3Rbc3RyXSkgLT4gTGlzdFtzdHJdOgogICAgICAgIG91dHB1dDogTGlzdFtzdHJdID0gW10KCiAgICAgICAgdGV4dCA9ICIgIiArIHRleHQubG93ZXIoKSArICIgIgoKICAgICAgICBiYWRfd29yZHMgPSBbIiAiICsgd29yZC5sb3dlcigpICsgIiAiIGZvciB3b3JkIGluIGJhZF93b3Jkc10KCiAgICAgICAgZm9yIHdvcmQgaW4gYmFkX3dvcmRzOgogICAgICAgICAgICBpZiB3b3JkIGluIHRleHQ6CiAgICAgICAgICAgICAgICBvdXRwdXQuYXBwZW5kKHdvcmQpCgogICAgICAgIHJldHVybiBbd29yZC5zdHJpcCgiICIpIGZvciB3b3JkIGluIG91dHB1dF0KCiAgICBkZWYgX2ZpbmRfYmFkX3dvcmRzX2luX3NwKHNlbGYsIHRleHQ6IHN0ciwgYmFkX3dvcmRzOiBMaXN0W3N0cl0pIC0+IExpc3Rbc3RyXToKICAgICAgICB0ZXh0X3Rva2VucyA9IHNlbGYuc3BfZW5jb2Rlci5lbmNvZGVfYXNfdG9rZW5zKHRleHQubG93ZXIoKSkKCiAgICAgICAgb3V0cHV0OiBMaXN0W3N0cl0gPSBbXQoKICAgICAgICBmb3Igd29yZCBpbiBiYWRfd29yZHM6CiAgICAgICAgICAgIHdvcmRfdG9rZW5zID0gc2VsZi5zcF9lbmNvZGVyLmVuY29kZV9hc190b2tlbnMod29yZC5sb3dlcigpKQoKICAgICAgICAgICAgaWYgc2VsZi5fY29udGFpbnNfdG9rZW5zKHRleHRfdG9rZW5zLCB3b3JkX3Rva2Vucyk6CiAgICAgICAgICAgICAgICBvdXRwdXQuYXBwZW5kKHN0cih3b3JkKSkKCiAgICAgICAgcmV0dXJuIG91dHB1dAoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfY29udGFpbnNfdG9rZW5zKAogICAgICAgIHRleHRfdG9rZW5zOiBMaXN0W1N0cmluZ0xpa2VdLCB3b3JkX3Rva2VuczogTGlzdFtTdHJpbmdMaWtlXQogICAgKSAtPiBib29sOgogICAgICAgIGZvciBpIGluIHJhbmdlKGxlbih0ZXh0X3Rva2VucykgLSBsZW4od29yZF90b2tlbnMpICsgMSk6CiAgICAgICAgICAgIGZvciBqIGluIHJhbmdlKGxlbih3b3JkX3Rva2VucykpOgogICAgICAgICAgICAgICAgaWYgdGV4dF90b2tlbnNbaSArIGpdICE9IHdvcmRfdG9rZW5zW2pdOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICByZXR1cm4gRmFsc2UKCgpjbGFzcyBFVE9YQmFkV29yZENoZWNrZXJMb2FkZXI6CiAgICBhc3NldF9zdG9yZTogQXNzZXRTdG9yZQogICAgZG93bmxvYWRfbWFuYWdlcjogQXNzZXREb3dubG9hZE1hbmFnZXIKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBhc3NldF9zdG9yZTogQXNzZXRTdG9yZSwKICAgICAgICBkb3dubG9hZF9tYW5hZ2VyOiBBc3NldERvd25sb2FkTWFuYWdlciwKICAgICkgLT4gTm9uZToKICAgICAgICBzZWxmLmFzc2V0X3N0b3JlID0gYXNzZXRfc3RvcmUKICAgICAgICBzZWxmLmRvd25sb2FkX21hbmFnZXIgPSBkb3dubG9hZF9tYW5hZ2VyCgogICAgZGVmIF9fY2FsbF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgbW9kZWxfbmFtZV9vcl9jYXJkOiBVbmlvbltzdHIsIEFzc2V0Q2FyZF0sCiAgICApIC0+IEVUT1hCYWRXb3JkQ2hlY2tlcjoKICAgICAgICBpZiBpc2luc3RhbmNlKG1vZGVsX25hbWVfb3JfY2FyZCwgQXNzZXRDYXJkKToKICAgICAgICAgICAgY2FyZCA9IG1vZGVsX25hbWVfb3JfY2FyZAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNhcmQgPSBzZWxmLmFzc2V0X3N0b3JlLnJldHJpZXZlX2NhcmQobW9kZWxfbmFtZV9vcl9jYXJkKQoKICAgICAgICBiYWRfd29yZHM6IERpY3Rbc3RyLCBMaXN0W3N0cl1dID0ge30KCiAgICAgICAgYmFkX3dvcmRfdmFyaWFudHM6IERpY3Rbc3RyLCBEaWN0W3N0ciwgTGlzdFtzdHJdXV0gPSB7fQoKICAgICAgICBldG94X2xhbmdfdmFyaWFudHMgPSBjYXJkLmZpZWxkKCJldG94X2xhbmdfdmFyaWFudHMiKS5hc19zZXQoc3RyKQoKICAgICAgICBldG94X2RzX3VyaSA9IGNhcmQuZmllbGQoImV0b3hfZGF0YXNldCIpLmFzX3VyaSgpCgogICAgICAgIGV0b3hfZHNfcGF0aCA9IHNlbGYuZG93bmxvYWRfbWFuYWdlci5kb3dubG9hZF9kYXRhc2V0KGV0b3hfZHNfdXJpLCAiZXRveCIpCgogICAgICAgIGZvciB3b3JkX2ZpbGUgaW4gZXRveF9kc19wYXRoLml0ZXJkaXIoKToKICAgICAgICAgICAgbGFuZyA9IHdvcmRfZmlsZS5uYW1lWzo4XQoKICAgICAgICAgICAgaWYgbGFuZyBub3QgaW4gZXRveF9sYW5nX3ZhcmlhbnRzOgogICAgICAgICAgICAgICAgbGFuZyA9IGxhbmdbOjNdCgogICAgICAgICAgICB3b3JkcyA9IHNlbGYuX2xvYWRfd29yZHMod29yZF9maWxlKQoKICAgICAgICAgICAgYmFkX3dvcmRzW2xhbmddID0gd29yZHMKCiAgICAgICAgICAgIGJhZF93b3JkX3ZhcmlhbnRzW2xhbmddID0ge30KCiAgICAgICAgICAgIGZvciB3b3JkIGluIHdvcmRzOgogICAgICAgICAgICAgICAgYmFkX3dvcmRfdmFyaWFudHNbbGFuZ11bd29yZF0gPSBbCiAgICAgICAgICAgICAgICAgICAgd29yZC5sb3dlcigpLAogICAgICAgICAgICAgICAgICAgIHdvcmQudXBwZXIoKSwKICAgICAgICAgICAgICAgICAgICB3b3JkLmNhcGl0YWxpemUoKSwKICAgICAgICAgICAgICAgIF0KCiAgICAgICAgc3BfdXJpID0gY2FyZC5maWVsZCgic3BfbW9kZWwiKS5hc191cmkoKQoKICAgICAgICBzcF9wYXRobmFtZSA9IHNlbGYuZG93bmxvYWRfbWFuYWdlci5kb3dubG9hZF90b2tlbml6ZXIoc3BfdXJpLCBjYXJkLm5hbWUpCgogICAgICAgIHNwX21vZGVsID0gU2VudGVuY2VQaWVjZU1vZGVsKHNwX3BhdGhuYW1lKQoKICAgICAgICBzcF9lbmNvZGVyID0gU2VudGVuY2VQaWVjZUVuY29kZXIoc3BfbW9kZWwpCgogICAgICAgIHNwX2xhbmdzID0gY2FyZC5maWVsZCgic3BfbGFuZ3MiKS5hc19zZXQoc3RyKQoKICAgICAgICByZXR1cm4gRVRPWEJhZFdvcmRDaGVja2VyKAogICAgICAgICAgICBiYWRfd29yZHMsCiAgICAgICAgICAgIGJhZF93b3JkX3ZhcmlhbnRzLAogICAgICAgICAgICBzcF9lbmNvZGVyLAogICAgICAgICAgICBzcF9sYW5ncywKICAgICAgICApCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9sb2FkX3dvcmRzKHBhdGhuYW1lOiBQYXRoKSAtPiBMaXN0W3N0cl06CiAgICAgICAgd29yZHM6IExpc3Rbc3RyXSA9IFtdCgogICAgICAgIHdpdGggb3BlbihwYXRobmFtZSwgInIiLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmcDoKICAgICAgICAgICAgZm9yIGxpbmUgaW4gZnAucmVhZGxpbmVzKCk6CiAgICAgICAgICAgICAgICB3b3Jkcy5hcHBlbmQoY29kZWNzLmVuY29kZShsaW5lLCAicm90XzEzIikucnN0cmlwKCJcbiIpKQoKICAgICAgICByZXR1cm4gbGlzdChzZXQod29yZHMpKSAgIyBEZWR1cC4KCgpsb2FkX2V0b3hfYmFkX3dvcmRfY2hlY2tlciA9IEVUT1hCYWRXb3JkQ2hlY2tlckxvYWRlcigKICAgIGJhc2VfYXNzZXRfc3RvcmUsCiAgICBiYXNlX2Rvd25sb2FkX21hbmFnZXIsCikK'),
    ('seamless/build/lib/seamless_communication/toxicity/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi50b3hpY2l0eS5ldG94X2JhZF93b3JkX2NoZWNrZXIgaW1wb3J0ICgKICAgIEVUT1hCYWRXb3JkQ2hlY2tlciBhcyBFVE9YQmFkV29yZENoZWNrZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLnRveGljaXR5LmV0b3hfYmFkX3dvcmRfY2hlY2tlciBpbXBvcnQgKAogICAgbG9hZF9ldG94X2JhZF93b3JkX2NoZWNrZXIgYXMgbG9hZF9ldG94X2JhZF93b3JkX2NoZWNrZXIsCikK'),
    ('seamless/build/lib/seamless_communication/toxicity/mintox.py', ''),
    ('seamless/build/lib/seamless_communication/segment/__init__.py', ''),
    ('seamless/build/lib/seamless_communication/segment/silero_vad.py', ''),
    ('seamless/build/lib/seamless_communication/models/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/build/lib/seamless_communication/models/tokenizer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKIyBNSVRfTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgoKZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBTZXF1ZW5jZSwgU2V0LCBmaW5hbAoKZnJvbSBmYWlyc2VxMi5kYXRhLnRleHQgaW1wb3J0ICgKICAgIFNlbnRlbmNlUGllY2VEZWNvZGVyLAogICAgU2VudGVuY2VQaWVjZUVuY29kZXIsCiAgICBTZW50ZW5jZVBpZWNlTW9kZWwsCiAgICBUZXh0VG9rZW5EZWNvZGVyLAogICAgVGV4dFRva2VuRW5jb2RlciwKICAgIFRleHRUb2tlbml6ZXIsCiAgICB2b2NhYl9pbmZvX2Zyb21fc2VudGVuY2VwaWVjZSwKKQpmcm9tIGZhaXJzZXEyLmRhdGEudHlwaW5nIGltcG9ydCBQYXRoTGlrZQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGV2aWNlLCBmaW5hbG92ZXJyaWRlCgoKQGZpbmFsCmNsYXNzIFNQTVRva2VuaXplcihUZXh0VG9rZW5pemVyKToKICAgICIiIlJlcHJlc2VudHMgc3RhbmRhcmQgU1BNLWJhc2VkIHRva2VuaXplciB1c2VkIGluIE1UIHRhc2tzIiIiCgogICAgbW9kZWw6IFNlbnRlbmNlUGllY2VNb2RlbAogICAgbGFuZ3M6IFNldFtzdHJdCiAgICBwcmVwZW5kX3RhcmdldF9sYW5ndG9rX3RvX3RhcmdldDogYm9vbAoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIHBhdGhuYW1lOiBQYXRoTGlrZSwKICAgICAgICBsYW5nczogU2VxdWVuY2Vbc3RyXSwKICAgICAgICBwcmVwZW5kX3RhcmdldF9sYW5ndG9rX3RvX3RhcmdldDogYm9vbCA9IFRydWUsCiAgICApIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgOnBhcmFtIHBhdGhuYW1lOgogICAgICAgICAgICBUaGUgcGF0aG5hbWUgb2YgdGhlIFNlbnRlbmNlUGllY2UgbW9kZWwgZmlsZS4KICAgICAgICA6cGFyYW0gbGFuZ3M6CiAgICAgICAgICAgIFRoZSBsaXN0IG9mIHN1cHBvcnRlZCBsYW5ndWFnZXMuCiAgICAgICAgOnBhcmFtIGRlZmF1bHRfbGFuZzoKICAgICAgICAgICAgVGhlIGZhbGwtYmFjayBsYW5ndWFnZSBpZiBubyBsYW5ndWFnZSBpcyBzcGVjaWZpZWQuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5sYW5ncyA9IHNldChsYW5ncykKICAgICAgICBzZWxmLnByZXBlbmRfdGFyZ2V0X2xhbmd0b2tfdG9fdGFyZ2V0ID0gcHJlcGVuZF90YXJnZXRfbGFuZ3Rva190b190YXJnZXQKCiAgICAgICAgIyBFYWNoIGxhbmd1YWdlIGlzIHJlcHJlc2VudGVkIGJ5IGEgYF9fbGFuZ19fYCBjb250cm9sIHN5bWJvbC4KICAgICAgICBjb250cm9sX3N5bWJvbHMgPSBbc2VsZi5fbGFuZ190b2tfdG9faW50ZXJuYWwobGFuZykgZm9yIGxhbmcgaW4gc29ydGVkKGxhbmdzKV0KICAgICAgICBzZWxmLm1vZGVsID0gU2VudGVuY2VQaWVjZU1vZGVsKHBhdGhuYW1lLCBjb250cm9sX3N5bWJvbHMpCiAgICAgICAgdm9jYWJfaW5mbyA9IHZvY2FiX2luZm9fZnJvbV9zZW50ZW5jZXBpZWNlKHNlbGYubW9kZWwpCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyh2b2NhYl9pbmZvKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9sYW5nX3Rva190b19pbnRlcm5hbChjbHMsIGxhbmc6IHN0cikgLT4gc3RyOgogICAgICAgIHJldHVybiBmIl9fe2xhbmd9X18iCgogICAgQGZpbmFsb3ZlcnJpZGUKICAgIGRlZiBjcmVhdGVfZW5jb2RlcigKICAgICAgICBzZWxmLAogICAgICAgICosCiAgICAgICAgdGFzazogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgbGFuZzogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgbW9kZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBwaW5fbWVtb3J5OiBib29sID0gRmFsc2UsCiAgICApIC0+IFRleHRUb2tlbkVuY29kZXI6CiAgICAgICAgIiIiQ3JlYXRlIGEgdG9rZW4gZW5jb2Rlci4KCiAgICAgICAgOnBhcmFtIHRhc2s6CiAgICAgICAgICAgIE11c3QgYmUgJ3RyYW5zbGF0aW9uJy4gSWYgYGBOb25lYGAsIGRlZmF1bHRzIHRvICd0cmFuc2xhdGlvbicuCiAgICAgICAgOnBhcmFtIGxhbmc6CiAgICAgICAgICAgIEEgbGFuZ3VhZ2UgZnJvbSA6YXR0cjpgbGFuZ3NgLiBJZiBgYE5vbmVgYCwgZGVmYXVsdHMgdG8KICAgICAgICAgICAgOmF0dHI6YGRlZmF1bHRfbGFuZ2AuCiAgICAgICAgOnBhcmFtIG1vZGU6CiAgICAgICAgICAgIE11c3QgYmUgJ3NvdXJjZScgb3IgJ3RhcmdldCcuCiAgICAgICAgOnBhcmFtIGRldmljZToKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBjb25zdHJ1Y3QgdGVuc29ycy4KICAgICAgICA6cGFyYW0gcGluX21lbW9yeToKICAgICAgICAgICAgSWYgYGBUcnVlYGAsIHVzZXMgcGlubmVkIG1lbW9yeSB3aGlsZSBjb25zdHJ1Y3RpbmcgdGVuc29ycy4KICAgICAgICAiIiIKICAgICAgICBpZiB0YXNrIGlzIG5vdCBOb25lIGFuZCB0YXNrICE9ICJ0cmFuc2xhdGlvbiI6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoZiJgdGFza2AgbXVzdCBiZSAndHJhbnNsYXRpb24nLCBidXQgaXMgJ3t0YXNrfScgaW5zdGVhZC4iKQoKICAgICAgICBhc3NlcnQgbGFuZyBpcyBub3QgTm9uZQoKICAgICAgICBpZiBsYW5nIG5vdCBpbiBzZWxmLmxhbmdzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKAogICAgICAgICAgICAgICAgZiJgbGFuZ2AgbXVzdCBiZSBhIHN1cHBvcnRlZCBsYW5ndWFnZSwgYnV0IGlzICd7bGFuZ30nIGluc3RlYWQuIgogICAgICAgICAgICApCgogICAgICAgIGlmIG1vZGUgaXMgTm9uZSBvciBtb2RlID09ICJzb3VyY2UiOgogICAgICAgICAgICBwcmVmaXhfdG9rZW5zID0gW10KICAgICAgICAgICAgc3VmZml4X3Rva2VucyA9IFsiPC9zPiJdCiAgICAgICAgZWxpZiBtb2RlID09ICJ0YXJnZXQiOgogICAgICAgICAgICBwcmVmaXhfdG9rZW5zID0gKAogICAgICAgICAgICAgICAgWyI8L3M+Il0gKyBbc2VsZi5fbGFuZ190b2tfdG9faW50ZXJuYWwobGFuZyldCiAgICAgICAgICAgICAgICBpZiBzZWxmLnByZXBlbmRfdGFyZ2V0X2xhbmd0b2tfdG9fdGFyZ2V0CiAgICAgICAgICAgICAgICBlbHNlIFtdCiAgICAgICAgICAgICkKICAgICAgICAgICAgc3VmZml4X3Rva2VucyA9IFsiPC9zPiJdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgIGYiYG1vZGVgIG11c3QgYmUgJ3NvdXJjZScgb3IgJ3RhcmdldCcsIGJ1dCBpcyAne21vZGV9JyBpbnN0ZWFkLiIKICAgICAgICAgICAgKQoKICAgICAgICByZXR1cm4gU2VudGVuY2VQaWVjZUVuY29kZXIoCiAgICAgICAgICAgIHNlbGYubW9kZWwsCiAgICAgICAgICAgIHByZWZpeF90b2tlbnM9cHJlZml4X3Rva2VucywKICAgICAgICAgICAgc3VmZml4X3Rva2Vucz1zdWZmaXhfdG9rZW5zLAogICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICBwaW5fbWVtb3J5PXBpbl9tZW1vcnksCiAgICAgICAgKQoKICAgIEBmaW5hbG92ZXJyaWRlCiAgICBkZWYgY3JlYXRlX3Jhd19lbmNvZGVyKAogICAgICAgIHNlbGYsICosIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsIHBpbl9tZW1vcnk6IGJvb2wgPSBGYWxzZQogICAgKSAtPiBUZXh0VG9rZW5FbmNvZGVyOgogICAgICAgIHJldHVybiBTZW50ZW5jZVBpZWNlRW5jb2RlcihzZWxmLm1vZGVsLCBkZXZpY2U9ZGV2aWNlLCBwaW5fbWVtb3J5PXBpbl9tZW1vcnkpCgogICAgQGZpbmFsb3ZlcnJpZGUKICAgIGRlZiBjcmVhdGVfZGVjb2RlcihzZWxmKSAtPiBUZXh0VG9rZW5EZWNvZGVyOgogICAgICAgIHJldHVybiBTZW50ZW5jZVBpZWNlRGVjb2RlcihzZWxmLm1vZGVsKQo='),
    ('seamless/build/lib/seamless_communication/models/pretssel/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnByZXRzc2VsLmVjYXBhX3Rkbm4gaW1wb3J0IEVDQVBBX1RETk4gYXMgRUNBUEFfVEROTgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnByZXRzc2VsLmVjYXBhX3Rkbm5fYnVpbGRlciBpbXBvcnQgKAogICAgRWNhcGFURE5OQnVpbGRlciBhcyBFY2FwYVRETk5CdWlsZGVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMucHJldHNzZWwuZWNhcGFfdGRubl9idWlsZGVyIGltcG9ydCAoCiAgICBFY2FwYVRETk5Db25maWcgYXMgRWNhcGFURE5OQ29uZmlnLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMucHJldHNzZWwuZWNhcGFfdGRubl9idWlsZGVyIGltcG9ydCAoCiAgICBlY2FwYV90ZG5uX2FyY2hzIGFzIGVjYXBhX3Rkbm5fYXJjaHMsCikK'),
    ('seamless/build/lib/seamless_communication/models/pretssel/ecapa_tdnn.py', ''),
    ('seamless/build/lib/seamless_communication/models/pretssel/ecapa_tdnn_builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIE9wdGlvbmFsCgpmcm9tIGZhaXJzZXEyLm1vZGVscy51dGlscy5hcmNoX3JlZ2lzdHJ5IGltcG9ydCBBcmNoaXRlY3R1cmVSZWdpc3RyeQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZQoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5wcmV0c3NlbC5lY2FwYV90ZG5uIGltcG9ydCBFQ0FQQV9URE5OCgoKQGRhdGFjbGFzcwpjbGFzcyBFY2FwYVRETk5Db25maWc6CiAgICBjaGFubmVsczogTGlzdFtpbnRdCiAgICBrZXJuZWxfc2l6ZXM6IExpc3RbaW50XQogICAgZGlsYXRpb25zOiBMaXN0W2ludF0KICAgIGF0dGVudGlvbl9jaGFubmVsczogaW50CiAgICByZXMybmV0X3NjYWxlOiBpbnQKICAgIHNlX2NoYW5uZWxzOiBpbnQKICAgIGdsb2JhbF9jb250ZXh0OiBib29sCiAgICBncm91cHM6IExpc3RbaW50XQogICAgZW1iZWRfZGltOiBpbnQKICAgIGlucHV0X2RpbTogaW50CgoKZWNhcGFfdGRubl9hcmNocyA9IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5W0VjYXBhVEROTkNvbmZpZ10oImVjYXBhX3Rkbm4iKQoKZWNhcGFfdGRubl9hcmNoID0gZWNhcGFfdGRubl9hcmNocy5kZWNvcmF0b3IKCgpAZWNhcGFfdGRubl9hcmNoKCJiYXNlIikKZGVmIF9iYXNlX2VjYXBhX3Rkbm4oKSAtPiBFY2FwYVRETk5Db25maWc6CiAgICByZXR1cm4gRWNhcGFURE5OQ29uZmlnKAogICAgICAgIGNoYW5uZWxzPVs1MTIsIDUxMiwgNTEyLCA1MTIsIDE1MzZdLAogICAgICAgIGtlcm5lbF9zaXplcz1bNSwgMywgMywgMywgMV0sCiAgICAgICAgZGlsYXRpb25zPVsxLCAyLCAzLCA0LCAxXSwKICAgICAgICBhdHRlbnRpb25fY2hhbm5lbHM9MTI4LAogICAgICAgIHJlczJuZXRfc2NhbGU9OCwKICAgICAgICBzZV9jaGFubmVscz0xMjgsCiAgICAgICAgZ2xvYmFsX2NvbnRleHQ9VHJ1ZSwKICAgICAgICBncm91cHM9WzEsIDEsIDEsIDEsIDFdLAogICAgICAgIGVtYmVkX2RpbT01MTIsCiAgICAgICAgaW5wdXRfZGltPTgwLAogICAgKQoKCmNsYXNzIEVjYXBhVEROTkJ1aWxkZXI6CiAgICAiIiIKICAgIEJ1aWxkZXIgbW9kdWxlIGZvciBFQ0FQQV9URE5OIG1vZGVsCiAgICAiIiIKCiAgICBjb25maWc6IEVjYXBhVEROTkNvbmZpZwogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdCiAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgY29uZmlnOiBFY2FwYVRETk5Db25maWcsCiAgICAgICAgKiwKICAgICAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAogICAgKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgICAgIFRoZSBjb25maWd1cmF0aW9uIHRvIHVzZS4KICAgICAgICA6cGFyYW0gZGV2aWNldjoKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBpbml0aWFsaXplIG1vZHVsZXMuCiAgICAgICAgOnBhcmFtIGR0eXBlOgogICAgICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29uZmlnID0gY29uZmlnCgogICAgICAgIHNlbGYuZGV2aWNlLCBzZWxmLmR0eXBlID0gZGV2aWNlLCBkdHlwZQoKICAgIGRlZiBidWlsZF9tb2RlbChzZWxmKSAtPiBFQ0FQQV9URE5OOgogICAgICAgICIiIkJ1aWxkIGEgbW9kZWwuIiIiCiAgICAgICAgbW9kZWwgPSBFQ0FQQV9URE5OKAogICAgICAgICAgICBzZWxmLmNvbmZpZy5jaGFubmVscywKICAgICAgICAgICAgc2VsZi5jb25maWcua2VybmVsX3NpemVzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5kaWxhdGlvbnMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmF0dGVudGlvbl9jaGFubmVscywKICAgICAgICAgICAgc2VsZi5jb25maWcucmVzMm5ldF9zY2FsZSwKICAgICAgICAgICAgc2VsZi5jb25maWcuc2VfY2hhbm5lbHMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmdsb2JhbF9jb250ZXh0LAogICAgICAgICAgICBzZWxmLmNvbmZpZy5ncm91cHMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmVtYmVkX2RpbSwKICAgICAgICAgICAgc2VsZi5jb25maWcuaW5wdXRfZGltLAogICAgICAgICkKICAgICAgICBtb2RlbC50byhkZXZpY2U9c2VsZi5kZXZpY2UsIGR0eXBlPXNlbGYuZHR5cGUpCiAgICAgICAgcmV0dXJuIG1vZGVsCgoKZGVmIGNyZWF0ZV9lY2FwYV90ZG5uX21vZGVsKAogICAgY29uZmlnOiBFY2FwYVRETk5Db25maWcsCiAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCikgLT4gRUNBUEFfVEROTjoKICAgICIiIkNyZWF0ZSBhIEVDQVBBX1RETk4gbW9kZWwuCgogICAgOnBhcmFtIGNvbmZpZzoKICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICA6cGFyYW0gZGV2aWNlOgogICAgICAgIFRoZSBkZXZpY2Ugb24gd2hpY2ggdG8gaW5pdGlhbGl6ZSBtb2R1bGVzLgogICAgOnBhcmFtIGR0eXBlOgogICAgICAgIFRoZSBkYXRhIHR5cGUgb2YgbW9kdWxlIHBhcmFtZXRlcnMgYW5kIGJ1ZmZlcnMuCiAgICAiIiIKCiAgICByZXR1cm4gRWNhcGFURE5OQnVpbGRlcihjb25maWcsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKS5idWlsZF9tb2RlbCgpCg=='),
    ('seamless/build/lib/seamless_communication/models/vocoder/codehifigan.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gdHlwaW5nIGltcG9ydCBBbnksIERpY3QsIExpc3QsIE9wdGlvbmFsCgppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoLm5uIGFzIG5uCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvcgoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eSBpbXBvcnQgVmFyaWFuY2VQcmVkaWN0b3IKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy52b2NvZGVyLmhpZmlnYW4gaW1wb3J0IEdlbmVyYXRvcgoKCmNsYXNzIENvZGVHZW5lcmF0b3IoR2VuZXJhdG9yKToKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIHVwc2FtcGxlX3JhdGVzOiBMaXN0W2ludF0sCiAgICAgICAgdXBzYW1wbGVfa2VybmVsX3NpemVzOiBMaXN0W2ludF0sCiAgICAgICAgdXBzYW1wbGVfaW5pdGlhbF9jaGFubmVsOiBpbnQsCiAgICAgICAgcmVzYmxvY2tfa2VybmVsX3NpemVzOiBMaXN0W2ludF0sCiAgICAgICAgcmVzYmxvY2tfZGlsYXRpb25fc2l6ZXM6IExpc3RbTGlzdFtpbnRdXSwKICAgICAgICBtb2RlbF9pbl9kaW06IE9wdGlvbmFsW2ludF0sCiAgICAgICAgbnVtX2VtYmVkZGluZ3M6IGludCwKICAgICAgICBlbWJlZGRpbmdfZGltOiBpbnQsCiAgICAgICAgZHVyX3ByZWRpY3Rvcl9wYXJhbXM6IERpY3Rbc3RyLCBBbnldLAogICAgICAgIGxhbmdfZW1iZWRkaW5nX2RpbTogaW50LAogICAgICAgIG51bV9sYW5nczogaW50LAogICAgICAgIHNwa3JfZW1iZWRkaW5nX2RpbTogaW50LAogICAgICAgIG51bV9zcGtyczogaW50LAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKAogICAgICAgICAgICB1cHNhbXBsZV9yYXRlcywKICAgICAgICAgICAgdXBzYW1wbGVfa2VybmVsX3NpemVzLAogICAgICAgICAgICB1cHNhbXBsZV9pbml0aWFsX2NoYW5uZWwsCiAgICAgICAgICAgIHJlc2Jsb2NrX2tlcm5lbF9zaXplcywKICAgICAgICAgICAgcmVzYmxvY2tfZGlsYXRpb25fc2l6ZXMsCiAgICAgICAgICAgIG1vZGVsX2luX2RpbSwKICAgICAgICApCiAgICAgICAgc2VsZi5kaWN0ID0gbm4uRW1iZWRkaW5nKG51bV9lbWJlZGRpbmdzLCBlbWJlZGRpbmdfZGltKQogICAgICAgIHNlbGYuc3BrciA9IG5uLkVtYmVkZGluZyhudW1fc3BrcnMsIHNwa3JfZW1iZWRkaW5nX2RpbSkKICAgICAgICBzZWxmLmxhbmcgPSBubi5FbWJlZGRpbmcobnVtX2xhbmdzLCBsYW5nX2VtYmVkZGluZ19kaW0pCgogICAgICAgIHNlbGYuZHVyX3ByZWRpY3RvciA9IE5vbmUKICAgICAgICBpZiBkdXJfcHJlZGljdG9yX3BhcmFtczoKICAgICAgICAgICAgc2VsZi5kdXJfcHJlZGljdG9yID0gVmFyaWFuY2VQcmVkaWN0b3IoKipkdXJfcHJlZGljdG9yX3BhcmFtcykKCiAgICAgICAgc2VsZi5udW1fc3BrcnMgPSBudW1fc3BrcnMKICAgICAgICBzZWxmLm51bV9sYW5ncyA9IG51bV9sYW5ncwoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfdXBzYW1wbGUoc2lnbmFsOiBUZW5zb3IsIG1heF9mcmFtZXM6IGludCkgLT4gVGVuc29yOgogICAgICAgIGlmIHNpZ25hbC5kaW0oKSA9PSAzOgogICAgICAgICAgICBic3osIGNoYW5uZWxzLCBjb25kX2xlbmd0aCA9IHNpZ25hbC5zaXplKCkKICAgICAgICBlbGlmIHNpZ25hbC5kaW0oKSA9PSAyOgogICAgICAgICAgICBzaWduYWwgPSBzaWduYWwudW5zcXVlZXplKDIpCiAgICAgICAgICAgIGJzeiwgY2hhbm5lbHMsIGNvbmRfbGVuZ3RoID0gc2lnbmFsLnNpemUoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNpZ25hbCA9IHNpZ25hbC52aWV3KC0xLCAxLCAxKQogICAgICAgICAgICBic3osIGNoYW5uZWxzLCBjb25kX2xlbmd0aCA9IHNpZ25hbC5zaXplKCkKCiAgICAgICAgc2lnbmFsID0gc2lnbmFsLnVuc3F1ZWV6ZSgzKS5yZXBlYXQoMSwgMSwgMSwgbWF4X2ZyYW1lcyAvLyBjb25kX2xlbmd0aCkKCiAgICAgICAgIyBwYWQgemVyb3MgYXMgbmVlZGVkIChpZiBzaWduYWwncyBzaGFwZSBkb2VzIG5vdCBkaXZpZGUgY29tcGxldGVseSB3aXRoIG1heF9mcmFtZXMpCiAgICAgICAgcmVtaW5kZXIgPSAobWF4X2ZyYW1lcyAtIHNpZ25hbC5zaGFwZVsyXSAqIHNpZ25hbC5zaGFwZVszXSkgLy8gc2lnbmFsLnNoYXBlWzNdCiAgICAgICAgaWYgcmVtaW5kZXIgPiAwOgogICAgICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKAogICAgICAgICAgICAgICAgIlBhZGRpbmcgY29uZGl0aW9uIHNpZ25hbCAtIG1pc2FsaWdubWVudCBiZXR3ZWVuIGNvbmRpdGlvbiBmZWF0dXJlcy4iCiAgICAgICAgICAgICkKCiAgICAgICAgc2lnbmFsID0gc2lnbmFsLnZpZXcoYnN6LCBjaGFubmVscywgbWF4X2ZyYW1lcykKICAgICAgICByZXR1cm4gc2lnbmFsCgogICAgZGVmIGZvcndhcmQoc2VsZiwgc2FtcGxlOiBEaWN0W3N0ciwgQW55XSwgZHVyX3ByZWRpY3Rpb246IGJvb2wpIC0+IFRlbnNvcjogICMgdHlwZTogaWdub3JlCiAgICAgICAgeCA9IHNhbXBsZVsiY29kZSJdCiAgICAgICAgeCA9IHNlbGYuZGljdCh4KS50cmFuc3Bvc2UoMSwgMikKCiAgICAgICAgaWYgc2VsZi5kdXJfcHJlZGljdG9yIGFuZCBkdXJfcHJlZGljdGlvbjoKICAgICAgICAgICAgbG9nX2R1cl9wcmVkID0gc2VsZi5kdXJfcHJlZGljdG9yKHgudHJhbnNwb3NlKDEsIDIpLCBOb25lKQogICAgICAgICAgICBkdXJfb3V0ID0gdG9yY2guY2xhbXAoCiAgICAgICAgICAgICAgICB0b3JjaC5yb3VuZCgodG9yY2guZXhwKGxvZ19kdXJfcHJlZCkgLSAxKSkubG9uZygpLCBtaW49MQogICAgICAgICAgICApCiAgICAgICAgICAgICMgQiB4IEMgeCBUCiAgICAgICAgICAgIHJlcGVhdF9pbnRlcmxlYXZlZF94ID0gW10KICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoeC5zaXplKDApKToKICAgICAgICAgICAgICAgIHJlcGVhdF9pbnRlcmxlYXZlZF94LmFwcGVuZCh0b3JjaC5yZXBlYXRfaW50ZXJsZWF2ZSh4W2ldLnVuc3F1ZWV6ZSgwKSwgZHVyX291dFtpXS52aWV3KC0xKSwgZGltPTIpKQogICAgICAgICAgICB4ID0gdG9yY2guY2F0KHJlcGVhdF9pbnRlcmxlYXZlZF94KQogICAgICAgIHVwc2FtcGxlZF9zcGtyID0gW10KICAgICAgICB1cHNhbXBsZWRfbGFuZyA9IFtdCiAgICAgICAgc3BrciA9IHNlbGYuc3BrcihzYW1wbGVbInNwa3IiXSkudHJhbnNwb3NlKDEsIDIpCiAgICAgICAgbGFuZyA9IHNlbGYubGFuZyhzYW1wbGVbImxhbmciXSkudHJhbnNwb3NlKDEsIDIpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoeC5zaXplKDApKToKICAgICAgICAgICAgdXBzYW1wbGVkX3Nwa3IuYXBwZW5kKHNlbGYuX3Vwc2FtcGxlKHNwa3JbaV0sIHguc2hhcGVbLTFdKSkKICAgICAgICAgICAgdXBzYW1wbGVkX2xhbmcuYXBwZW5kKHNlbGYuX3Vwc2FtcGxlKGxhbmdbaV0sIHguc2hhcGVbLTFdKSkKICAgICAgICBzcGtyID0gdG9yY2guY2F0KHVwc2FtcGxlZF9zcGtyLCBkaW09MSkudHJhbnNwb3NlKDAsIDEpCiAgICAgICAgbGFuZyA9IHRvcmNoLmNhdCh1cHNhbXBsZWRfbGFuZywgZGltPTEpLnRyYW5zcG9zZSgwLCAxKQogICAgICAgIHggPSB0b3JjaC5jYXQoW3gsIHNwa3JdLCBkaW09MSkKICAgICAgICB4ID0gdG9yY2guY2F0KFtsYW5nLCB4XSwgZGltPTEpCgogICAgICAgIHJldHVybiBzdXBlcigpLmZvcndhcmQoeCkK'),
    ('seamless/build/lib/seamless_communication/models/vocoder/hifigan.py', ''),
    ('seamless/build/lib/seamless_communication/models/vocoder/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIuYnVpbGRlciBpbXBvcnQgKAogICAgVm9jb2RlckJ1aWxkZXIgYXMgVm9jb2RlckJ1aWxkZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy52b2NvZGVyLmJ1aWxkZXIgaW1wb3J0IFZvY29kZXJDb25maWcgYXMgVm9jb2RlckNvbmZpZwpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIuY29kZWhpZmlnYW4gaW1wb3J0ICgKICAgIENvZGVHZW5lcmF0b3IgYXMgQ29kZUdlbmVyYXRvciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIuaGlmaWdhbiBpbXBvcnQgR2VuZXJhdG9yIGFzIEdlbmVyYXRvcgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIubG9hZGVyIGltcG9ydCAoCiAgICBsb2FkX3ZvY29kZXJfbW9kZWwgYXMgbG9hZF92b2NvZGVyX21vZGVsLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci52b2NvZGVyIGltcG9ydCBWb2NvZGVyIGFzIFZvY29kZXIK'),
    ('seamless/build/lib/seamless_communication/models/vocoder/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBNYXBwaW5nCgpmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgYXNzZXRfc3RvcmUsIGRvd25sb2FkX21hbmFnZXIKZnJvbSBmYWlyc2VxMi5tb2RlbHMudXRpbHMgaW1wb3J0IENvbmZpZ0xvYWRlciwgTW9kZWxMb2FkZXIKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci5idWlsZGVyIGltcG9ydCAoCiAgICBWb2NvZGVyQ29uZmlnLAogICAgY3JlYXRlX3ZvY29kZXJfbW9kZWwsCiAgICB2b2NvZGVyX2FyY2hzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci52b2NvZGVyIGltcG9ydCBWb2NvZGVyCgoKZGVmIGNvbnZlcnRfdm9jb2Rlcl9jaGVja3BvaW50KAogICAgY2hlY2twb2ludDogTWFwcGluZ1tzdHIsIEFueV0sIGNvbmZpZzogVm9jb2RlckNvbmZpZwopIC0+IE1hcHBpbmdbc3RyLCBBbnldOgogICAgaWYgKAogICAgICAgICJtb2RlbCIgaW4gY2hlY2twb2ludAogICAgICAgIGFuZCAiY29kZV9nZW5lcmF0b3IucmVzYmxvY2tzLjAuY29udnMxLjAud2VpZ2h0X2ciIGluIGNoZWNrcG9pbnRbIm1vZGVsIl0KICAgICk6CiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnQKCiAgICBvbGRfc3RhdGVfZGljdCA9IGNoZWNrcG9pbnRbImdlbmVyYXRvciJdCiAgICBuZXdfc3RhdGVfZGljdCA9IHt9CiAgICBmb3Iga2V5IGluIG9sZF9zdGF0ZV9kaWN0OgogICAgICAgIG5ld19rZXkgPSBmImNvZGVfZ2VuZXJhdG9yLntrZXl9IgogICAgICAgIG5ld19zdGF0ZV9kaWN0W25ld19rZXldID0gb2xkX3N0YXRlX2RpY3Rba2V5XQogICAgY2hlY2twb2ludFsibW9kZWwiXSA9IG5ld19zdGF0ZV9kaWN0ICAjIHR5cGU6IGlnbm9yZQogICAgZGVsIGNoZWNrcG9pbnRbImdlbmVyYXRvciJdICAjIHR5cGU6IGlnbm9yZQogICAgcmV0dXJuIGNoZWNrcG9pbnQKCgpsb2FkX3ZvY29kZXJfY29uZmlnID0gQ29uZmlnTG9hZGVyW1ZvY29kZXJDb25maWddKGFzc2V0X3N0b3JlLCB2b2NvZGVyX2FyY2hzKQoKCmxvYWRfdm9jb2Rlcl9tb2RlbCA9IE1vZGVsTG9hZGVyW1ZvY29kZXIsIFZvY29kZXJDb25maWddKAogICAgYXNzZXRfc3RvcmUsCiAgICBkb3dubG9hZF9tYW5hZ2VyLAogICAgbG9hZF92b2NvZGVyX2NvbmZpZywKICAgIGNyZWF0ZV92b2NvZGVyX21vZGVsLAogICAgY29udmVydF92b2NvZGVyX2NoZWNrcG9pbnQsCikK'),
    ('seamless/build/lib/seamless_communication/models/vocoder/builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdCwgTGlzdCwgT3B0aW9uYWwKCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzLmFyY2hfcmVnaXN0cnkgaW1wb3J0IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5CmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnZvY29kZXIuY29kZWhpZmlnYW4gaW1wb3J0IENvZGVHZW5lcmF0b3IKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy52b2NvZGVyLnZvY29kZXIgaW1wb3J0IFZvY29kZXIKCgpAZGF0YWNsYXNzCmNsYXNzIFZvY29kZXJDb25maWc6CiAgICAiIiJIb2xkcyB0aGUgY29uZmlndXJhdGlvbiBvZiBhIFZvY29kZXIgbW9kZWwuIiIiCgogICAgdXBzYW1wbGVfcmF0ZXM6IExpc3RbaW50XQogICAgdXBzYW1wbGVfa2VybmVsX3NpemVzOiBMaXN0W2ludF0KICAgIHVwc2FtcGxlX2luaXRpYWxfY2hhbm5lbDogaW50CiAgICByZXNibG9ja19rZXJuZWxfc2l6ZXM6IExpc3RbaW50XQogICAgcmVzYmxvY2tfZGlsYXRpb25fc2l6ZXM6IExpc3RbTGlzdFtpbnRdXQogICAgbW9kZWxfaW5fZGltOiBpbnQKICAgIG51bV9lbWJlZGRpbmdzOiBpbnQKICAgIGVtYmVkZGluZ19kaW06IGludAogICAgZHVyX3ByZWRpY3Rvcl9wYXJhbXM6IERpY3Rbc3RyLCBmbG9hdF0KICAgIGxhbmdfZW1iZWRkaW5nX2RpbTogaW50CiAgICBudW1fbGFuZ3M6IGludAogICAgc3Brcl9lbWJlZGRpbmdfZGltOiBpbnQKICAgIG51bV9zcGtyczogaW50CiAgICBsYW5nX3Nwa3JfaWR4X21hcDogRGljdFtzdHIsIEFueV0KCgp2b2NvZGVyX2FyY2hzID0gQXJjaGl0ZWN0dXJlUmVnaXN0cnlbVm9jb2RlckNvbmZpZ10oInZvY29kZXJfY29kZV9oaWZpZ2FuIikKCnZvY29kZXJfYXJjaCA9IHZvY29kZXJfYXJjaHMuZGVjb3JhdG9yCgoKQHZvY29kZXJfYXJjaCgiYmFzZSIpCmRlZiBfYmFzZV92b2NvZGVyKCkgLT4gVm9jb2RlckNvbmZpZzoKICAgIHJldHVybiBWb2NvZGVyQ29uZmlnKAogICAgICAgIHVwc2FtcGxlX3JhdGVzPVs1LCA0LCA0LCAyLCAyXSwKICAgICAgICB1cHNhbXBsZV9rZXJuZWxfc2l6ZXM9WzExLCA4LCA4LCA0LCA0XSwKICAgICAgICB1cHNhbXBsZV9pbml0aWFsX2NoYW5uZWw9NTEyLAogICAgICAgIHJlc2Jsb2NrX2tlcm5lbF9zaXplcz1bMywgNywgMTFdLAogICAgICAgIHJlc2Jsb2NrX2RpbGF0aW9uX3NpemVzPVtbMSwgMywgNV0sIFsxLCAzLCA1XSwgWzEsIDMsIDVdXSwKICAgICAgICBtb2RlbF9pbl9kaW09MTc5MiwKICAgICAgICBudW1fZW1iZWRkaW5ncz0xMDAwMCwKICAgICAgICBlbWJlZGRpbmdfZGltPTEyODAsCiAgICAgICAgZHVyX3ByZWRpY3Rvcl9wYXJhbXM9ewogICAgICAgICAgICAiZW5jb2Rlcl9lbWJlZF9kaW0iOiAxMjgwLAogICAgICAgICAgICAidmFyX3ByZWRfaGlkZGVuX2RpbSI6IDEyODAsCiAgICAgICAgICAgICJ2YXJfcHJlZF9rZXJuZWxfc2l6ZSI6IDMsCiAgICAgICAgICAgICJ2YXJfcHJlZF9kcm9wb3V0IjogMC41LAogICAgICAgIH0sCiAgICAgICAgbGFuZ19lbWJlZGRpbmdfZGltPTI1NiwKICAgICAgICBudW1fbGFuZ3M9MzYsCiAgICAgICAgc3Brcl9lbWJlZGRpbmdfZGltPTI1NiwKICAgICAgICBudW1fc3BrcnM9MjAwLAogICAgICAgIGxhbmdfc3Brcl9pZHhfbWFwPXt9LAogICAgKQoKCmNsYXNzIFZvY29kZXJCdWlsZGVyOgogICAgIiIiQnVpbGRzIG1vZHVsZXMgb2YgYSB2b2NvZGVyIG1vZGVsIChDb2RlIEhpZmlnYW4pIGFzIGRlc2NyaWJlZCBpbgogICAgOmNpdGU6dGBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tyZXNlYXJjaC9zcGVlY2gtcmVzeW50aGVzaXNgLgoKICAgIFRvIHR3ZWFrIHRoZSBhcmNoaXRlY3R1cmUsIHlvdSBjYW4gZGVyaXZlIGZyb20gdGhpcyBjbGFzcyBhbmQgb3ZlcnJpZGUgdGhlCiAgICBjb3JyZXNwb25kaW5nIG1ldGhvZHMuCiAgICAiIiIKCiAgICBjb25maWc6IFZvY29kZXJDb25maWcKICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXQogICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGNvbmZpZzogVm9jb2RlckNvbmZpZywKICAgICAgICAqLAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgOnBhcmFtIGNvbmZpZzoKICAgICAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgICAgIDpwYXJhbSBkZXZpY2U6CiAgICAgICAgICAgIFRoZSBkZXZpY2Ugb24gd2hpY2ggdG8gaW5pdGlhbGl6ZSBtb2R1bGVzLgogICAgICAgIDpwYXJhbSBkdHlwZToKICAgICAgICAgICAgVGhlIGRhdGEgdHlwZSBvZiBtb2R1bGUgcGFyYW1ldGVycyBhbmQgYnVmZmVycy4KICAgICAgICAiIiIKICAgICAgICBzZWxmLmNvbmZpZyA9IGNvbmZpZwogICAgICAgIHNlbGYuZGV2aWNlLCBzZWxmLmR0eXBlID0gZGV2aWNlLCBkdHlwZQoKICAgIGRlZiBidWlsZF9tb2RlbChzZWxmKSAtPiBWb2NvZGVyOgogICAgICAgICIiIkJ1aWxkIGEgbW9kZWwuIiIiCgogICAgICAgIGNvZGVfZ2VuZXJhdG9yID0gQ29kZUdlbmVyYXRvcigKICAgICAgICAgICAgc2VsZi5jb25maWcudXBzYW1wbGVfcmF0ZXMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnVwc2FtcGxlX2tlcm5lbF9zaXplcywKICAgICAgICAgICAgc2VsZi5jb25maWcudXBzYW1wbGVfaW5pdGlhbF9jaGFubmVsLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5yZXNibG9ja19rZXJuZWxfc2l6ZXMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnJlc2Jsb2NrX2RpbGF0aW9uX3NpemVzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlbF9pbl9kaW0sCiAgICAgICAgICAgIHNlbGYuY29uZmlnLm51bV9lbWJlZGRpbmdzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5lbWJlZGRpbmdfZGltLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5kdXJfcHJlZGljdG9yX3BhcmFtcywKICAgICAgICAgICAgc2VsZi5jb25maWcubGFuZ19lbWJlZGRpbmdfZGltLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5udW1fbGFuZ3MsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnNwa3JfZW1iZWRkaW5nX2RpbSwKICAgICAgICAgICAgc2VsZi5jb25maWcubnVtX3Nwa3JzLAogICAgICAgICkKICAgICAgICBjb2RlX2dlbmVyYXRvci50byhkZXZpY2U9c2VsZi5kZXZpY2UsIGR0eXBlPXNlbGYuZHR5cGUpCiAgICAgICAgdm9jb2RlciA9IFZvY29kZXIoY29kZV9nZW5lcmF0b3IsIHNlbGYuY29uZmlnLmxhbmdfc3Brcl9pZHhfbWFwKQogICAgICAgIHJldHVybiB2b2NvZGVyCgoKZGVmIGNyZWF0ZV92b2NvZGVyX21vZGVsKAogICAgY29uZmlnOiBWb2NvZGVyQ29uZmlnLAogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAopIC0+IFZvY29kZXI6CiAgICAiIiJDcmVhdGUgYSBWb2NvZGVyIG1vZGVsLgoKICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCgogICAgcmV0dXJuIFZvY29kZXJCdWlsZGVyKGNvbmZpZywgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpLmJ1aWxkX21vZGVsKCkK'),
    ('seamless/build/lib/seamless_communication/models/vocoder/vocoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBEaWN0LCBPcHRpb25hbCwgTGlzdCwgVW5pb24KaW1wb3J0IHRvcmNoCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvcgpmcm9tIHRvcmNoLm5uIGltcG9ydCBNb2R1bGUKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2Rlci5jb2RlaGlmaWdhbiBpbXBvcnQgQ29kZUdlbmVyYXRvcgoKCmNsYXNzIFZvY29kZXIoTW9kdWxlKToKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGNvZGVfZ2VuZXJhdG9yOiBDb2RlR2VuZXJhdG9yLAogICAgICAgIGxhbmdfc3Brcl9pZHhfbWFwOiBEaWN0W3N0ciwgQW55XSwKICAgICk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5jb2RlX2dlbmVyYXRvciA9IGNvZGVfZ2VuZXJhdG9yCiAgICAgICAgc2VsZi5sYW5nX3Nwa3JfaWR4X21hcCA9IGxhbmdfc3Brcl9pZHhfbWFwCgogICAgZGVmIGZvcndhcmQoCiAgICAgICAgc2VsZiwKICAgICAgICB1bml0czogVGVuc29yLAogICAgICAgIGxhbmdfbGlzdDogVW5pb25bTGlzdFtzdHJdLCBzdHJdLAogICAgICAgIHNwa3JfbGlzdDogVW5pb25bT3B0aW9uYWxbTGlzdFtpbnRdXSwgaW50XSA9IE5vbmUsCiAgICAgICAgZHVyX3ByZWRpY3Rpb246IGJvb2wgPSBUcnVlLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgIyBUT0RPOiBEbyB3ZSBuZWVkIHRoaXMgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgb3IganVzdCB1cGRhdGUgYWxsIGNhbGxpbmcgc2l0ZXM/IAogICAgICAgIGlmIGxlbih1bml0cy5zaGFwZSkgPT0gMToKICAgICAgICAgICAgdW5pdHMgPSB1bml0cy51bnNxdWVlemUoMCkgIyBhZGQgYmF0Y2ggZGltCiAgICAgICAgaWYgaXNpbnN0YW5jZShsYW5nX2xpc3QsIHN0cik6CiAgICAgICAgICAgIGxhbmdfbGlzdCA9IFtsYW5nX2xpc3RdICogdW5pdHMuc2l6ZSgwKQogICAgICAgIGlmIGlzaW5zdGFuY2Uoc3Brcl9saXN0LCBpbnQpOgogICAgICAgICAgICBzcGtyX2xpc3QgPSBbc3Brcl9saXN0XSAqIHVuaXRzLnNpemUoMCkKICAgICAgICBsYW5nX2lkeF9saXN0ID0gW3NlbGYubGFuZ19zcGtyX2lkeF9tYXBbIm11bHRpbGluZ3VhbCJdW2xdIGZvciBsIGluIGxhbmdfbGlzdF0KICAgICAgICBpZiBub3Qgc3Brcl9saXN0OgogICAgICAgICAgICBzcGtyX2xpc3QgPSBbLTEgZm9yIF8gaW4gcmFuZ2UobGVuKGxhbmdfbGlzdCkpXQogICAgICAgIHNwa3JfbGlzdCA9IFtzZWxmLmxhbmdfc3Brcl9pZHhfbWFwWyJtdWx0aXNwa3IiXVtsYW5nX2xpc3RbaV1dWzBdIGlmIHNwa3JfbGlzdFtpXSA9PSAtMSBlbHNlIHNwa3JfbGlzdFtpXSBmb3IgaSBpbiByYW5nZShsZW4oc3Brcl9saXN0KSldCiAgICAgICAgeCA9IHsKICAgICAgICAgICAgImNvZGUiOiB1bml0cy52aWV3KHVuaXRzLnNpemUoMCksIC0xKSwKICAgICAgICAgICAgInNwa3IiOiB0b3JjaC50ZW5zb3IoW3Nwa3JfbGlzdF0sIGRldmljZT11bml0cy5kZXZpY2UpLnQoKSwKICAgICAgICAgICAgImxhbmciOiB0b3JjaC50ZW5zb3IoW2xhbmdfaWR4X2xpc3RdLCBkZXZpY2U9dW5pdHMuZGV2aWNlKS50KCksCgogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZi5jb2RlX2dlbmVyYXRvcih4LCBkdXJfcHJlZGljdGlvbikgICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCg=='),
    ('seamless/build/lib/seamless_communication/models/unit_extractor/unit_extractor.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgppbXBvcnQgbG9nZ2luZwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSB0eXBpbmcgaW1wb3J0IFVuaW9uCgppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoLm5uLmZ1bmN0aW9uYWwgYXMgRgpmcm9tIGZhaXJzZXEyLmFzc2V0cy5jYXJkIGltcG9ydCBBc3NldENhcmQKZnJvbSBmYWlyc2VxMi5kYXRhIGltcG9ydCBDb2xsYXRlcgpmcm9tIGZhaXJzZXEyLmRhdGEuYXVkaW8gaW1wb3J0IEF1ZGlvRGVjb2Rlcgpmcm9tIGZhaXJzZXEyLm1lbW9yeSBpbXBvcnQgTWVtb3J5QmxvY2sKZnJvbSBmYWlyc2VxMi5tb2RlbHMuc2VxdWVuY2UgaW1wb3J0IFNlcXVlbmNlQmF0Y2gKZnJvbSBmYWlyc2VxMi5tb2RlbHMud2F2MnZlYzIgaW1wb3J0IFdhdjJWZWMyTW9kZWwsIGxvYWRfd2F2MnZlYzJfbW9kZWwKZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBnZXRfc2Vxc19hbmRfcGFkZGluZ19tYXNrCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvciwgbm4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdF9leHRyYWN0b3Iua21lYW5zIGltcG9ydCBLbWVhbnNNb2RlbApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXRfZXh0cmFjdG9yLndhdjJ2ZWMyX2xheWVyX291dHB1dCBpbXBvcnQgKAogICAgV2F2MlZlYzJMYXllck91dHB1dE1vZGVsLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudm9jb2RlciBpbXBvcnQgVm9jb2RlciwgbG9hZF92b2NvZGVyX21vZGVsCgpsb2dnaW5nLmJhc2ljQ29uZmlnKAogICAgbGV2ZWw9bG9nZ2luZy5JTkZPLAogICAgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKGxldmVsbmFtZSlzIC0tICUobmFtZSlzOiAlKG1lc3NhZ2UpcyIsCikKCmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQoKCmNsYXNzIFVuaXRFeHRyYWN0b3Iobm4uTW9kdWxlKToKICAgICIiIlVuaXQgRXh0cmFjdG9yIHdoaWNoIGNvbnZlcnRzIHJhdyBhdWRpbyBpbnRvIHVuaXRzLiIiIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIG1vZGVsX25hbWVfb3JfY2FyZDogVW5pb25bc3RyLCBBc3NldENhcmRdLAogICAgICAgIGttZWFuc191cmk6IHN0ciwKICAgICAgICBkZXZpY2U6IERldmljZSwKICAgICAgICBkdHlwZTogRGF0YVR5cGUgPSB0b3JjaC5mbG9hdDMyLAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICAgICAgd2F2MnZlYzJfbW9kZWwgPSBsb2FkX3dhdjJ2ZWMyX21vZGVsKAogICAgICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlCiAgICAgICAgKQogICAgICAgIHdhdjJ2ZWMyX21vZGVsLmV2YWwoKQogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHdhdjJ2ZWMyX21vZGVsLCBXYXYyVmVjMk1vZGVsKQogICAgICAgIHNlbGYubW9kZWwgPSBXYXYyVmVjMkxheWVyT3V0cHV0TW9kZWwod2F2MnZlYzJfbW9kZWwpCiAgICAgICAgc2VsZi5kZWNvZGVfYXVkaW8gPSBBdWRpb0RlY29kZXIoZHR5cGU9dG9yY2guZmxvYXQzMiwgZGV2aWNlPWRldmljZSkKICAgICAgICBzZWxmLmNvbGxhdGUgPSBDb2xsYXRlcihwYWRfdmFsdWU9MSwgcGFkX3RvX211bHRpcGxlPTIpCiAgICAgICAgc2VsZi5rbWVhbnNfbW9kZWwgPSBLbWVhbnNNb2RlbChrbWVhbnNfdXJpLCBkZXZpY2UsIGR0eXBlKQogICAgICAgIHNlbGYuZGV2aWNlID0gZGV2aWNlCiAgICAgICAgc2VsZi5kdHlwZSA9IGR0eXBlCgogICAgQHRvcmNoLmluZmVyZW5jZV9tb2RlKCkKICAgIGRlZiBwcmVkaWN0KAogICAgICAgIHNlbGYsCiAgICAgICAgYXVkaW86IFVuaW9uW3N0ciwgVGVuc29yXSwKICAgICAgICBvdXRfbGF5ZXJfaWR4OiBpbnQsCiAgICAgICAgc2FtcGxlX3JhdGU6IGludCA9IDE2MDAwLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgaWYgaXNpbnN0YW5jZShhdWRpbywgc3RyKToKICAgICAgICAgICAgd2l0aCBQYXRoKGF1ZGlvKS5vcGVuKCJyYiIpIGFzIGZiOgogICAgICAgICAgICAgICAgYmxvY2sgPSBNZW1vcnlCbG9jayhmYi5yZWFkKCkpCiAgICAgICAgICAgIGRlY29kZWRfYXVkaW8gPSBzZWxmLmRlY29kZV9hdWRpbyhibG9jaykKICAgICAgICAgICAgYXNzZXJ0ICgKICAgICAgICAgICAgICAgIHNhbXBsZV9yYXRlID09IGRlY29kZWRfYXVkaW9bInNhbXBsZV9yYXRlIl0KICAgICAgICAgICAgKSwgZiJJbnB1dCBhdWRpbyBtdXN0IGhhdmUge3NhbXBsZV9yYXRlfSBzYW1wbGluZyByYXRlIgoKICAgICAgICBlbHNlOgogICAgICAgICAgICBhc3NlcnQgYXVkaW8uZGltKCkgPD0gMiwgIlRoZSBhdWRpbyB0ZW5zb3IgY2FuJ3QgYmUgbW9yZSB0aGFuIDIgZGltZW5zaW9ucy4iCiAgICAgICAgICAgIGlmIGF1ZGlvLmRpbSgpID09IDE6CiAgICAgICAgICAgICAgICBhdWRpbyA9IGF1ZGlvLnVuc3F1ZWV6ZSgxKQogICAgICAgICAgICBlbGlmIGF1ZGlvLmRpbSgpID09IDIgYW5kIGF1ZGlvLnNpemUoMCkgPCBhdWRpby5zaXplKDEpOgogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoCiAgICAgICAgICAgICAgICAgICAgIlRyYW5zcG9zaW5nIGF1ZGlvIHRlbnNvciBmcm9tIChic3osIHNlcV9sZW4pIC0+IChzZXFfbGVuLCBic3opLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGF1ZGlvID0gYXVkaW8udHJhbnNwb3NlKDAsIDEpCgogICAgICAgICAgICBkZWNvZGVkX2F1ZGlvID0gewogICAgICAgICAgICAgICAgIndhdmVmb3JtIjogYXVkaW8udG8oZHR5cGU9c2VsZi5kdHlwZSksCiAgICAgICAgICAgICAgICAic2FtcGxlX3JhdGUiOiBzYW1wbGVfcmF0ZSwKICAgICAgICAgICAgICAgICJmb3JtYXQiOiAtMSwKICAgICAgICAgICAgfQogICAgICAgIHNyYyA9IHNlbGYuY29sbGF0ZShkZWNvZGVkX2F1ZGlvKVsid2F2ZWZvcm0iXQogICAgICAgIHNlcXMsIHBhZGRpbmdfbWFzayA9IGdldF9zZXFzX2FuZF9wYWRkaW5nX21hc2soc3JjKQogICAgICAgIHNlcXMgPSBzZXFzLnZpZXcoMSwgLTEpCiAgICAgICAgc2VxcyA9IEYubGF5ZXJfbm9ybShzZXFzLCBzZXFzLnNoYXBlKQogICAgICAgIGJhdGNoID0gU2VxdWVuY2VCYXRjaChzZXFzPXNlcXMsIHBhZGRpbmdfbWFzaz1wYWRkaW5nX21hc2spCiAgICAgICAgZmVhdHVyZXMgPSBzZWxmLm1vZGVsKGJhdGNoLCBvdXRfbGF5ZXJfaWR4KS5zcXVlZXplKDApCiAgICAgICAgdW5pdHMgPSBzZWxmLmttZWFuc19tb2RlbChmZWF0dXJlcykKICAgICAgICByZXR1cm4gdW5pdHMgICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIHJlc3ludGhlc2l6ZV9hdWRpbygKICAgICAgICB1bml0czogVGVuc29yLAogICAgICAgIHNyY19sYW5nOiBzdHIsCiAgICAgICAgZGV2aWNlOiBEZXZpY2UsCiAgICAgICAgZHR5cGU6IERhdGFUeXBlLAogICAgICAgIHZvY29kZXJfbmFtZTogc3RyID0gInZvY29kZXJfdjIiLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgdm9jb2RlciA9IGxvYWRfdm9jb2Rlcl9tb2RlbCh2b2NvZGVyX25hbWUsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKQogICAgICAgIHZvY29kZXIuZXZhbCgpCiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2Uodm9jb2RlciwgVm9jb2RlcikKICAgICAgICB3YXYgPSB2b2NvZGVyKHVuaXRzLCBzcmNfbGFuZywgc3Brcj0tMSwgZHVyX3ByZWRpY3Rpb249VHJ1ZSkKICAgICAgICByZXR1cm4gd2F2ICAjIHR5cGU6IGlnbm9yZVtuby1hbnktcmV0dXJuXQo='),
    ('seamless/build/lib/seamless_communication/models/unit_extractor/wav2vec2_layer_output.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbAoKaW1wb3J0IHRvcmNoCmltcG9ydCB0b3JjaC5ubiBhcyBubgpmcm9tIGZhaXJzZXEyLm1vZGVscy5zZXF1ZW5jZSBpbXBvcnQgU2VxdWVuY2VCYXRjaApmcm9tIGZhaXJzZXEyLm1vZGVscy53YXYydmVjMiBpbXBvcnQgKAogICAgV2F2MlZlYzJDb25maWcsCiAgICBXYXYyVmVjMkVuY29kZXJDb25maWcsCiAgICBXYXYyVmVjMkZyb250ZW5kLAogICAgV2F2MlZlYzJNb2RlbCwKICAgIHdhdjJ2ZWMyX2FyY2gsCikKZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBQYWRkaW5nTWFzawpmcm9tIGZhaXJzZXEyLm5uLnRyYW5zZm9ybWVyIGltcG9ydCBUcmFuc2Zvcm1lckVuY29kZXIsIFRyYW5zZm9ybWVyTm9ybU9yZGVyCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvcgoKCmRlZiBfZW5jb2Rlcl94bHNyMl8xYl92MigpIC0+IFdhdjJWZWMyRW5jb2RlckNvbmZpZzoKICAgIGxheWVyX2Rlc2NzID0gWyg1MTIsIDEwLCA1KV0gKyBbKDUxMiwgMywgMildICogNCArIFsoNTEyLCAyLCAyKV0gKiAyCgogICAgcmV0dXJuIFdhdjJWZWMyRW5jb2RlckNvbmZpZygKICAgICAgICBtb2RlbF9kaW09MTI4MCwKICAgICAgICBtYXhfc2VxX2xlbj00MDk2LAogICAgICAgIGZlYXR1cmVfZGltPTUxMiwKICAgICAgICB1c2VfZmJhbms9RmFsc2UsCiAgICAgICAgZmlyc3RfcGFzc19kcm9wb3V0X3A9MC4wLAogICAgICAgIGxheWVyX25vcm1fZmVhdHVyZXM9RmFsc2UsCiAgICAgICAgZmVhdHVyZV9leHRyYWN0b3JfbGF5ZXJfZGVzY3M9bGF5ZXJfZGVzY3MsCiAgICAgICAgZmVhdHVyZV9leHRyYWN0b3JfYmlhcz1UcnVlLAogICAgICAgIGZlYXR1cmVfZXh0cmFjdG9yX2xheWVyX25vcm1fY29udnM9VHJ1ZSwKICAgICAgICBmZWF0dXJlX2dyYWRfc2NhbGU9MS4wLAogICAgICAgIG51bV9mYmFua19jaGFubmVscz0wLAogICAgICAgIGZiYW5rX3N0cmlkZT0wLAogICAgICAgIHNhbXBsZV9mYmFua19ldmVyeV9rPTAsCiAgICAgICAgcG9zX2VuY29kZXJfdHlwZT0iY29udiIsCiAgICAgICAgcG9zX2VuY29kZXJfZGVwdGg9MSwKICAgICAgICBwb3NfY29udl9rZXJuZWxfc2l6ZT0xMjgsCiAgICAgICAgbnVtX3Bvc19jb252X2dyb3Vwcz0xNiwKICAgICAgICB1c2VfY29uZm9ybWVyPUZhbHNlLAogICAgICAgIG51bV9lbmNvZGVyX2xheWVycz00OCwKICAgICAgICBudW1fZW5jb2Rlcl9hdHRuX2hlYWRzPTE2LAogICAgICAgIGZmbl9pbm5lcl9kaW09NTEyMCwKICAgICAgICBkcm9wb3V0X3A9MC4xLAogICAgICAgIGF0dG5fZHJvcG91dF9wPTAuMSwKICAgICAgICBsYXllcl9kcm9wX3A9MC4wLAogICAgICAgIG5vcm1fb3JkZXI9VHJhbnNmb3JtZXJOb3JtT3JkZXIuUFJFLAogICAgICAgIGRlcHRod2lzZV9jb252X2tlcm5lbF9zaXplPTAsCiAgICApCgoKQHdhdjJ2ZWMyX2FyY2goInhsc3IyXzFiX3YyIikKZGVmIF94bHNyMl8xYl92MigpIC0+IFdhdjJWZWMyQ29uZmlnOgogICAgZW5jb2Rlcl9jb25maWcgPSBfZW5jb2Rlcl94bHNyMl8xYl92MigpCgogICAgcmV0dXJuIFdhdjJWZWMyQ29uZmlnKAogICAgICAgIGVuY29kZXJfY29uZmlnLAogICAgICAgIGZpbmFsX2RpbT0xMDI0LAogICAgICAgIGZpbmFsX3Byb2pfYmlhcz1UcnVlLAogICAgICAgIHRlbXBvcmFsX21hc2tfc3Bhbl9sZW49MTAsCiAgICAgICAgbWF4X3RlbXBvcmFsX21hc2tfcHJvYj0wLjY1LAogICAgICAgIHNwYXRpYWxfbWFza19zcGFuX2xlbj0xMCwKICAgICAgICBtYXhfc3BhdGlhbF9tYXNrX3Byb2I9MC4wLAogICAgICAgIHF1YW50aXplZF9kaW09MTAyNCwKICAgICAgICBudW1fY29kZWJvb2tzPTIsCiAgICAgICAgbnVtX2NvZGVib29rX2VudHJpZXM9MzIwLAogICAgICAgIGNvZGVib29rX3NhbXBsaW5nX3RlbXBlcmF0dXJlPSgyLCAwLjEsIDAuOTk5OTk1KSwKICAgICAgICBudW1fZGlzdHJhY3RvcnM9MTAwLAogICAgICAgIGxvZ2l0X3RlbXA9MC4xLAogICAgICAgIGRpdmVyc2l0eV9sb3NzX3dlaWdodD0wLjEsCiAgICApCgoKY2xhc3MgV2F2MlZlYzJMYXllck91dHB1dE1vZGVsKG5uLk1vZHVsZSk6CiAgICBlbmNvZGVyX2Zyb250ZW5kOiBXYXYyVmVjMkZyb250ZW5kCiAgICBlbmNvZGVyOiBUcmFuc2Zvcm1lckVuY29kZXIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdzJ2MjogV2F2MlZlYzJNb2RlbCk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIHNlbGYuZW5jb2Rlcl9mcm9udGVuZCA9IHcydjIuZW5jb2Rlcl9mcm9udGVuZAogICAgICAgIHNlbGYuZW5jb2RlciA9IHcydjIuZW5jb2RlcgoKICAgIEB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpCiAgICBkZWYgZm9yd2FyZChzZWxmLCBiYXRjaDogU2VxdWVuY2VCYXRjaCwgb3V0X2xheWVyX2lkeDogaW50KSAtPiBUZW5zb3I6CiAgICAgICAgIiIiCiAgICAgICAgOnBhcmFtIGJhdGNoOgogICAgICAgICAgICBUaGUgYmF0Y2ggb2Ygc2VxdWVuY2VzIHRvIHByb2Nlc3MuCiAgICAgICAgIiIiCiAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrID0gc2VsZi5lbmNvZGVyX2Zyb250ZW5kKGJhdGNoLnNlcXMsIGJhdGNoLnBhZGRpbmdfbWFzaykKCiAgICAgICAgdzJ2Ml9sYXllcl9vdXRwdXQgPSBOb25lCgogICAgICAgIGRlZiBob29rKAogICAgICAgICAgICBsYXllcl9pZHg6IGludCwKICAgICAgICAgICAgbGF5ZXJfb3V0cHV0OiBUZW5zb3IsCiAgICAgICAgICAgIGxheWVyX3BhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdLAogICAgICAgICAgICBudW1fbGF5ZXJzOiBpbnQsCiAgICAgICAgKSAtPiBib29sOgogICAgICAgICAgICBub25sb2NhbCB3MnYyX2xheWVyX291dHB1dAoKICAgICAgICAgICAgaWYgbGF5ZXJfaWR4ID09IG91dF9sYXllcl9pZHg6CiAgICAgICAgICAgICAgICB3MnYyX2xheWVyX291dHB1dCA9IGxheWVyX291dHB1dAoKICAgICAgICAgICAgICAgICMgV2UgZG9uJ3QgbmVlZCB0byBleGVjdXRlIHRoZSByZW1haW5pbmcgbGF5ZXJzLgogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICB3aXRoIHNlbGYuZW5jb2Rlci5yZWdpc3Rlcl9sYXllcl9vdXRwdXRfaG9vayhob29rKToKICAgICAgICAgICAgXywgXyA9IHNlbGYuZW5jb2RlcihzZXFzLCBwYWRkaW5nX21hc2spCgogICAgICAgIGFzc2VydCB3MnYyX2xheWVyX291dHB1dCBpcyBub3QgTm9uZQoKICAgICAgICByZXR1cm4gdzJ2Ml9sYXllcl9vdXRwdXQK'),
    ('seamless/build/lib/seamless_communication/models/unit_extractor/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXRfZXh0cmFjdG9yLmttZWFucyBpbXBvcnQgKAogICAgS21lYW5zTW9kZWwgYXMgS21lYW5zTW9kZWwsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0X2V4dHJhY3Rvci51bml0X2V4dHJhY3RvciBpbXBvcnQgKAogICAgVW5pdEV4dHJhY3RvciBhcyBVbml0RXh0cmFjdG9yLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdF9leHRyYWN0b3Iud2F2MnZlYzJfbGF5ZXJfb3V0cHV0IGltcG9ydCAoCiAgICBXYXYyVmVjMkxheWVyT3V0cHV0TW9kZWwgYXMgV2F2MlZlYzJMYXllck91dHB1dE1vZGVsLAopCg=='),
    ('seamless/build/lib/seamless_communication/models/unit_extractor/kmeans.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHRvcmNoCmZyb20gZmFpcnNlcTIuYXNzZXRzIGltcG9ydCBkb3dubG9hZF9tYW5hZ2VyCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvciwgbm4KCgpjbGFzcyBLbWVhbnNNb2RlbChubi5Nb2R1bGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGttZWFuc191cmk6IHN0ciwgZGV2aWNlOiBEZXZpY2UsIGR0eXBlOiBEYXRhVHlwZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAga21fcGF0aCA9IGRvd25sb2FkX21hbmFnZXIuZG93bmxvYWRfY2hlY2twb2ludChrbWVhbnNfdXJpLCBrbWVhbnNfdXJpKQogICAgICAgIGttX21vZGVsID0gbnAubG9hZChrbV9wYXRoKQogICAgICAgIGNlbnRyb2lkc19udW1weSA9IGttX21vZGVsLnRyYW5zcG9zZSgpCiAgICAgICAgY2VudHJvaWRzID0gdG9yY2guZnJvbV9udW1weShjZW50cm9pZHNfbnVtcHkpCiAgICAgICAgc2VsZi5jZW50cm9pZHMgPSBjZW50cm9pZHMudG8oZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpCiAgICAgICAgc2VsZi5jZW50cm9pZF9ub3JtID0gKHNlbGYuY2VudHJvaWRzKioyKS5zdW0oMCwga2VlcGRpbXM9VHJ1ZSkKCiAgICBkZWYgZm9yd2FyZChzZWxmLCB4OiBUZW5zb3IpIC0+IFRlbnNvcjoKICAgICAgICBkaXN0OiBUZW5zb3IgPSAoCiAgICAgICAgICAgIHgucG93KDIpLnN1bSgxLCBrZWVwZGltPVRydWUpCiAgICAgICAgICAgIC0gMiAqIHRvcmNoLm1hdG11bCh4LCBzZWxmLmNlbnRyb2lkcykKICAgICAgICAgICAgKyBzZWxmLmNlbnRyb2lkX25vcm0KICAgICAgICApCiAgICAgICAgcmV0dXJuIGRpc3QuYXJnbWluKGRpbT0tMSkK'),
    ('seamless/build/lib/seamless_communication/models/unity/fft_decoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBJdGVyYWJsZSwgT3B0aW9uYWwsIFR1cGxlLCBmaW5hbAoKZnJvbSBmYWlyc2VxMi5ubi5tb2R1bGVfbGlzdCBpbXBvcnQgTW9kdWxlTGlzdApmcm9tIGZhaXJzZXEyLm5uLm5vcm1hbGl6YXRpb24gaW1wb3J0IExheWVyTm9ybQpmcm9tIGZhaXJzZXEyLm5uLnBhZGRpbmcgaW1wb3J0IFBhZGRpbmdNYXNrCmZyb20gZmFpcnNlcTIubm4udHJhbnNmb3JtZXIgaW1wb3J0IFRyYW5zZm9ybWVyTm9ybU9yZGVyLCBjcmVhdGVfc3RhbmRhcmRfbGF5ZXJfbm9ybQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZSwgZmluYWxvdmVycmlkZQpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKZnJvbSB0b3JjaC5ubiBpbXBvcnQgTW9kdWxlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmZmdF9kZWNvZGVyX2xheWVyIGltcG9ydCAoCiAgICBGZWVkRm9yd2FyZFRyYW5zZm9ybWVyTGF5ZXIsCikKCgpAZmluYWwKY2xhc3MgRmVlZEZvcndhcmRUcmFuc2Zvcm1lcihNb2R1bGUpOgogICAgIiIiUmVwcmVzZW50cyBhIEZlZWRmb3J3YXJkIFRyYW5zZm9ybWVyIGRlY29kZXIuIiIiCgogICAgbW9kZWxfZGltOiBpbnQKICAgIGxheWVyX25vcm06IE9wdGlvbmFsW0xheWVyTm9ybV0KICAgIG5vcm1fb3JkZXI6IFRyYW5zZm9ybWVyTm9ybU9yZGVyCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgbGF5ZXJzOiBJdGVyYWJsZVtGZWVkRm9yd2FyZFRyYW5zZm9ybWVyTGF5ZXJdLAogICAgICAgICosCiAgICAgICAgbm9ybV9vcmRlcjogVHJhbnNmb3JtZXJOb3JtT3JkZXIgPSBUcmFuc2Zvcm1lck5vcm1PcmRlci5QT1NULAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgOnBhcmFtIGxheWVyczoKICAgICAgICAgICAgVGhlIGRlY29kZXIgbGF5ZXJzLgogICAgICAgIDpwYXJhbSBub3JtX29yZGVyOgogICAgICAgICAgICBUaGUgTGF5ZXIgTm9ybWFsaXphdGlvbiBvcmRlciB0byB1c2UuCiAgICAgICAgIiIiCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIGxheWVyX2xpc3QgPSBNb2R1bGVMaXN0KGxheWVycykKCiAgICAgICAgaWYgbm90IGxheWVyX2xpc3Q6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImBsYXllcnNgIG11c3QgYmUgbm9uLWVtcHR5LiIpCgogICAgICAgIHNlbGYubW9kZWxfZGltID0gbGF5ZXJfbGlzdFswXS5tb2RlbF9kaW0KCiAgICAgICAgc2VsZi5sYXllcnMgPSBsYXllcl9saXN0CgogICAgICAgIGlmIG5vcm1fb3JkZXIgIT0gVHJhbnNmb3JtZXJOb3JtT3JkZXIuUE9TVDoKICAgICAgICAgICAgc2VsZi5sYXllcl9ub3JtID0gY3JlYXRlX3N0YW5kYXJkX2xheWVyX25vcm0oCiAgICAgICAgICAgICAgICBzZWxmLm1vZGVsX2RpbSwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUKICAgICAgICAgICAgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYucmVnaXN0ZXJfbW9kdWxlKCJsYXllcl9ub3JtIiwgTm9uZSkKCiAgICAgICAgc2VsZi5ub3JtX29yZGVyID0gbm9ybV9vcmRlcgoKICAgIEBmaW5hbG92ZXJyaWRlCiAgICBkZWYgZm9yd2FyZCgKICAgICAgICBzZWxmLAogICAgICAgIHNlcXM6IFRlbnNvciwKICAgICAgICBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwKICAgICAgICBmaWxtX2NvbmRfZW1iOiBPcHRpb25hbFtUZW5zb3JdID0gTm9uZSwKICAgICkgLT4gVHVwbGVbVGVuc29yLCBPcHRpb25hbFtQYWRkaW5nTWFza11dOgogICAgICAgIGZvciBsYXllciBpbiBzZWxmLmxheWVycy5kcm9wX2l0ZXIoKToKICAgICAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrID0gbGF5ZXIoc2VxcywgcGFkZGluZ19tYXNrLCBmaWxtX2NvbmRfZW1iPWZpbG1fY29uZF9lbWIpCgogICAgICAgIGlmIHNlbGYubGF5ZXJfbm9ybSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VxcyA9IHNlbGYubGF5ZXJfbm9ybShzZXFzKQoKICAgICAgICByZXR1cm4gc2VxcywgcGFkZGluZ19tYXNrCgogICAgZGVmIGV4dHJhX3JlcHIoc2VsZikgLT4gc3RyOgogICAgICAgICIiIjptZXRhIHByaXZhdGU6IiIiCiAgICAgICAgcyA9IHN1cGVyKCkuZXh0cmFfcmVwcigpCgogICAgICAgIHJldHVybiBmIntzfSwgbm9ybV9vcmRlcj17c2VsZi5ub3JtX29yZGVyfSIK'),
    ('seamless/build/lib/seamless_communication/models/unity/nar_decoder_frontend.py', ''),
    ('seamless/build/lib/seamless_communication/models/unity/unit_tokenizer.py', ''),
    ('seamless/build/lib/seamless_communication/models/unity/adaptor_block.py', ''),
    ('seamless/build/lib/seamless_communication/models/unity/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmJ1aWxkZXIgaW1wb3J0IFVuaXRZQnVpbGRlciBhcyBVbml0WUJ1aWxkZXIKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5idWlsZGVyIGltcG9ydCBVbml0WUNvbmZpZyBhcyBVbml0WUNvbmZpZwpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmJ1aWxkZXIgaW1wb3J0ICgKICAgIGNyZWF0ZV91bml0eV9tb2RlbCBhcyBjcmVhdGVfdW5pdHlfbW9kZWwsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5idWlsZGVyIGltcG9ydCB1bml0eV9hcmNoIGFzIHVuaXR5X2FyY2gKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5idWlsZGVyIGltcG9ydCB1bml0eV9hcmNocyBhcyB1bml0eV9hcmNocwpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmNoYXJfdG9rZW5pemVyIGltcG9ydCAoCiAgICBDaGFyVG9rZW5pemVyIGFzIENoYXJUb2tlbml6ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5jaGFyX3Rva2VuaXplciBpbXBvcnQgKAogICAgVW5pdFlDaGFyVG9rZW5pemVyTG9hZGVyIGFzIFVuaXRZQ2hhclRva2VuaXplckxvYWRlciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmNoYXJfdG9rZW5pemVyIGltcG9ydCAoCiAgICBsb2FkX3VuaXR5X2NoYXJfdG9rZW5pemVyIGFzIGxvYWRfdW5pdHlfY2hhcl90b2tlbml6ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5mZnRfZGVjb2RlciBpbXBvcnQgKAogICAgRmVlZEZvcndhcmRUcmFuc2Zvcm1lciBhcyBGZWVkRm9yd2FyZFRyYW5zZm9ybWVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkuZmZ0X2RlY29kZXJfbGF5ZXIgaW1wb3J0ICgKICAgIEZlZWRGb3J3YXJkVHJhbnNmb3JtZXJMYXllciBhcyBGZWVkRm9yd2FyZFRyYW5zZm9ybWVyTGF5ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5maWxtIGltcG9ydCBGaUxNCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubGVuZ3RoX3JlZ3VsYXRvciBpbXBvcnQgKAogICAgSGFyZFVwc2FtcGxpbmcgYXMgSGFyZFVwc2FtcGxpbmcsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5sZW5ndGhfcmVndWxhdG9yIGltcG9ydCAoCiAgICBWYXJpYW5jZUFkYXB0b3IgYXMgVmFyaWFuY2VBZGFwdG9yLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubGVuZ3RoX3JlZ3VsYXRvciBpbXBvcnQgKAogICAgVmFyaWFuY2VQcmVkaWN0b3IgYXMgVmFyaWFuY2VQcmVkaWN0b3IsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5sb2FkZXIgaW1wb3J0ICgKICAgIGxvYWRfZ2Ntdm5fc3RhdHMgYXMgbG9hZF9nY212bl9zdGF0cywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmxvYWRlciBpbXBvcnQgKAogICAgbG9hZF91bml0eV9jb25maWcgYXMgbG9hZF91bml0eV9jb25maWcsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5sb2FkZXIgaW1wb3J0ICgKICAgIGxvYWRfdW5pdHlfbW9kZWwgYXMgbG9hZF91bml0eV9tb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmxvYWRlciBpbXBvcnQgKAogICAgbG9hZF91bml0eV90ZXh0X3Rva2VuaXplciBhcyBsb2FkX3VuaXR5X3RleHRfdG9rZW5pemVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubG9hZGVyIGltcG9ydCAoCiAgICBsb2FkX3VuaXR5X3VuaXRfdG9rZW5pemVyIGFzIGxvYWRfdW5pdHlfdW5pdF90b2tlbml6ZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5tb2RlbCBpbXBvcnQgVW5pdFlNb2RlbCBhcyBVbml0WU1vZGVsCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubW9kZWwgaW1wb3J0ICgKICAgIFVuaXRZTkFSVDJVTW9kZWwgYXMgVW5pdFlOQVJUMlVNb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5Lm1vZGVsIGltcG9ydCBVbml0WU91dHB1dCBhcyBVbml0WU91dHB1dApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5Lm1vZGVsIGltcG9ydCBVbml0WVQyVU1vZGVsIGFzIFVuaXRZVDJVTW9kZWwKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5tb2RlbCBpbXBvcnQgVW5pdFlYMlRNb2RlbCBhcyBVbml0WVgyVE1vZGVsCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkubmFyX2RlY29kZXJfZnJvbnRlbmQgaW1wb3J0ICgKICAgIE5BUkRlY29kZXJGcm9udGVuZCBhcyBOQVJEZWNvZGVyRnJvbnRlbmQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS50MnVfYnVpbGRlciBpbXBvcnQgKAogICAgVW5pdFlOQVJUMlVCdWlsZGVyIGFzIFVuaXRZTkFSVDJVQnVpbGRlciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LnQydV9idWlsZGVyIGltcG9ydCAoCiAgICBVbml0WVQyVUJ1aWxkZXIgYXMgVW5pdFlUMlVCdWlsZGVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkudDJ1X2J1aWxkZXIgaW1wb3J0ICgKICAgIFVuaXRZVDJVQ29uZmlnIGFzIFVuaXRZVDJVQ29uZmlnLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkudDJ1X2J1aWxkZXIgaW1wb3J0ICgKICAgIGNyZWF0ZV91bml0eV90MnVfbW9kZWwgYXMgY3JlYXRlX3VuaXR5X3QydV9tb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LnQydV9idWlsZGVyIGltcG9ydCAoCiAgICB1bml0eV90MnVfYXJjaCBhcyB1bml0eV90MnVfYXJjaCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LnQydV9idWlsZGVyIGltcG9ydCAoCiAgICB1bml0eV90MnVfYXJjaHMgYXMgdW5pdHlfdDJ1X2FyY2hzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkudW5pdF90b2tlbml6ZXIgaW1wb3J0ICgKICAgIFVuaXRUb2tlbkRlY29kZXIgYXMgVW5pdFRva2VuRGVjb2RlciwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LnVuaXRfdG9rZW5pemVyIGltcG9ydCAoCiAgICBVbml0VG9rZW5FbmNvZGVyIGFzIFVuaXRUb2tlbkVuY29kZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS51bml0X3Rva2VuaXplciBpbXBvcnQgKAogICAgVW5pdFRva2VuaXplciBhcyBVbml0VG9rZW5pemVyLAopCg=='),
    ('seamless/build/lib/seamless_communication/models/unity/loader.py', ''),
    ('seamless/build/lib/seamless_communication/models/unity/builder.py', ''),
    ('seamless/build/lib/seamless_communication/models/unity/length_regulator.py', ''),
    ('seamless/build/lib/seamless_communication/models/unity/char_tokenizer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbCwgVW5pb24sIGZpbmFsCgpmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgKAogICAgQXNzZXREb3dubG9hZE1hbmFnZXIsCiAgICBBc3NldFN0b3JlLAogICAgYXNzZXRfc3RvcmUsCiAgICBkb3dubG9hZF9tYW5hZ2VyLAopCmZyb20gZmFpcnNlcTIuYXNzZXRzLmNhcmQgaW1wb3J0IEFzc2V0Q2FyZApmcm9tIGZhaXJzZXEyLmRhdGEudGV4dCBpbXBvcnQgKAogICAgU2VudGVuY2VQaWVjZURlY29kZXIsCiAgICBTZW50ZW5jZVBpZWNlRW5jb2RlciwKICAgIFNlbnRlbmNlUGllY2VNb2RlbCwKICAgIFRleHRUb2tlbkRlY29kZXIsCiAgICBUZXh0VG9rZW5FbmNvZGVyLAogICAgVGV4dFRva2VuaXplciwKICAgIHZvY2FiX2luZm9fZnJvbV9zZW50ZW5jZXBpZWNlLAopCmZyb20gZmFpcnNlcTIuZGF0YS50eXBpbmcgaW1wb3J0IFBhdGhMaWtlCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEZXZpY2UsIGZpbmFsb3ZlcnJpZGUKCgpAZmluYWwKY2xhc3MgQ2hhclRva2VuaXplcihUZXh0VG9rZW5pemVyKToKICAgICIiIkEgY2hhcmFjdGVyLWxldmVsIHRva2VuaXplciB1c2VkIGR1cmluZyBub24tYXV0b3JlZ3Jlc3NpdmUgVDJVIGRlY29kaW5nLiIiIgoKICAgIG1vZGVsOiBTZW50ZW5jZVBpZWNlTW9kZWwKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcGF0aG5hbWU6IFBhdGhMaWtlKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIDpwYXJhbSBwYXRobmFtZToKICAgICAgICAgICAgVGhlIHBhdGhuYW1lIG9mIHRoZSBTZW50ZW5jZVBpZWNlIG1vZGVsIGZpbGUuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5tb2RlbCA9IFNlbnRlbmNlUGllY2VNb2RlbChwYXRobmFtZSkKCiAgICAgICAgdm9jYWJfaW5mbyA9IHZvY2FiX2luZm9fZnJvbV9zZW50ZW5jZXBpZWNlKHNlbGYubW9kZWwpCgogICAgICAgIHN1cGVyKCkuX19pbml0X18odm9jYWJfaW5mbykKCiAgICBAZmluYWxvdmVycmlkZQogICAgZGVmIGNyZWF0ZV9lbmNvZGVyKAogICAgICAgIHNlbGYsCiAgICAgICAgdGFzazogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgbGFuZzogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgbW9kZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBwaW5fbWVtb3J5OiBib29sID0gRmFsc2UsCiAgICApIC0+IFRleHRUb2tlbkVuY29kZXI6CiAgICAgICAgIiIiQ3JlYXRlcyBhIGNoYXJhY3RlciBsZXZlbCBlbmNvZGVyLiIiIgogICAgICAgIHJldHVybiBTZW50ZW5jZVBpZWNlRW5jb2RlcigKICAgICAgICAgICAgc2VsZi5tb2RlbCwKICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgcGluX21lbW9yeT1waW5fbWVtb3J5LAogICAgICAgICkKCiAgICBAZmluYWxvdmVycmlkZQogICAgZGVmIGNyZWF0ZV9yYXdfZW5jb2RlcigKICAgICAgICBzZWxmLCAqLCBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLCBwaW5fbWVtb3J5OiBib29sID0gRmFsc2UKICAgICkgLT4gVGV4dFRva2VuRW5jb2RlcjoKICAgICAgICByZXR1cm4gU2VudGVuY2VQaWVjZUVuY29kZXIoc2VsZi5tb2RlbCwgZGV2aWNlPWRldmljZSwgcGluX21lbW9yeT1waW5fbWVtb3J5KQoKICAgIEBmaW5hbG92ZXJyaWRlCiAgICBkZWYgY3JlYXRlX2RlY29kZXIoc2VsZikgLT4gVGV4dFRva2VuRGVjb2RlcjoKICAgICAgICByZXR1cm4gU2VudGVuY2VQaWVjZURlY29kZXIoc2VsZi5tb2RlbCkKCgpjbGFzcyBVbml0WUNoYXJUb2tlbml6ZXJMb2FkZXI6CiAgICAiIiJMb2FkcyBjaGFyYWN0ZXItbGV2ZWwgdG9rZW5pemVycyBvZiBVbml0WSBtb2RlbHMuIiIiCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsIGFzc2V0X3N0b3JlOiBBc3NldFN0b3JlLCBkb3dubG9hZF9tYW5hZ2VyOiBBc3NldERvd25sb2FkTWFuYWdlcgogICAgKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIDpwYXJhbSBhc3NldF9zdG9yZToKICAgICAgICAgICAgVGhlIGFzc2V0IHN0b3JlIHRvIHJldHJpZXZlIHRoZSBtb2RlbCBpbmZvcm1hdGlvbi4KICAgICAgICA6cGFyYW0gZG93bmxvYWRfbWFuYWdlcjoKICAgICAgICAgICAgVGhlIGRvd25sb2FkIG1hbmFnZXIgdG8gdXNlLgogICAgICAgICIiIgogICAgICAgIHNlbGYuYXNzZXRfc3RvcmUgPSBhc3NldF9zdG9yZQogICAgICAgIHNlbGYuZG93bmxvYWRfbWFuYWdlciA9IGRvd25sb2FkX21hbmFnZXIKCiAgICBkZWYgX19jYWxsX18oCiAgICAgICAgc2VsZiwKICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ6IFVuaW9uW3N0ciwgQXNzZXRDYXJkXSwKICAgICAgICBmb3JjZTogYm9vbCA9IEZhbHNlLAogICAgICAgIHByb2dyZXNzOiBib29sID0gVHJ1ZSwKICAgICkgLT4gQ2hhclRva2VuaXplcjoKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gbW9kZWxfbmFtZV9vcl9jYXJkOgogICAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgb3IgYW4gYWxyZWFkeSBsb2FkZWQgQXNzZXRDYXJkCiAgICAgICAgIiIiCgogICAgICAgIGlmIGlzaW5zdGFuY2UobW9kZWxfbmFtZV9vcl9jYXJkLCBBc3NldENhcmQpOgogICAgICAgICAgICBjYXJkID0gbW9kZWxfbmFtZV9vcl9jYXJkCiAgICAgICAgZWxzZToKICAgICAgICAgICAgY2FyZCA9IHNlbGYuYXNzZXRfc3RvcmUucmV0cmlldmVfY2FyZChtb2RlbF9uYW1lX29yX2NhcmQpCgogICAgICAgIHVyaSA9IGNhcmQuZmllbGQoImNoYXJfdG9rZW5pemVyIikuYXNfdXJpKCkKCiAgICAgICAgcGF0aG5hbWUgPSBzZWxmLmRvd25sb2FkX21hbmFnZXIuZG93bmxvYWRfdG9rZW5pemVyKAogICAgICAgICAgICB1cmksIGNhcmQubmFtZSwgZm9yY2U9Zm9yY2UsIHByb2dyZXNzPXByb2dyZXNzCiAgICAgICAgKQoKICAgICAgICByZXR1cm4gQ2hhclRva2VuaXplcihwYXRobmFtZSkKCgpsb2FkX3VuaXR5X2NoYXJfdG9rZW5pemVyID0gVW5pdFlDaGFyVG9rZW5pemVyTG9hZGVyKGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyKQo='),
    ('seamless/build/lib/seamless_communication/models/unity/model.py', ''),
    ('seamless/build/lib/seamless_communication/models/unity/film.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5ubi5wcm9qZWN0aW9uIGltcG9ydCBMaW5lYXIKZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERhdGFUeXBlLCBEZXZpY2UKZnJvbSB0b3JjaCBpbXBvcnQgVGVuc29yCmZyb20gdG9yY2gubm4gaW1wb3J0IE1vZHVsZSwgUGFyYW1ldGVyCgoKY2xhc3MgRmlMTShNb2R1bGUpOgogICAgIiIiCiAgICBBIEZlYXR1cmUtd2lzZSBMaW5lYXIgTW9kdWxhdGlvbiBMYXllciBmcm9tCiAgICAnRmlMTTogVmlzdWFsIFJlYXNvbmluZyB3aXRoIGEgR2VuZXJhbCBDb25kaXRpb25pbmcgTGF5ZXInCiAgICAiIiIKCiAgICBwcm9qOiBMaW5lYXIKICAgIHNfZ2FtbWE6IFBhcmFtZXRlcgogICAgc19iZXRhOiBQYXJhbWV0ZXIKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBjb25kX2RpbTogaW50LAogICAgICAgIGVtYmVkX2RpbTogaW50LAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQoKICAgICAgICBzZWxmLnByb2ogPSBMaW5lYXIoCiAgICAgICAgICAgIGNvbmRfZGltLCAyICogZW1iZWRfZGltLCBiaWFzPVRydWUsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlCiAgICAgICAgKQoKICAgICAgICBzZWxmLnNfZ2FtbWEgPSBQYXJhbWV0ZXIoCiAgICAgICAgICAgIHRvcmNoLm9uZXMoCiAgICAgICAgICAgICAgICAxLAogICAgICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgICAgIGR0eXBlPWR0eXBlLAogICAgICAgICAgICApLAogICAgICAgICAgICByZXF1aXJlc19ncmFkPVRydWUsCiAgICAgICAgKQoKICAgICAgICBzZWxmLnNfYmV0YSA9IFBhcmFtZXRlcigKICAgICAgICAgICAgdG9yY2gub25lcygKICAgICAgICAgICAgICAgIDEsCiAgICAgICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIHJlcXVpcmVzX2dyYWQ9VHJ1ZSwKICAgICAgICApCgogICAgZGVmIGZvcndhcmQoc2VsZiwgeDogVGVuc29yLCBjb25kX2VtYnM6IFRlbnNvcikgLT4gVGVuc29yOgogICAgICAgICIiIgogICAgICAgIHggLS0gW0IsIFQsIEhdCiAgICAgICAgY29uZF9lbWIgLS0gW0IsIDEsIENdCiAgICAgICAgIiIiCiAgICAgICAgIyBnZXQgdHJhaW5hYmxlIGdhbW1hLCBiZXRhCiAgICAgICAgZ2FtbWFzLCBiZXRhcyA9IHNlbGYucHJvaihjb25kX2VtYnMpLmNodW5rKDIsIGRpbT0tMSkgICMgQiB4IDEgeCBICgogICAgICAgICMgYXBwbHkgZmlsbQogICAgICAgIGdhbW1hcyA9IHNlbGYuc19nYW1tYSAqIGdhbW1hcy5leHBhbmRfYXMoeCkKICAgICAgICBiZXRhcyA9IHNlbGYuc19iZXRhICogYmV0YXMuZXhwYW5kX2FzKHgpCgogICAgICAgIHJldHVybiAoZ2FtbWFzICsgMS4wKSAqIHggKyBiZXRhcyAgIyB0eXBlOiBpZ25vcmVbbm8tYW55LXJldHVybl0K'),
    ('seamless/build/lib/seamless_communication/models/unity/t2u_builder.py', ''),
    ('seamless/build/lib/seamless_communication/models/unity/fft_decoder_layer.py', ''),
    ('seamless/build/lib/seamless_communication/models/monotonic_decoder/p_choose.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIGZpbmFsCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5ubi5wcm9qZWN0aW9uIGltcG9ydCBMaW5lYXIKZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERhdGFUeXBlLCBEZXZpY2UsIGZpbmFsb3ZlcnJpZGUKZnJvbSB0b3JjaCBpbXBvcnQgVGVuc29yCmZyb20gdG9yY2gubm4gaW1wb3J0IEF2Z1Bvb2wxZCwgTW9kdWxlLCBNb2R1bGVMaXN0LCBSZUxVCmZyb20gdG9yY2gubm4ucGFyYW1ldGVyIGltcG9ydCBQYXJhbWV0ZXIKCgpjbGFzcyBFbmVyZ3lQcm9qZWN0aW9uKE1vZHVsZSk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBtb2RlbF9kaW06IGludCwKICAgICAgICBudW1fbGF5ZXJzOiBpbnQsCiAgICAgICAgYmlhczogYm9vbCA9IFRydWUsCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICAgICAgaWYgbnVtX2xheWVycyA8IDE6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoCiAgICAgICAgICAgICAgICBmIkludmFsaWQgYG51bV9sYXllcnNgOiB7bnVtX2xheWVyc30gZm9yIEVuZXJneVByb2plY3Rpb25MYXllci4iCiAgICAgICAgICAgICkKCiAgICAgICAgc2VsZi5sYXllcnMgPSBNb2R1bGVMaXN0KCkKCiAgICAgICAgZm9yIF8gaW4gcmFuZ2UobnVtX2xheWVycyk6CiAgICAgICAgICAgIHNlbGYubGF5ZXJzLmFwcGVuZCgKICAgICAgICAgICAgICAgIExpbmVhcihtb2RlbF9kaW0sIG1vZGVsX2RpbSwgYmlhcywgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpCiAgICAgICAgICAgICkKICAgICAgICAgICAgc2VsZi5sYXllcnMuYXBwZW5kKFJlTFUoKSkKCiAgICBkZWYgZm9yd2FyZChzZWxmLCBzZXFzOiBUZW5zb3IpIC0+IFRlbnNvcjoKICAgICAgICBmb3IgbGF5ZXIgaW4gc2VsZi5sYXllcnM6CiAgICAgICAgICAgIHNlcXMgPSBsYXllcihzZXFzKQogICAgICAgIHJldHVybiBzZXFzCgoKQGZpbmFsCmNsYXNzIFBDaG9vc2VMYXllcihNb2R1bGUpOgogICAgIiIiUmVwcmVzZW50cyBhIFBDaG9vc2UgbGF5ZXIuIiIiCgogICAgbW9kZWxfZGltOiBpbnQKICAgIG51bV9oZWFkczogaW50CiAgICBlbmVyZ3lfYmlhczogUGFyYW1ldGVyCiAgICBtb25vdG9uaWNfdGVtcGVyYXR1cmU6IGZsb2F0CiAgICBxX2VuZXJneV9wcm9qOiBFbmVyZ3lQcm9qZWN0aW9uCiAgICBrX2VuZXJneV9wcm9qOiBFbmVyZ3lQcm9qZWN0aW9uCiAgICBrZXlzX3Bvb2xpbmc6IEF2Z1Bvb2wxZAoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIG1vZGVsX2RpbTogaW50LAogICAgICAgIG51bV9oZWFkczogaW50LAogICAgICAgIGVuZXJneV9iaWFzX3ZhbHVlOiBmbG9hdCwKICAgICAgICBtb25vdG9uaWNfdGVtcGVyYXR1cmU6IGZsb2F0LAogICAgICAgIG51bV9tb25vdG9uaWNfZW5lcmd5X2xheWVyczogaW50LAogICAgICAgIHByZV9kZWNpc2lvbl9yYXRpbzogaW50LAogICAgICAgICosCiAgICAgICAgYmlhczogYm9vbCA9IFRydWUsCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gbW9kZWxfZGltOgogICAgICAgICAgICBUaGUgZGltZW5zaW9uYWxpdHkgb2YgdGhlIG1vZGVsLgogICAgICAgIDpwYXJhbSBudW1faGVhZHM6CiAgICAgICAgICAgIFRoZSBudW1iZXIgb2YgYXR0ZW50aW9uIGhlYWRzLgogICAgICAgIDpwYXJhbSBiaWFzOgogICAgICAgICAgICBJZiBgYFRydWVgYCwgcXVlcnksIGtleSBlbmVyZ3kgcHJvamVjdGlvbiBsYXllcnMgbGVhcm4gYW4KICAgICAgICAgICAgYWRkaXRpdmUgYmlhcy4KICAgICAgICAiIiIKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICAgICAgc2VsZi5tb2RlbF9kaW0gPSBtb2RlbF9kaW0KICAgICAgICBzZWxmLm51bV9oZWFkcyA9IG51bV9oZWFkcwoKICAgICAgICBpZiBlbmVyZ3lfYmlhc192YWx1ZSAhPSAwLjA6CiAgICAgICAgICAgIHNlbGYuZW5lcmd5X2JpYXMgPSBQYXJhbWV0ZXIoCiAgICAgICAgICAgICAgICB0b3JjaC5mdWxsKFsxXSwgZW5lcmd5X2JpYXNfdmFsdWUsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlKQogICAgICAgICAgICApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5yZWdpc3Rlcl9tb2R1bGUoImVuZXJneV9iaWFzIiwgTm9uZSkKCiAgICAgICAgc2VsZi5tb25vdG9uaWNfdGVtcGVyYXR1cmUgPSBtb25vdG9uaWNfdGVtcGVyYXR1cmUKCiAgICAgICAgaWYgbnVtX21vbm90b25pY19lbmVyZ3lfbGF5ZXJzIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIk51bWJlciBvZiBtb25vdG9uaWMgZW5lcmd5IGxheWVycyBtdXN0IGJlID4gMC4iKQoKICAgICAgICBzZWxmLnFfZW5lcmd5X3Byb2ogPSBFbmVyZ3lQcm9qZWN0aW9uKAogICAgICAgICAgICBzZWxmLm1vZGVsX2RpbSwKICAgICAgICAgICAgbnVtX21vbm90b25pY19lbmVyZ3lfbGF5ZXJzLAogICAgICAgICAgICBiaWFzLAogICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1kdHlwZSwKICAgICAgICApCiAgICAgICAgc2VsZi5rX2VuZXJneV9wcm9qID0gRW5lcmd5UHJvamVjdGlvbigKICAgICAgICAgICAgc2VsZi5tb2RlbF9kaW0sCiAgICAgICAgICAgIG51bV9tb25vdG9uaWNfZW5lcmd5X2xheWVycywKICAgICAgICAgICAgYmlhcywKICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICAgICAgKQoKICAgICAgICBzZWxmLmtleXNfcG9vbGluZyA9IEF2Z1Bvb2wxZCgKICAgICAgICAgICAga2VybmVsX3NpemU9cHJlX2RlY2lzaW9uX3JhdGlvLAogICAgICAgICAgICBzdHJpZGU9cHJlX2RlY2lzaW9uX3JhdGlvLAogICAgICAgICAgICBjZWlsX21vZGU9VHJ1ZSwKICAgICAgICApCgogICAgQGZpbmFsb3ZlcnJpZGUKICAgIGRlZiBmb3J3YXJkKHNlbGYsIHNlcXM6IFRlbnNvciwga2V5czogVGVuc29yKSAtPiBUZW5zb3I6CiAgICAgICAgcSA9IHNlbGYucV9lbmVyZ3lfcHJvaihzZXFzKQoKICAgICAgICAjIChOLCBTLCBNKSAtPiAoTiwgSCwgUywgSykKICAgICAgICBxID0gcS51bmZsYXR0ZW4oLTEsIChzZWxmLm51bV9oZWFkcywgLTEpKS50cmFuc3Bvc2UoMSwgMikKCiAgICAgICAgIyAoTiwgU19rdiwgTSkgLT4gKE4sIE0sIFNfa3YpIC0+IChOLCBNLCBTX3ApCiAgICAgICAgcG9vbGVkX2tleXMgPSBzZWxmLmtleXNfcG9vbGluZyhrZXlzLnRyYW5zcG9zZSgxLCAyKSkKCiAgICAgICAgIyAoTiwgTSwgU19wKSAtPiAoTiwgU19wLCBNKQogICAgICAgIHBvb2xlZF9rZXlzID0gcG9vbGVkX2tleXMudHJhbnNwb3NlKDEsIDIpCgogICAgICAgIGsgPSBzZWxmLmtfZW5lcmd5X3Byb2oocG9vbGVkX2tleXMpCgogICAgICAgICMgKE4sIFNfcCwgTSkgLT4gKE4sIEgsIFNfcCwgSykKICAgICAgICBrID0gay51bmZsYXR0ZW4oLTEsIChzZWxmLm51bV9oZWFkcywgLTEpKS50cmFuc3Bvc2UoMSwgMikKCiAgICAgICAgIyAoTiwgSCwgUywgSykgQCAoTiwgSCwgSywgU19wKSA9IChOLCBILCBTLCBTX3ApCiAgICAgICAgbW9ub3RvbmljX2VuZXJneSA9IHRvcmNoLm1hdG11bChxLCBrLnRyYW5zcG9zZSgtMSwgLTIpKQoKICAgICAgICBtb25vdG9uaWNfZW5lcmd5ID0gbW9ub3RvbmljX2VuZXJneSAqIChxLnNpemUoLTEpICoqIC0wLjUpCgogICAgICAgIGlmIHNlbGYuZW5lcmd5X2JpYXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIG1vbm90b25pY19lbmVyZ3kgKz0gc2VsZi5lbmVyZ3lfYmlhcwoKICAgICAgICAjIHBfY2hvb3NlOiAoTiwgSCwgUywgU19wKQogICAgICAgIHBfY2hvb3NlID0gdG9yY2guc2lnbW9pZChtb25vdG9uaWNfZW5lcmd5IC8gc2VsZi5tb25vdG9uaWNfdGVtcGVyYXR1cmUpCgogICAgICAgIHJldHVybiBwX2Nob29zZQo='),
    ('seamless/build/lib/seamless_communication/models/monotonic_decoder/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMubW9ub3RvbmljX2RlY29kZXIuYnVpbGRlciBpbXBvcnQgKAogICAgTW9ub3RvbmljRGVjb2RlckJ1aWxkZXIgYXMgTW9ub3RvbmljRGVjb2RlckJ1aWxkZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5idWlsZGVyIGltcG9ydCAoCiAgICBNb25vdG9uaWNEZWNvZGVyQ29uZmlnIGFzIE1vbm90b25pY0RlY29kZXJDb25maWcsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5tb2RlbCBpbXBvcnQgKAogICAgTW9ub3RvbmljRGVjb2Rlck1vZGVsIGFzIE1vbm90b25pY0RlY29kZXJNb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLmJ1aWxkZXIgaW1wb3J0ICgKICAgIGNyZWF0ZV9tb25vdG9uaWNfZGVjb2Rlcl9tb2RlbCBhcyBjcmVhdGVfbW9ub3RvbmljX2RlY29kZXJfbW9kZWwsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5idWlsZGVyIGltcG9ydCAoCiAgICBtb25vdG9uaWNfZGVjb2Rlcl9hcmNocyBhcyBtb25vdG9uaWNfZGVjb2Rlcl9hcmNocywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLmxvYWRlciBpbXBvcnQgKAogICAgbG9hZF9tb25vdG9uaWNfZGVjb2Rlcl9jb25maWcgYXMgbG9hZF9tb25vdG9uaWNfZGVjb2Rlcl9jb25maWcsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5sb2FkZXIgaW1wb3J0ICgKICAgIGxvYWRfbW9ub3RvbmljX2RlY29kZXJfbW9kZWwgYXMgbG9hZF9tb25vdG9uaWNfZGVjb2Rlcl9tb2RlbCwKKQo='),
    ('seamless/build/lib/seamless_communication/models/monotonic_decoder/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBNYXBwaW5nCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzIGltcG9ydCBDb25maWdMb2FkZXIsIE1vZGVsTG9hZGVyCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzLmNoZWNrcG9pbnQgaW1wb3J0IGNvbnZlcnRfZmFpcnNlcV9jaGVja3BvaW50Cgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLmJ1aWxkZXIgaW1wb3J0ICgKICAgIE1vbm90b25pY0RlY29kZXJDb25maWcsCiAgICBjcmVhdGVfbW9ub3RvbmljX2RlY29kZXJfbW9kZWwsCiAgICBtb25vdG9uaWNfZGVjb2Rlcl9hcmNocywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLm1vZGVsIGltcG9ydCBNb25vdG9uaWNEZWNvZGVyTW9kZWwKCgpkZWYgY29udmVydF9tb25vdG9uaWNfY2hlY2twb2ludCgKICAgIGNoZWNrcG9pbnQ6IE1hcHBpbmdbc3RyLCBBbnldLCBjb25maWc6IE1vbm90b25pY0RlY29kZXJDb25maWcKKSAtPiBNYXBwaW5nW3N0ciwgQW55XToKICAgIHN0YXRlX2RpY3QgPSBjaGVja3BvaW50WyJtb2RlbCJdCgogICAgIyBDaGVjayBpZiB3ZSBoYXZlIGEgZmFpcnNlcTIgY2hlY2twb2ludC4KICAgIGlmICJ0ZXh0X2RlY29kZXIubGF5ZXJzLjAuc2VsZl9hdHRuLmtfcHJvai53ZWlnaHQiIGluIHN0YXRlX2RpY3Q6CiAgICAgICAgcmV0dXJuIGNoZWNrcG9pbnQKCiAgICBrZXlfbWFwID0gewogICAgICAgICMgZm10OiBvZmYKICAgICAgICByIl5kZWNvZGVyXC5lbWJlZF90b2tlbnNcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInRleHRfZGVjb2Rlcl9mcm9udGVuZC5lbWJlZC4iLAogICAgICAgIHIiXmRlY29kZXJcLmxheWVyc1wuKFswLTldKylcLnNlbGZfYXR0blwub3V0X3Byb2pcLiI6ICAgICAgICAgICAgICAgICAgIHIidGV4dF9kZWNvZGVyLmxheWVycy5cMS5zZWxmX2F0dG4ub3V0cHV0X3Byb2ouIiwKICAgICAgICByIl5kZWNvZGVyXC5sYXllcnNcLihbMC05XSspXC5zZWxmX2F0dG5cLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInRleHRfZGVjb2Rlci5sYXllcnMuXDEuc2VsZl9hdHRuLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuc2VsZl9hdHRuX2xheWVyX25vcm1cLiI6ICAgICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLnNlbGZfYXR0bl9sYXllcl9ub3JtLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZW5jb2Rlcl9hdHRuXC5vdXRfcHJvalwuIjogICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLmVuY29kZXJfZGVjb2Rlcl9hdHRuLm91dHB1dF9wcm9qLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZW5jb2Rlcl9hdHRuXC5lbmVyZ3lfYmlhcyI6ICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLnBfY2hvb3NlX2xheWVyLmVuZXJneV9iaWFzIiwKICAgICAgICByIl5kZWNvZGVyXC5sYXllcnNcLihbMC05XSspXC5lbmNvZGVyX2F0dG5cLnNvdXJjZV9lbmVyZ3lfbGF5ZXJcLiI6ICAgICByInRleHRfZGVjb2Rlci5sYXllcnMuXDEucF9jaG9vc2VfbGF5ZXIua19lbmVyZ3lfcHJvai4iLAogICAgICAgIHIiXmRlY29kZXJcLmxheWVyc1wuKFswLTldKylcLmVuY29kZXJfYXR0blwudGFyZ2V0X2VuZXJneV9sYXllclwuIjogICAgIHIidGV4dF9kZWNvZGVyLmxheWVycy5cMS5wX2Nob29zZV9sYXllci5xX2VuZXJneV9wcm9qLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZW5jb2Rlcl9hdHRuXC4iOiAgICAgICAgICAgICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLmVuY29kZXJfZGVjb2Rlcl9hdHRuLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZW5jb2Rlcl9hdHRuX2xheWVyX25vcm1cLiI6ICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLmVuY29kZXJfZGVjb2Rlcl9hdHRuX2xheWVyX25vcm0uIiwKICAgICAgICByIl5kZWNvZGVyXC5sYXllcnNcLihbMC05XSspXC5mYzFcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInRleHRfZGVjb2Rlci5sYXllcnMuXDEuZmZuLmlubmVyX3Byb2ouIiwKICAgICAgICByIl5kZWNvZGVyXC5sYXllcnNcLihbMC05XSspXC5mYzJcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInRleHRfZGVjb2Rlci5sYXllcnMuXDEuZmZuLm91dHB1dF9wcm9qLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZmluYWxfbGF5ZXJfbm9ybVwuIjogICAgICAgICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJzLlwxLmZmbl9sYXllcl9ub3JtLiIsCiAgICAgICAgciJeZGVjb2RlclwubGF5ZXJfbm9ybVwuIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciJ0ZXh0X2RlY29kZXIubGF5ZXJfbm9ybS4iLAogICAgICAgIHIiXmRlY29kZXJcLm91dHB1dF9wcm9qZWN0aW9uXC4iOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIiZmluYWxfcHJvai4iLAogICAgICAgICMgZm10OiBvbgogICAgfQoKICAgICMgQ29udmVydCB0byBmYWlyc2VxMi4KICAgIGNoZWNrcG9pbnQgPSBjb252ZXJ0X2ZhaXJzZXFfY2hlY2twb2ludChjaGVja3BvaW50LCBrZXlfbWFwKQoKICAgIHN0YXRlX2RpY3QgPSBjaGVja3BvaW50WyJtb2RlbCJdCgogICAgZW1iZWRzID0gc3RhdGVfZGljdFsiZmluYWxfcHJvai53ZWlnaHQiXQoKICAgICMgZmFpcnNlcSBoYWQgYSBidWcgdGhhdCBhY2NpZGVudGFsbHkgaW50cm9kdWNlZCBhIGR1bW15IHRva2VuIGluIHRoZQogICAgIyBlbWJlZGRpbmcgdGFibGUgb2YgTkxMQi0xMDAuIFdlIGp1c3QgZGlzY2FyZCBpdC4KICAgIGlmIGVtYmVkcy5zaXplKDApID09IDI1NjEwMzogICMgbWVhbnMgTkxMQi0xMDAKICAgICAgICBlbWJlZHMgPSBlbWJlZHNbOi0xXQoKICAgICAgICBzdGF0ZV9kaWN0WyJmaW5hbF9wcm9qLndlaWdodCJdID0gZW1iZWRzCgogICAgIyBmYWlyc2VxIGNoZWNrcG9pbnRzIGhhdmUgZHVwbGljYXRlIGVtYmVkZGluZyB3ZWlnaHRzLiBFbnN1cmUgdGhhdCB3ZQogICAgIyB1c2UgYSBzaW5nbGUgZW1iZWRkaW5nIHRhYmxlIGluIGZhaXJzZXEyLgogICAgc3RhdGVfZGljdFsidGV4dF9kZWNvZGVyX2Zyb250ZW5kLmVtYmVkLndlaWdodCJdID0gZW1iZWRzCgogICAgIyBUaGUgZW1iZWRkaW5nIHBvc2l0aW9ucyBvZiB0aGUgY29udHJvbCBzeW1ib2xzIGluIGZhaXJzZXEncyBkaWN0IGRvCiAgICAjIG5vdCBtYXRjaCB0aGUgU2VudGVuY2VQaWVjZSBtb2RlbCBvZiB0aGUgdG9rZW5pemVyLgogICAgd2l0aCB0b3JjaC5pbmZlcmVuY2VfbW9kZSgpOgogICAgICAgICMgKEJPUywgUEFELCBFT1MsIFVOSykgLT4gKFBBRCwgVU5LLCBCT1MsIEVPUykKICAgICAgICBlbWJlZHNbWzAsIDEsIDIsIDNdXSA9IGVtYmVkc1tbMSwgMywgMCwgMl1dCgogICAgcmV0dXJuIGNoZWNrcG9pbnQKCgpsb2FkX21vbm90b25pY19kZWNvZGVyX2NvbmZpZyA9IENvbmZpZ0xvYWRlcltNb25vdG9uaWNEZWNvZGVyQ29uZmlnXSgKICAgIGFzc2V0X3N0b3JlLCBtb25vdG9uaWNfZGVjb2Rlcl9hcmNocwopCgoKbG9hZF9tb25vdG9uaWNfZGVjb2Rlcl9tb2RlbCA9IE1vZGVsTG9hZGVyWwogICAgTW9ub3RvbmljRGVjb2Rlck1vZGVsLCBNb25vdG9uaWNEZWNvZGVyQ29uZmlnCl0oCiAgICBhc3NldF9zdG9yZSwKICAgIGRvd25sb2FkX21hbmFnZXIsCiAgICBsb2FkX21vbm90b25pY19kZWNvZGVyX2NvbmZpZywKICAgIGNyZWF0ZV9tb25vdG9uaWNfZGVjb2Rlcl9tb2RlbCwKICAgIGNvbnZlcnRfbW9ub3RvbmljX2NoZWNrcG9pbnQsCiAgICByZXN0cmljdF9jaGVja3BvaW50cz1GYWxzZSwKKQo='),
    ('seamless/build/lib/seamless_communication/models/monotonic_decoder/builder.py', ''),
    ('seamless/build/lib/seamless_communication/models/monotonic_decoder/monotonic_decoder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgSXRlcmFibGUsIExpc3QsIE9wdGlvbmFsLCBUdXBsZSwgZmluYWwKCmltcG9ydCB0b3JjaApmcm9tIGZhaXJzZXEyLm5uLmluY3JlbWVudGFsX3N0YXRlIGltcG9ydCBJbmNyZW1lbnRhbFN0YXRlQmFnCmZyb20gZmFpcnNlcTIubm4ubW9kdWxlX2xpc3QgaW1wb3J0IE1vZHVsZUxpc3QKZnJvbSBmYWlyc2VxMi5ubi5ub3JtYWxpemF0aW9uIGltcG9ydCBMYXllck5vcm0KZnJvbSBmYWlyc2VxMi5ubi5wYWRkaW5nIGltcG9ydCBQYWRkaW5nTWFzawpmcm9tIGZhaXJzZXEyLm5uLnRyYW5zZm9ybWVyIGltcG9ydCAoCiAgICBBdHRlbnRpb25NYXNrRmFjdG9yeSwKICAgIENhdXNhbEF0dGVudGlvbk1hc2tGYWN0b3J5LAogICAgY3JlYXRlX3N0YW5kYXJkX2xheWVyX25vcm0sCikKZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERhdGFUeXBlLCBEZXZpY2UsIGZpbmFsb3ZlcnJpZGUKZnJvbSB0b3JjaCBpbXBvcnQgVGVuc29yCmZyb20gdG9yY2gubm4gaW1wb3J0IE1vZHVsZQoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5tb25vdG9uaWNfZGVjb2Rlci5tb25vdG9uaWNfZGVjb2Rlcl9sYXllciBpbXBvcnQgKAogICAgTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyTGF5ZXIsCikKCgpAZmluYWwKY2xhc3MgTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyKE1vZHVsZSk6CiAgICAiIiJSZXByZXNlbnRzIGEgTW9ub3RvbmljIFRyYW5zZm9ybWVyIGRlY29kZXIuIiIiCgogICAgbW9kZWxfZGltOiBpbnQKICAgIHNlbGZfYXR0bl9tYXNrX2ZhY3Rvcnk6IEF0dGVudGlvbk1hc2tGYWN0b3J5CiAgICBsYXllcnM6IE1vZHVsZUxpc3QKICAgIGxheWVyX25vcm06IExheWVyTm9ybQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGxheWVyczogSXRlcmFibGVbTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyTGF5ZXJdLAogICAgICAgICosCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gbGF5ZXJzOgogICAgICAgICAgICBUaGUgZGVjb2RlciBsYXllcnMuCiAgICAgICAgIiIiCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIGxheWVyX2xpc3QgPSBNb2R1bGVMaXN0KGxheWVycykKCiAgICAgICAgaWYgbm90IGxheWVyX2xpc3Q6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImBsYXllcnNgIG11c3QgYmUgbm9uLWVtcHR5LiIpCgogICAgICAgIHNlbGYubW9kZWxfZGltID0gbGF5ZXJfbGlzdFswXS5tb2RlbF9kaW0KCiAgICAgICAgc2VsZi5zZWxmX2F0dG5fbWFza19mYWN0b3J5ID0gQ2F1c2FsQXR0ZW50aW9uTWFza0ZhY3RvcnkoKQoKICAgICAgICBzZWxmLmxheWVycyA9IGxheWVyX2xpc3QKCiAgICAgICAgc2VsZi5sYXllcl9ub3JtID0gY3JlYXRlX3N0YW5kYXJkX2xheWVyX25vcm0oCiAgICAgICAgICAgIHNlbGYubW9kZWxfZGltLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZQogICAgICAgICkKCiAgICBAZmluYWxvdmVycmlkZQogICAgZGVmIGZvcndhcmQoCiAgICAgICAgc2VsZiwKICAgICAgICBzZXFzOiBUZW5zb3IsCiAgICAgICAgcGFkZGluZ19tYXNrOiBPcHRpb25hbFtQYWRkaW5nTWFza10sCiAgICAgICAgZW5jb2Rlcl9vdXRwdXQ6IE9wdGlvbmFsW1RlbnNvcl0gPSBOb25lLAogICAgICAgIGVuY29kZXJfcGFkZGluZ19tYXNrOiBPcHRpb25hbFtQYWRkaW5nTWFza10gPSBOb25lLAogICAgICAgICosCiAgICAgICAgc3RhdGVfYmFnOiBPcHRpb25hbFtJbmNyZW1lbnRhbFN0YXRlQmFnXSA9IE5vbmUsCiAgICApIC0+IFR1cGxlW1RlbnNvciwgT3B0aW9uYWxbUGFkZGluZ01hc2tdLCBUZW5zb3JdOgogICAgICAgIHNlbGZfYXR0bl9tYXNrID0gc2VsZi5zZWxmX2F0dG5fbWFza19mYWN0b3J5KAogICAgICAgICAgICBzZXFzLCBrZXlzPXNlcXMsIHRyYWluaW5nPXNlbGYudHJhaW5pbmcsIHN0YXRlX2JhZz1zdGF0ZV9iYWcKICAgICAgICApCgogICAgICAgIHBfY2hvb3NlX2xpc3Q6IExpc3RbVGVuc29yXSA9IFtdCgogICAgICAgIGZvciBsYXllciBpbiBzZWxmLmxheWVycy5kcm9wX2l0ZXIoKToKICAgICAgICAgICAgc2VxcywgcGFkZGluZ19tYXNrLCBwX2Nob29zZSA9IGxheWVyKAogICAgICAgICAgICAgICAgc2VxcywKICAgICAgICAgICAgICAgIHBhZGRpbmdfbWFzaywKICAgICAgICAgICAgICAgIHNlbGZfYXR0bl9tYXNrLAogICAgICAgICAgICAgICAgZW5jb2Rlcl9vdXRwdXQsCiAgICAgICAgICAgICAgICBlbmNvZGVyX3BhZGRpbmdfbWFzaywKICAgICAgICAgICAgICAgIHN0YXRlX2JhZz1zdGF0ZV9iYWcsCiAgICAgICAgICAgICkKICAgICAgICAgICAgcF9jaG9vc2VfbGlzdC5hcHBlbmQocF9jaG9vc2UpCgogICAgICAgIHNlcXMgPSBzZWxmLmxheWVyX25vcm0oc2VxcykKCiAgICAgICAgcF9jaG9vc2UgPSB0b3JjaC5jYXQocF9jaG9vc2VfbGlzdCwgZGltPTApCgogICAgICAgIHBfY2hvb3NlID0gcF9jaG9vc2UuZmxhdHRlbigwLCAxKQoKICAgICAgICByZXR1cm4gc2VxcywgcGFkZGluZ19tYXNrLCBwX2Nob29zZQo='),
    ('seamless/build/lib/seamless_communication/models/monotonic_decoder/model.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIFR1cGxlLCBmaW5hbAoKZnJvbSBmYWlyc2VxMi5tb2RlbHMudHJhbnNmb3JtZXIuZnJvbnRlbmQgaW1wb3J0IFRyYW5zZm9ybWVyRnJvbnRlbmQKZnJvbSBmYWlyc2VxMi5ubi5pbmNyZW1lbnRhbF9zdGF0ZSBpbXBvcnQgSW5jcmVtZW50YWxTdGF0ZUJhZwpmcm9tIGZhaXJzZXEyLm5uLnBhZGRpbmcgaW1wb3J0IFBhZGRpbmdNYXNrCmZyb20gZmFpcnNlcTIubm4ucHJvamVjdGlvbiBpbXBvcnQgUHJvamVjdGlvbgpmcm9tIG92ZXJyaWRlcyBpbXBvcnQgZmluYWwgYXMgZmluYWxvdmVycmlkZQpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKZnJvbSB0b3JjaC5ubiBpbXBvcnQgTW9kdWxlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLm1vbm90b25pY19kZWNvZGVyIGltcG9ydCAoCiAgICBNb25vdG9uaWNUcmFuc2Zvcm1lckRlY29kZXIsCikKCgpAZmluYWwKY2xhc3MgTW9ub3RvbmljRGVjb2Rlck1vZGVsKE1vZHVsZSk6CiAgICB0ZXh0X2RlY29kZXJfZnJvbnRlbmQ6IFRyYW5zZm9ybWVyRnJvbnRlbmQKICAgIHRleHRfZGVjb2RlcjogTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyCiAgICBmaW5hbF9wcm9qOiBQcm9qZWN0aW9uCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgdGV4dF9kZWNvZGVyX2Zyb250ZW5kOiBUcmFuc2Zvcm1lckZyb250ZW5kLAogICAgICAgIHRleHRfZGVjb2RlcjogTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyLAogICAgICAgIGZpbmFsX3Byb2o6IFByb2plY3Rpb24sCiAgICApIC0+IE5vbmU6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIHNlbGYudGV4dF9kZWNvZGVyX2Zyb250ZW5kID0gdGV4dF9kZWNvZGVyX2Zyb250ZW5kCiAgICAgICAgc2VsZi50ZXh0X2RlY29kZXIgPSB0ZXh0X2RlY29kZXIKICAgICAgICBzZWxmLmZpbmFsX3Byb2ogPSBmaW5hbF9wcm9qCgogICAgQGZpbmFsb3ZlcnJpZGUKICAgIGRlZiBkZWNvZGUoCiAgICAgICAgc2VsZiwKICAgICAgICBzZXFzOiBUZW5zb3IsCiAgICAgICAgcGFkZGluZ19tYXNrOiBPcHRpb25hbFtQYWRkaW5nTWFza10sCiAgICAgICAgZW5jb2Rlcl9vdXRwdXQ6IFRlbnNvciwKICAgICAgICBlbmNvZGVyX3BhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdLAogICAgICAgICosCiAgICAgICAgc3RhdGVfYmFnOiBPcHRpb25hbFtJbmNyZW1lbnRhbFN0YXRlQmFnXSA9IE5vbmUsCiAgICApIC0+IFR1cGxlW1RlbnNvciwgT3B0aW9uYWxbUGFkZGluZ01hc2tdLCBUZW5zb3JdOgogICAgICAgIHNlcXMsIHBhZGRpbmdfbWFzayA9IHNlbGYudGV4dF9kZWNvZGVyX2Zyb250ZW5kKAogICAgICAgICAgICBzZXFzLCBwYWRkaW5nX21hc2ssIHN0YXRlX2JhZz1zdGF0ZV9iYWcKICAgICAgICApCgogICAgICAgIHJldHVybiBzZWxmLnRleHRfZGVjb2RlciggICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCiAgICAgICAgICAgIHNlcXMsCiAgICAgICAgICAgIHBhZGRpbmdfbWFzaywKICAgICAgICAgICAgZW5jb2Rlcl9vdXRwdXQsCiAgICAgICAgICAgIGVuY29kZXJfcGFkZGluZ19tYXNrLAogICAgICAgICAgICBzdGF0ZV9iYWc9c3RhdGVfYmFnLAogICAgICAgICkKCiAgICBAZmluYWxvdmVycmlkZQogICAgZGVmIHByb2plY3Qoc2VsZiwgZGVjb2Rlcl9vdXRwdXQ6IFRlbnNvcikgLT4gVGVuc29yOgogICAgICAgIGxvZ2l0cyA9IHNlbGYuZmluYWxfcHJvaihkZWNvZGVyX291dHB1dCkKCiAgICAgICAgcmV0dXJuIGxvZ2l0cyAgIyB0eXBlOiBpZ25vcmVbbm8tYW55LXJldHVybl0K'),
    ('seamless/build/lib/seamless_communication/models/monotonic_decoder/monotonic_decoder_layer.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIFR1cGxlLCBmaW5hbAoKZnJvbSBmYWlyc2VxMi5ubi5pbmNyZW1lbnRhbF9zdGF0ZSBpbXBvcnQgSW5jcmVtZW50YWxTdGF0ZUJhZwpmcm9tIGZhaXJzZXEyLm5uLm5vcm1hbGl6YXRpb24gaW1wb3J0IExheWVyTm9ybQpmcm9tIGZhaXJzZXEyLm5uLnBhZGRpbmcgaW1wb3J0IFBhZGRpbmdNYXNrCmZyb20gZmFpcnNlcTIubm4udHJhbnNmb3JtZXIgaW1wb3J0ICgKICAgIEF0dGVudGlvbk1hc2ssCiAgICBGZWVkRm9yd2FyZE5ldHdvcmssCiAgICBNdWx0aWhlYWRBdHRlbnRpb24sCiAgICBjcmVhdGVfc3RhbmRhcmRfbGF5ZXJfbm9ybSwKKQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZSwgZmluYWxvdmVycmlkZQpmcm9tIHRvcmNoIGltcG9ydCBUZW5zb3IKZnJvbSB0b3JjaC5ubiBpbXBvcnQgRHJvcG91dCwgTW9kdWxlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLm1vbm90b25pY19kZWNvZGVyLnBfY2hvb3NlIGltcG9ydCBQQ2hvb3NlTGF5ZXIKCgpAZmluYWwKY2xhc3MgTW9ub3RvbmljVHJhbnNmb3JtZXJEZWNvZGVyTGF5ZXIoTW9kdWxlKToKICAgICIiIlJlcHJlc2VudHMgYSBNb25vdG9uaWMgVHJhbnNmb3JtZXIgZGVjb2RlciBsYXllci4iIiIKCiAgICBzZWxmX2F0dG46IE11bHRpaGVhZEF0dGVudGlvbgogICAgc2VsZl9hdHRuX2Ryb3BvdXQ6IE9wdGlvbmFsW0Ryb3BvdXRdCiAgICBzZWxmX2F0dG5fbGF5ZXJfbm9ybTogTGF5ZXJOb3JtCiAgICBlbmNvZGVyX2RlY29kZXJfYXR0bjogTXVsdGloZWFkQXR0ZW50aW9uCiAgICBlbmNvZGVyX2RlY29kZXJfYXR0bl9kcm9wb3V0OiBPcHRpb25hbFtEcm9wb3V0XQogICAgZW5jb2Rlcl9kZWNvZGVyX2F0dG5fbGF5ZXJfbm9ybTogTGF5ZXJOb3JtCiAgICBwX2Nob29zZV9sYXllcjogUENob29zZUxheWVyCiAgICBmZm46IEZlZWRGb3J3YXJkTmV0d29yawogICAgZmZuX2Ryb3BvdXQ6IE9wdGlvbmFsW0Ryb3BvdXRdCiAgICBmZm5fbGF5ZXJfbm9ybTogTGF5ZXJOb3JtCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgc2VsZl9hdHRuOiBNdWx0aWhlYWRBdHRlbnRpb24sCiAgICAgICAgZW5jb2Rlcl9kZWNvZGVyX2F0dG46IE11bHRpaGVhZEF0dGVudGlvbiwKICAgICAgICBwX2Nob29zZV9sYXllcjogUENob29zZUxheWVyLAogICAgICAgIGZmbjogRmVlZEZvcndhcmROZXR3b3JrLAogICAgICAgICosCiAgICAgICAgZHJvcG91dF9wOiBmbG9hdCA9IDAuMSwKICAgICAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAogICAgKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIDpwYXJhbSBzZWxmX2F0dG46CiAgICAgICAgICAgIFRoZSBzZWxmIGF0dGVudGlvbiBsYXllci4KICAgICAgICA6cGFyYW0gZW5jb2Rlcl9kZWNvZGVyX2F0dG46CiAgICAgICAgICAgIFRoZSBlbmNvZGVyLWRlY29kZXIgYXR0ZW50aW9uIGxheWVyLgogICAgICAgIDpwYXJhbSBmZm46CiAgICAgICAgICAgIFRoZSBmZWVkLWZvcndhcmQgbmV0d29yay4KICAgICAgICA6cGFyYW0gZHJvcG91dF9wOgogICAgICAgICAgICBUaGUgZHJvcG91dCBwcm9iYWJpbGl0eSBvbiBvdXRwdXRzIG9mIHRoZSBhdHRlbnRpb24gbGF5ZXJzIGFuZCB0aGUKICAgICAgICAgICAgZmVlZC1mb3J3YXJkIG5ldHdvcmsuCiAgICAgICAgIiIiCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgIHNlbGYubW9kZWxfZGltID0gc2VsZl9hdHRuLm1vZGVsX2RpbQoKICAgICAgICBzZWxmX2F0dG5fbGF5ZXJfbm9ybSA9IGNyZWF0ZV9zdGFuZGFyZF9sYXllcl9ub3JtKAogICAgICAgICAgICBzZWxmLm1vZGVsX2RpbSwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUKICAgICAgICApCgogICAgICAgIHNlbGYuc2VsZl9hdHRuX2xheWVyX25vcm0gPSBzZWxmX2F0dG5fbGF5ZXJfbm9ybQoKICAgICAgICBzZWxmLnNlbGZfYXR0biA9IHNlbGZfYXR0bgoKICAgICAgICBpZiBkcm9wb3V0X3AgPiAwLjA6CiAgICAgICAgICAgIHNlbGYuc2VsZl9hdHRuX2Ryb3BvdXQgPSBEcm9wb3V0KGRyb3BvdXRfcCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnJlZ2lzdGVyX21vZHVsZSgic2VsZl9hdHRuX2Ryb3BvdXQiLCBOb25lKQoKICAgICAgICBlbmNvZGVyX2RlY29kZXJfYXR0bl9sYXllcl9ub3JtID0gY3JlYXRlX3N0YW5kYXJkX2xheWVyX25vcm0oCiAgICAgICAgICAgIHNlbGYubW9kZWxfZGltLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZQogICAgICAgICkKCiAgICAgICAgc2VsZi5lbmNvZGVyX2RlY29kZXJfYXR0bl9sYXllcl9ub3JtID0gZW5jb2Rlcl9kZWNvZGVyX2F0dG5fbGF5ZXJfbm9ybQoKICAgICAgICBzZWxmLmVuY29kZXJfZGVjb2Rlcl9hdHRuID0gZW5jb2Rlcl9kZWNvZGVyX2F0dG4KCiAgICAgICAgaWYgZHJvcG91dF9wID4gMC4wOgogICAgICAgICAgICBzZWxmLmVuY29kZXJfZGVjb2Rlcl9hdHRuX2Ryb3BvdXQgPSBEcm9wb3V0KGRyb3BvdXRfcCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnJlZ2lzdGVyX21vZHVsZSgiZW5jb2Rlcl9kZWNvZGVyX2F0dG5fZHJvcG91dCIsIE5vbmUpCgogICAgICAgIHNlbGYucF9jaG9vc2VfbGF5ZXIgPSBwX2Nob29zZV9sYXllcgoKICAgICAgICBmZm5fbGF5ZXJfbm9ybSA9IGNyZWF0ZV9zdGFuZGFyZF9sYXllcl9ub3JtKAogICAgICAgICAgICBzZWxmLm1vZGVsX2RpbSwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUKICAgICAgICApCgogICAgICAgIHNlbGYuZmZuX2xheWVyX25vcm0gPSBmZm5fbGF5ZXJfbm9ybQoKICAgICAgICBzZWxmLmZmbiA9IGZmbgoKICAgICAgICBpZiBkcm9wb3V0X3AgPiAwLjA6CiAgICAgICAgICAgIHNlbGYuZmZuX2Ryb3BvdXQgPSBEcm9wb3V0KGRyb3BvdXRfcCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnJlZ2lzdGVyX21vZHVsZSgiZmZuX2Ryb3BvdXQiLCBOb25lKQoKICAgIEBmaW5hbG92ZXJyaWRlCiAgICBkZWYgZm9yd2FyZCgKICAgICAgICBzZWxmLAogICAgICAgIHNlcXM6IFRlbnNvciwKICAgICAgICBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwKICAgICAgICBzZWxmX2F0dG5fbWFzazogT3B0aW9uYWxbQXR0ZW50aW9uTWFza10gPSBOb25lLAogICAgICAgIGVuY29kZXJfb3V0cHV0OiBPcHRpb25hbFtUZW5zb3JdID0gTm9uZSwKICAgICAgICBlbmNvZGVyX3BhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdID0gTm9uZSwKICAgICAgICAqLAogICAgICAgIHN0YXRlX2JhZzogT3B0aW9uYWxbSW5jcmVtZW50YWxTdGF0ZUJhZ10gPSBOb25lLAogICAgKSAtPiBUdXBsZVtUZW5zb3IsIE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwgVGVuc29yXToKICAgICAgICBzZXFzID0gc2VsZi5fZm9yd2FyZF9zZWxmX2F0dG4oc2VxcywgcGFkZGluZ19tYXNrLCBzZWxmX2F0dG5fbWFzaywgc3RhdGVfYmFnKQoKICAgICAgICBzZXFzLCBwX2Nob29zZSA9IHNlbGYuX2ZvcndhcmRfZW5jb2Rlcl9kZWNvZGVyX2F0dG4oCiAgICAgICAgICAgIHNlcXMsIHBhZGRpbmdfbWFzaywgZW5jb2Rlcl9vdXRwdXQsIGVuY29kZXJfcGFkZGluZ19tYXNrCiAgICAgICAgKQoKICAgICAgICBzZXFzID0gc2VsZi5fZm9yd2FyZF9mZm4oc2VxcykKCiAgICAgICAgcmV0dXJuIHNlcXMsIHBhZGRpbmdfbWFzaywgcF9jaG9vc2UKCiAgICBkZWYgX2ZvcndhcmRfc2VsZl9hdHRuKAogICAgICAgIHNlbGYsCiAgICAgICAgc2VxczogVGVuc29yLAogICAgICAgIHBhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdLAogICAgICAgIHNlbGZfYXR0bl9tYXNrOiBPcHRpb25hbFtBdHRlbnRpb25NYXNrXSwKICAgICAgICBzdGF0ZV9iYWc6IE9wdGlvbmFsW0luY3JlbWVudGFsU3RhdGVCYWddLAogICAgKSAtPiBUZW5zb3I6CiAgICAgICAgcmVzaWR1YWwgPSBzZXFzCgogICAgICAgIHNlcXMgPSBzZWxmLnNlbGZfYXR0bl9sYXllcl9ub3JtKHNlcXMpCgogICAgICAgIHNlcXMgPSBzZWxmLnNlbGZfYXR0bigKICAgICAgICAgICAgc2VxcywKICAgICAgICAgICAgcGFkZGluZ19tYXNrLAogICAgICAgICAgICBrZXlzPXNlcXMsCiAgICAgICAgICAgIGtleV9wYWRkaW5nX21hc2s9cGFkZGluZ19tYXNrLAogICAgICAgICAgICB2YWx1ZXM9c2VxcywKICAgICAgICAgICAgYXR0bl9tYXNrPXNlbGZfYXR0bl9tYXNrLAogICAgICAgICAgICBzdGF0ZV9iYWc9c3RhdGVfYmFnLAogICAgICAgICkKCiAgICAgICAgaWYgc2VsZi5zZWxmX2F0dG5fZHJvcG91dCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VxcyA9IHNlbGYuc2VsZl9hdHRuX2Ryb3BvdXQoc2VxcykKCiAgICAgICAgc2VxcyA9IHNlcXMgKyByZXNpZHVhbAoKICAgICAgICByZXR1cm4gc2VxcwoKICAgIGRlZiBfZm9yd2FyZF9lbmNvZGVyX2RlY29kZXJfYXR0bigKICAgICAgICBzZWxmLAogICAgICAgIHNlcXM6IFRlbnNvciwKICAgICAgICBwYWRkaW5nX21hc2s6IE9wdGlvbmFsW1BhZGRpbmdNYXNrXSwKICAgICAgICBlbmNvZGVyX291dHB1dDogT3B0aW9uYWxbVGVuc29yXSwKICAgICAgICBlbmNvZGVyX3BhZGRpbmdfbWFzazogT3B0aW9uYWxbUGFkZGluZ01hc2tdLAogICAgKSAtPiBUdXBsZVtUZW5zb3IsIFRlbnNvcl06CiAgICAgICAgaWYgZW5jb2Rlcl9vdXRwdXQgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgICJgZW5jb2Rlcl9vdXRwdXRgIG11c3Qgbm90IGJlIGBOb25lYCBmb3IgZW5jb2Rlci1kZWNvZGVyIGF0dGVudGlvbi4iCiAgICAgICAgICAgICkKCiAgICAgICAgcmVzaWR1YWwgPSBzZXFzCgogICAgICAgIHNlcXMgPSBzZWxmLmVuY29kZXJfZGVjb2Rlcl9hdHRuX2xheWVyX25vcm0oc2VxcykKCiAgICAgICAgcF9jaG9vc2UgPSBzZWxmLnBfY2hvb3NlX2xheWVyKHNlcXMsIGVuY29kZXJfb3V0cHV0KQoKICAgICAgICBzZXFzID0gc2VsZi5lbmNvZGVyX2RlY29kZXJfYXR0bigKICAgICAgICAgICAgc2VxcywKICAgICAgICAgICAgcGFkZGluZ19tYXNrLAogICAgICAgICAgICBlbmNvZGVyX291dHB1dCwKICAgICAgICAgICAgZW5jb2Rlcl9wYWRkaW5nX21hc2ssCiAgICAgICAgICAgIGVuY29kZXJfb3V0cHV0LAogICAgICAgICkKCiAgICAgICAgaWYgc2VsZi5lbmNvZGVyX2RlY29kZXJfYXR0bl9kcm9wb3V0IGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZXFzID0gc2VsZi5lbmNvZGVyX2RlY29kZXJfYXR0bl9kcm9wb3V0KHNlcXMpCgogICAgICAgIHNlcXMgPSBzZXFzICsgcmVzaWR1YWwKCiAgICAgICAgcmV0dXJuIHNlcXMsIHBfY2hvb3NlCgogICAgZGVmIF9mb3J3YXJkX2ZmbihzZWxmLCBzZXFzOiBUZW5zb3IpIC0+IFRlbnNvcjoKICAgICAgICByZXNpZHVhbCA9IHNlcXMKCiAgICAgICAgc2VxcyA9IHNlbGYuZmZuX2xheWVyX25vcm0oc2VxcykKCiAgICAgICAgc2VxcyA9IHNlbGYuZmZuKHNlcXMpCgogICAgICAgIGlmIHNlbGYuZmZuX2Ryb3BvdXQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlcXMgPSBzZWxmLmZmbl9kcm9wb3V0KHNlcXMpCgogICAgICAgIHNlcXMgPSBzZXFzICsgcmVzaWR1YWwKCiAgICAgICAgcmV0dXJuIHNlcXMK'),
    ('seamless/build/lib/seamless_communication/models/conformer_shaw/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmNvbmZvcm1lcl9zaGF3LmJ1aWxkZXIgaW1wb3J0ICgKICAgIENvbmZvcm1lclNoYXdFbmNvZGVyQnVpbGRlciBhcyBDb25mb3JtZXJTaGF3RW5jb2RlckJ1aWxkZXIsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5jb25mb3JtZXJfc2hhdy5idWlsZGVyIGltcG9ydCAoCiAgICBDb25mb3JtZXJTaGF3RW5jb2RlckNvbmZpZyBhcyBDb25mb3JtZXJTaGF3RW5jb2RlckNvbmZpZywKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmNvbmZvcm1lcl9zaGF3LmJ1aWxkZXIgaW1wb3J0ICgKICAgIGNvbmZvcm1lcl9zaGF3X2FyY2hzIGFzIGNvbmZvcm1lcl9zaGF3X2FyY2hzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuY29uZm9ybWVyX3NoYXcuYnVpbGRlciBpbXBvcnQgKAogICAgY3JlYXRlX2NvbmZvcm1lcl9zaGF3X21vZGVsIGFzIGNyZWF0ZV9jb25mb3JtZXJfc2hhd19tb2RlbCwKKQpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmNvbmZvcm1lcl9zaGF3LmxvYWRlciBpbXBvcnQgKAogICAgbG9hZF9jb25mb3JtZXJfc2hhd19tb2RlbCBhcyBsb2FkX2NvbmZvcm1lcl9zaGF3X21vZGVsLAopCg=='),
    ('seamless/build/lib/seamless_communication/models/conformer_shaw/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBNYXBwaW5nCgppbXBvcnQgdG9yY2gKCmZyb20gZmFpcnNlcTIuYXNzZXRzIGltcG9ydCBhc3NldF9zdG9yZSwgZG93bmxvYWRfbWFuYWdlcgpmcm9tIGZhaXJzZXEyLm1vZGVscy51dGlscyBpbXBvcnQgTW9kZWxMb2FkZXIKZnJvbSBmYWlyc2VxMi5tb2RlbHMudXRpbHMuY2hlY2twb2ludCBpbXBvcnQgY29udmVydF9mYWlyc2VxX2NoZWNrcG9pbnQKZnJvbSBmYWlyc2VxMi5tb2RlbHMud2F2MnZlYzIuYnVpbGRlciBpbXBvcnQgV2F2MlZlYzJDb25maWcKZnJvbSBmYWlyc2VxMi5tb2RlbHMud2F2MnZlYzIubG9hZGVyIGltcG9ydCBsb2FkX3dhdjJ2ZWMyX2NvbmZpZwpmcm9tIGZhaXJzZXEyLm1vZGVscy53YXYydmVjMi5tb2RlbCBpbXBvcnQgV2F2MlZlYzJNb2RlbAoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5jb25mb3JtZXJfc2hhdy5idWlsZGVyIGltcG9ydCAoCiAgICBjcmVhdGVfY29uZm9ybWVyX3NoYXdfbW9kZWwsCikKCgpkZWYgY29udmVydF9jb25mb3JtZXJfc2hhd19jaGVja3BvaW50KAogICAgY2hlY2twb2ludDogTWFwcGluZ1tzdHIsIEFueV0sIGNvbmZpZzogV2F2MlZlYzJDb25maWcKKSAtPiBNYXBwaW5nW3N0ciwgQW55XToKICAgICIiIkNvbnZlcnQgYSBmYWlyc2VxIGNvbmZvcm1lciBzaGF3IGNoZWNrcG9pbnQgdG8gZmFpcnNlcTIuIiIiCiAgICBzdGF0ZV9kaWN0ID0gY2hlY2twb2ludFsibW9kZWwiXQoKICAgICMgQ2hlY2sgaWYgd2UgaGF2ZSBhIGZhaXJzZXEyIGNoZWNrcG9pbnQuCiAgICBpZiAiZmluYWxfdGFyZ2V0X3Byb2oud2VpZ2h0IiBpbiBzdGF0ZV9kaWN0OgogICAgICAgIHJldHVybiBjaGVja3BvaW50CgogICAgZm9yIGtleSBpbiAoCiAgICAgICAgIm1sbV9wcm9qLndlaWdodCIsCiAgICAgICAgIm1sbV9wcm9qLmJpYXMiLAogICAgICAgICJlbmNvZGVyLmxheWVyX25vcm0ud2VpZ2h0IiwKICAgICAgICAiZW5jb2Rlci5sYXllcl9ub3JtLmJpYXMiLAogICAgKToKICAgICAgICBpZiBrZXkgaW4gc3RhdGVfZGljdDoKICAgICAgICAgICAgZGVsIHN0YXRlX2RpY3Rba2V5XQoKICAgIHN0YXRlX2RpY3RbInF1YW50aXplci5udW1fdXBkYXRlcyJdID0gdG9yY2guemVyb3MoKCksIGRldmljZT0iY3B1IikKCiAgICBrZXlfbWFwID0gewogICAgICAgICMgZm10OiBvZmYKICAgICAgICByIl5lbmNvZGVyXC5sYXllcnNcLihbMC05XSspXC5zZWxmX2F0dG5cLm91dF9wcm9qXC4iOiAgICAgICAgICAgIHIiZW5jb2Rlci5sYXllcnMuXDEuc2VsZl9hdHRuLm91dHB1dF9wcm9qLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuc2VsZl9hdHRuXC5yZWxfa19lbWJlZGRpbmdcLiI6ICAgICByImVuY29kZXIubGF5ZXJzLlwxLnNlbGZfYXR0bi5zZHBhLnJlbF9rX2VtYmVkLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuY29udl9tb2R1bGVcLmRlcHRod2lzZV9jb252XC4iOiAgICByImVuY29kZXIubGF5ZXJzLlwxLmNvbnYuZGVwdGh3aXNlX2NvbnYuIiwKICAgICAgICByIl5lbmNvZGVyXC5sYXllcnNcLihbMC05XSspXC5jb252X21vZHVsZVwubGF5ZXJfbm9ybVwuIjogICAgICAgIHIiZW5jb2Rlci5sYXllcnMuXDEuY29udl9sYXllcl9ub3JtLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuY29udl9tb2R1bGVcLmxheWVyX25vcm0yXC4iOiAgICAgICByImVuY29kZXIubGF5ZXJzLlwxLmNvbnYubGF5ZXJfbm9ybS4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmNvbnZfbW9kdWxlXC5wb2ludHdpc2VfY29udjFcLiI6ICAgciJlbmNvZGVyLmxheWVycy5cMS5jb252LnBvaW50d2lzZV9jb252MS4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmNvbnZfbW9kdWxlXC5wb2ludHdpc2VfY29udjJcLiI6ICAgciJlbmNvZGVyLmxheWVycy5cMS5jb252LnBvaW50d2lzZV9jb252Mi4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmZjMVwuIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgciJlbmNvZGVyLmxheWVycy5cMS5mZm4uaW5uZXJfcHJvai4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmZjMlwuIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgciJlbmNvZGVyLmxheWVycy5cMS5mZm4ub3V0cHV0X3Byb2ouIiwKICAgICAgICByIl5lbmNvZGVyXC5sYXllcnNcLihbMC05XSspXC5mZm4oMXwyKVwubGF5ZXJfbm9ybVwuIjogICAgICAgICAgIHIiZW5jb2Rlci5sYXllcnMuXDEuZmZuXDJfbGF5ZXJfbm9ybS4iLAogICAgICAgIHIiXmVuY29kZXJcLmxheWVyc1wuKFswLTldKylcLmZmbigxfDIpXC53XzFcLiI6ICAgICAgICAgICAgICAgICAgciJlbmNvZGVyLmxheWVycy5cMS5mZm5cMi5pbm5lcl9wcm9qLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZmZuKDF8MilcLndfMlwuIjogICAgICAgICAgICAgICAgICByImVuY29kZXIubGF5ZXJzLlwxLmZmblwyLm91dHB1dF9wcm9qLiIsCiAgICAgICAgciJeZW5jb2RlclwubGF5ZXJzXC4oWzAtOV0rKVwuZmluYWxfbGF5ZXJfbm9ybVwuIjogICAgICAgICAgICAgICByImVuY29kZXIubGF5ZXJzLlwxLmxheWVyX25vcm0uIiwKICAgICAgICByIl5lbmNvZGVyXC5lbWJlZF90b2tlbnNcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIiZW5jb2Rlcl9mcm9udGVuZC5lbWJlZC4iLAogICAgICAgIHIiXmVuY29kZXJcLnBvc19jb252XC4wXC4iOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciJlbmNvZGVyX2Zyb250ZW5kLnBvc19lbmNvZGVyLmNvbnYuIiwKICAgICAgICByIl5mZWF0dXJlX2V4dHJhY3RvclwuY29udl9sYXllcnNcLihbMC05XSspXC4wXC4iOiAgICAgICAgICAgICAgIHIiZW5jb2Rlcl9mcm9udGVuZC5mZWF0dXJlX2V4dHJhY3Rvci5sYXllcnMuXDEuY29udi4iLAogICAgICAgIHIiXmZlYXR1cmVfZXh0cmFjdG9yXC5jb252X2xheWVyc1wuKFswLTldKylcLjJcLjFcLiI6ICAgICAgICAgICAgciJlbmNvZGVyX2Zyb250ZW5kLmZlYXR1cmVfZXh0cmFjdG9yLmxheWVycy5cMS5sYXllcl9ub3JtLiIsCiAgICAgICAgciJeZmVhdHVyZV9leHRyYWN0b3JcLmNvbnZfbGF5ZXJzXC4wXC4yXC4iOiAgICAgICAgICAgICAgICAgICAgICByImVuY29kZXJfZnJvbnRlbmQuZmVhdHVyZV9leHRyYWN0b3IubGF5ZXJzLjAuZ3JvdXBfbm9ybS4iLAogICAgICAgIHIiXmxheWVyX25vcm1cLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciJlbmNvZGVyX2Zyb250ZW5kLnBvc3RfZXh0cmFjdF9sYXllcl9ub3JtLiIsCiAgICAgICAgciJecG9zdF9leHRyYWN0X3Byb2pcLiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByImVuY29kZXJfZnJvbnRlbmQubW9kZWxfZGltX3Byb2ouIiwKICAgICAgICByIl5tYXNrX2VtYiI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIibWFza2VyLnRlbXBvcmFsX21hc2tfZW1iZWQiLAogICAgICAgIHIiXnF1YW50aXplclwudmFycyI6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciJxdWFudGl6ZXIuZW50cmllcyIsCiAgICAgICAgciJecXVhbnRpemVyXC53ZWlnaHRfcHJvalwuIjogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByInF1YW50aXplci5lbnRyeV9wcm9qLiIsCiAgICAgICAgciJecHJvamVjdF9xXC4iOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByImZpbmFsX3RhcmdldF9wcm9qLiIsCiAgICAgICAgIyBmbXQ6IG9uCiAgICB9CgogICAgcmV0dXJuIGNvbnZlcnRfZmFpcnNlcV9jaGVja3BvaW50KGNoZWNrcG9pbnQsIGtleV9tYXApCgoKbG9hZF9jb25mb3JtZXJfc2hhd19tb2RlbCA9IE1vZGVsTG9hZGVyW1dhdjJWZWMyTW9kZWwsIFdhdjJWZWMyQ29uZmlnXSgKICAgIGFzc2V0X3N0b3JlLAogICAgZG93bmxvYWRfbWFuYWdlciwKICAgIGxvYWRfd2F2MnZlYzJfY29uZmlnLAogICAgY3JlYXRlX2NvbmZvcm1lcl9zaGF3X21vZGVsLAogICAgY29udmVydF9jb25mb3JtZXJfc2hhd19jaGVja3BvaW50LAopCg=='),
    ('seamless/build/lib/seamless_communication/models/conformer_shaw/builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBhc2RpY3QsIGRhdGFjbGFzcwpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwKCmZyb20gZmFpcnNlcTIubW9kZWxzLmNvbmZvcm1lciBpbXBvcnQgQ29uZm9ybWVyQ29udm9sdXRpb24KZnJvbSBmYWlyc2VxMi5tb2RlbHMudXRpbHMuYXJjaF9yZWdpc3RyeSBpbXBvcnQgQXJjaGl0ZWN0dXJlUmVnaXN0cnkKZnJvbSBmYWlyc2VxMi5tb2RlbHMudzJ2YmVydCBpbXBvcnQgdzJ2YmVydF9hcmNocwpmcm9tIGZhaXJzZXEyLm1vZGVscy53YXYydmVjMi5idWlsZGVyIGltcG9ydCAoCiAgICBXYXYyVmVjMkJ1aWxkZXIsCiAgICBXYXYyVmVjMkNvbmZpZywKICAgIFdhdjJWZWMyRW5jb2RlckJ1aWxkZXIsCiAgICBXYXYyVmVjMkVuY29kZXJDb25maWcsCiAgICB3YXYydmVjMl9hcmNoLAopCmZyb20gZmFpcnNlcTIubW9kZWxzLndhdjJ2ZWMyLm1vZGVsIGltcG9ydCBXYXYyVmVjMk1vZGVsCmZyb20gZmFpcnNlcTIubm4udHJhbnNmb3JtZXIgaW1wb3J0IFNEUEEsIFNoYXdSZWxhdGl2ZVBvc2l0aW9uU0RQQSwgY3JlYXRlX2RlZmF1bHRfc2RwYQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZQoKCkBkYXRhY2xhc3MKY2xhc3MgU2hhd1JlbGF0aXZlUG9zaXRpb25TRFBBQ29uZmlnOgogICAgIiIiSG9sZHMgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIDpjbGFzczpTaGF3UmVsYXRpdmVQb3NpdGlvblNEUEEgbW9kdWxlLiIiIgoKICAgIG1heF9sZWZ0X3JlbF9wb3M6IGludAogICAgIiIiVGhlIGxlZnQgY2xpcHBpbmcgdmFsdWUgZm9yIHJlbGF0aXZlIHBvc2l0aW9ucy4iIiIKCiAgICBtYXhfcmlnaHRfcmVsX3BvczogT3B0aW9uYWxbaW50XQogICAgIiIiVGhlIHJpZ2h0IGNsaXBwaW5nIHZhbHVlIGZvciByZWxhdGl2ZSBwb3NpdGlvbnMuIiIiCgogICAgdXNlX3JlbF9wb3NfdmFsdWVzOiBib29sID0gRmFsc2UKICAgICIiIklmIFRydWUsIGFsc28gdXNlcyByZWxhdGl2ZSBwb3NpdGlvbiB2YWx1ZXMgdG8gY29tcHV0ZSByZWxhdGl2ZSBhdHRlbnRpb24uIiIiCgoKQGRhdGFjbGFzcwpjbGFzcyBDb25mb3JtZXJTaGF3RW5jb2RlckNvbmZpZyhXYXYyVmVjMkVuY29kZXJDb25maWcpOgogICAgIiIiSG9sZHMgdGhlIGNvbmZpZ3VyYXRpb24gb2YgYSBjb25mb3JtZXIgc2hhdyBlbmNvZGVyLiIiIgoKICAgIHNoYXdfcmVsX3Bvc19zZHBhX2NvbmZpZzogT3B0aW9uYWxbU2hhd1JlbGF0aXZlUG9zaXRpb25TRFBBQ29uZmlnXQogICAgIiIiVGhlIHBhcmFtZXRlcnMgZm9yIFNoYXdSZWxhdGl2ZVBvc2l0aW9uU0RQQS4iIiIKCgpjb25mb3JtZXJfc2hhd19hcmNocyA9IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5W0NvbmZvcm1lclNoYXdFbmNvZGVyQ29uZmlnXSgKICAgICJjb25mb3JtZXJfc2hhdyIKKQoKY29uZm9ybWVyX3NoYXdfYXJjaCA9IGNvbmZvcm1lcl9zaGF3X2FyY2hzLmRlY29yYXRvcgoKCkBjb25mb3JtZXJfc2hhd19hcmNoKCI2MDBtIikKZGVmIF9jb25mb3JtZXJfc2hhd182MDBtX2VuY29kZXIoKSAtPiBDb25mb3JtZXJTaGF3RW5jb2RlckNvbmZpZzoKICAgIHcydmJlcnRfY29uZmlnID0gdzJ2YmVydF9hcmNocy5nZXRfY29uZmlnKCI2MDBtIikKICAgIHcydjJfZW5jb2Rlcl9jb25maWcgPSB3MnZiZXJ0X2NvbmZpZy53MnYyX2NvbmZpZy5lbmNvZGVyX2NvbmZpZwogICAgc2RwYV9jb25maWcgPSBTaGF3UmVsYXRpdmVQb3NpdGlvblNEUEFDb25maWcoCiAgICAgICAgbWF4X2xlZnRfcmVsX3Bvcz02NCwKICAgICAgICBtYXhfcmlnaHRfcmVsX3Bvcz04LAogICAgICAgIHVzZV9yZWxfcG9zX3ZhbHVlcz1GYWxzZSwKICAgICkKICAgIGNvbmZvcm1lcl9zaGF3X2VuY29kZXJfY29uZmlnID0gQ29uZm9ybWVyU2hhd0VuY29kZXJDb25maWcoCiAgICAgICAgKiphc2RpY3QodzJ2Ml9lbmNvZGVyX2NvbmZpZyksCiAgICAgICAgc2hhd19yZWxfcG9zX3NkcGFfY29uZmlnPXNkcGFfY29uZmlnLAogICAgKQogICAgY29uZm9ybWVyX3NoYXdfZW5jb2Rlcl9jb25maWcucG9zX2VuY29kZXJfdHlwZSA9ICJzaGF3X3JlbGF0aXZlIgogICAgcmV0dXJuIGNvbmZvcm1lcl9zaGF3X2VuY29kZXJfY29uZmlnCgoKQHdhdjJ2ZWMyX2FyY2goImNvbmZvcm1lcl9zaGF3XzYwMG0iKQpkZWYgX2NvbmZvcm1lcl9zaGF3XzYwMG0oKSAtPiBXYXYyVmVjMkNvbmZpZzoKICAgIGVuY29kZXJfY29uZmlnID0gX2NvbmZvcm1lcl9zaGF3XzYwMG1fZW5jb2RlcigpCgogICAgcmV0dXJuIFdhdjJWZWMyQ29uZmlnKAogICAgICAgIGVuY29kZXJfY29uZmlnLAogICAgICAgIGZpbmFsX2RpbT03NjgsCiAgICAgICAgZmluYWxfcHJval9iaWFzPVRydWUsCiAgICAgICAgdGVtcG9yYWxfbWFza19zcGFuX2xlbj0xMCwKICAgICAgICBtYXhfdGVtcG9yYWxfbWFza19wcm9iPTAuNjUsCiAgICAgICAgc3BhdGlhbF9tYXNrX3NwYW5fbGVuPTEwLAogICAgICAgIG1heF9zcGF0aWFsX21hc2tfcHJvYj0wLjAsCiAgICAgICAgcXVhbnRpemVkX2RpbT03NjgsCiAgICAgICAgbnVtX2NvZGVib29rcz0yLAogICAgICAgIG51bV9jb2RlYm9va19lbnRyaWVzPTMyMCwKICAgICAgICBjb2RlYm9va19zYW1wbGluZ190ZW1wZXJhdHVyZT0oMi4wLCAwLjEsIDAuOTk5OTk1KSwKICAgICAgICBudW1fZGlzdHJhY3RvcnM9MTAwLAogICAgICAgIGxvZ2l0X3RlbXA9MC4xLAogICAgICAgIGRpdmVyc2l0eV9sb3NzX3dlaWdodD0wLjIsCiAgICApCgoKY2xhc3MgQ29uZm9ybWVyU2hhd0VuY29kZXJCdWlsZGVyKFdhdjJWZWMyRW5jb2RlckJ1aWxkZXIpOgogICAgIiIiCiAgICBCdWlsZHMgbW9kdWxlcyBvZiBhIGBDb25mb3JtZXJTaGF3RW5jb2RlckJ1aWxkZXJgLgoKICAgIFRoaXMgaXMgYSBDb25mb3JtZXIgYXJjaGl0ZWN0dXJlIHdpdGggdGhlc2UgZGlmZmVyZW5jZXM6CiAgICAtIFNoYXdSZWxhdGl2ZVBvc2l0aW9uU0RQQSBhcyB0aGUgU0RQQS4KICAgIC0gQ29uZm9ybWVyQ29udm9sdXRpb24gd2l0aCBjYXVzYWwgZGVwdGh3aXNlIGNvbnZvbHV0aW9uCiAgICBhbmQgbm9ybV90eXBlICJsYXllcl9ub3JtIi4KICAgICIiIgoKICAgIGNvbmZpZzogQ29uZm9ybWVyU2hhd0VuY29kZXJDb25maWcKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBjb25maWc6IENvbmZvcm1lclNoYXdFbmNvZGVyQ29uZmlnLAogICAgICAgICosCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gY29uZmlnOgogICAgICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICAgICAgOnBhcmFtIGRldmljZToKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBpbml0aWFsaXplIG1vZHVsZXMuCiAgICAgICAgOnBhcmFtIGR0eXBlOgogICAgICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgICAgICIiIgogICAgICAgIHN1cGVyKCkuX19pbml0X18oY29uZmlnLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZSkKCiAgICAgICAgYXNzZXJ0IHNlbGYuY29uZmlnLnVzZV9jb25mb3JtZXIsICJUaGlzIGFyY2hpdGVjdHVyZSBvbmx5IHN1cHBvcnRzIGEgQ29uZm9ybWVyLiIKICAgICAgICBhc3NlcnQgKAogICAgICAgICAgICBzZWxmLmNvbmZpZy5wb3NfZW5jb2Rlcl90eXBlID09ICJzaGF3X3JlbGF0aXZlIgogICAgICAgICksICJUaGlzIGFyY2hpdGVjdHVyZSBvbmx5IHN1cHBvcnRzIFNoYXdSZWxhdGl2ZVBvc2l0aW9uU0RQQS4iCgogICAgZGVmIGJ1aWxkX3NkcGEoc2VsZikgLT4gU0RQQToKICAgICAgICBpZiBzZWxmLmNvbmZpZy5zaGF3X3JlbF9wb3Nfc2RwYV9jb25maWcgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgICJgc2hhd19yZWxfcG9zX3NkcGFfY29uZmlnYCBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGBwb3NfZW5jb2Rlcl90eXBlYCBpcyAnc2hhd19yZWxhdGl2ZScuIgogICAgICAgICAgICApCgogICAgICAgIHNkcGEgPSBjcmVhdGVfZGVmYXVsdF9zZHBhKGF0dG5fZHJvcG91dF9wPXNlbGYuY29uZmlnLmF0dG5fZHJvcG91dF9wKQoKICAgICAgICBzZHBhX2NvbmZpZyA9IHNlbGYuY29uZmlnLnNoYXdfcmVsX3Bvc19zZHBhX2NvbmZpZwoKICAgICAgICByZXR1cm4gU2hhd1JlbGF0aXZlUG9zaXRpb25TRFBBKAogICAgICAgICAgICBzZWxmLmNvbmZpZy5tb2RlbF9kaW0sCiAgICAgICAgICAgIHNlbGYuY29uZmlnLm51bV9lbmNvZGVyX2F0dG5faGVhZHMsCiAgICAgICAgICAgIHNkcGFfY29uZmlnLm1heF9sZWZ0X3JlbF9wb3MsCiAgICAgICAgICAgIG1heF9yaWdodF9yZWxfcG9zPXNkcGFfY29uZmlnLm1heF9yaWdodF9yZWxfcG9zLAogICAgICAgICAgICB1c2VfcmVsX3Bvc192YWx1ZXM9c2RwYV9jb25maWcudXNlX3JlbF9wb3NfdmFsdWVzLAogICAgICAgICAgICBpbm5lcl9zZHBhPXNkcGEsCiAgICAgICAgICAgIGRldmljZT1zZWxmLmRldmljZSwKICAgICAgICAgICAgZHR5cGU9c2VsZi5kdHlwZSwKICAgICAgICApCgogICAgZGVmIGJ1aWxkX2NvbmZvcm1lcl9jb252KHNlbGYpIC0+IENvbmZvcm1lckNvbnZvbHV0aW9uOgogICAgICAgIHJldHVybiBDb25mb3JtZXJDb252b2x1dGlvbigKICAgICAgICAgICAgc2VsZi5jb25maWcubW9kZWxfZGltLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5kZXB0aHdpc2VfY29udl9rZXJuZWxfc2l6ZSwKICAgICAgICAgICAgY2F1c2FsX2RlcHRod2lzZV9jb252PVRydWUsCiAgICAgICAgICAgIG5vcm1fdHlwZT0ibGF5ZXJfbm9ybSIsCiAgICAgICAgICAgIGRldmljZT1zZWxmLmRldmljZSwKICAgICAgICAgICAgZHR5cGU9c2VsZi5kdHlwZSwKICAgICAgICApCgoKZGVmIGNyZWF0ZV9jb25mb3JtZXJfc2hhd19tb2RlbCgKICAgIGNvbmZpZzogV2F2MlZlYzJDb25maWcsCiAgICAqLAogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAopIC0+IFdhdjJWZWMyTW9kZWw6CiAgICAiIiJDcmVhdGUgYSBjb25mb3JtZXIgc2hhdyBtb2RlbC4KCiAgICA6cGFyYW0gY29uZmlnOgogICAgICAgIFRoZSBjb25maWd1cmF0aW9uLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCiAgICBhc3NlcnQgaXNpbnN0YW5jZShjb25maWcuZW5jb2Rlcl9jb25maWcsIENvbmZvcm1lclNoYXdFbmNvZGVyQ29uZmlnKQoKICAgIGVuY29kZXJfYnVpbGRlciA9IENvbmZvcm1lclNoYXdFbmNvZGVyQnVpbGRlcigKICAgICAgICBjb25maWcuZW5jb2Rlcl9jb25maWcsIGRldmljZT1kZXZpY2UsIGR0eXBlPWR0eXBlCiAgICApCgogICAgYnVpbGRlciA9IFdhdjJWZWMyQnVpbGRlcihjb25maWcsIGVuY29kZXJfYnVpbGRlciwgZGV2aWNlPWRldmljZSwgZHR5cGU9ZHR5cGUpCgogICAgcmV0dXJuIGJ1aWxkZXIuYnVpbGRfbW9kZWwoKQo='),
    ('seamless/build/lib/seamless_communication/models/generator/streamable.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgppbXBvcnQgbWF0aAppbXBvcnQgd2FybmluZ3MKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdCwgTGlzdCwgTGl0ZXJhbCwgT3B0aW9uYWwsIFR1cGxlLCBUeXBlVmFyCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi50eXBpbmcgaW1wb3J0IERhdGFUeXBlLCBEZXZpY2UKZnJvbSB0b3JjaC5ubiBpbXBvcnQgKAogICAgRUxVLAogICAgTFNUTSwKICAgIENvbnYxZCwKICAgIENvbnZUcmFuc3Bvc2UxZCwKICAgIEdyb3VwTm9ybSwKICAgIElkZW50aXR5LAogICAgTW9kdWxlLAogICAgU2VxdWVudGlhbCwKKQpmcm9tIHRvcmNoLm5uIGltcG9ydCBmdW5jdGlvbmFsIGFzIEYKZnJvbSB0b3JjaC5ubi51dGlscyBpbXBvcnQgc3BlY3RyYWxfbm9ybSwgd2VpZ2h0X25vcm0gICMgdHlwZTogaWdub3JlW2F0dHItZGVmaW5lZF0KCkNPTlZfTk9STUFMSVpBVElPTlMgPSBmcm96ZW5zZXQoCiAgICBbIm5vbmUiLCAid2VpZ2h0X25vcm0iLCAic3BlY3RyYWxfbm9ybSIsICJ0aW1lX2dyb3VwX25vcm0iXQopCgoKZGVmIGFwcGx5X3BhcmFtZXRyaXphdGlvbl9ub3JtKAogICAgbW9kdWxlOiBNb2R1bGUsCiAgICBub3JtOiBMaXRlcmFsWyJub25lIiwgIndlaWdodF9ub3JtIiwgInNwZWN0cmFsX25vcm0iLCAidGltZV9ncm91cF9ub3JtIl0gPSAibm9uZSIsCikgLT4gTW9kdWxlOgogICAgaWYgbm9ybSA9PSAid2VpZ2h0X25vcm0iOgogICAgICAgIHJldHVybiB3ZWlnaHRfbm9ybShtb2R1bGUpCiAgICBlbGlmIG5vcm0gPT0gInNwZWN0cmFsX25vcm0iOgogICAgICAgIHJldHVybiBzcGVjdHJhbF9ub3JtKG1vZHVsZSkKICAgIGVsc2U6CiAgICAgICAgIyBXZSBhbHJlYWR5IGNoZWNrIHdhcyBpbiBDT05WX05PUk1BTElaQVRJT04sIHNvIGFueSBvdGhlciBjaG9pY2UKICAgICAgICAjIGRvZXNuJ3QgbmVlZCByZXBhcmFtZXRyaXphdGlvbi4KICAgICAgICByZXR1cm4gbW9kdWxlCgoKZGVmIGdldF9ub3JtX21vZHVsZSggICMgdHlwZTogaWdub3JlW25vLXVudHlwZWQtZGVmXQogICAgbW9kdWxlOiBNb2R1bGUsCiAgICBjYXVzYWw6IGJvb2wgPSBGYWxzZSwKICAgIG5vcm06IExpdGVyYWxbIm5vbmUiLCAid2VpZ2h0X25vcm0iLCAic3BlY3RyYWxfbm9ybSIsICJ0aW1lX2dyb3VwX25vcm0iXSA9ICJub25lIiwKICAgICoqbm9ybV9rd2FyZ3MsCikgLT4gTW9kdWxlOgogICAgIiIiUmV0dXJuIHRoZSBwcm9wZXIgbm9ybWFsaXphdGlvbiBtb2R1bGUuIElmIGNhdXNhbCBpcyBUcnVlLCB0aGlzIHdpbGwgZW5zdXJlIHRoZSByZXR1cm5lZAogICAgbW9kdWxlIGlzIGNhdXNhbCwgb3IgcmV0dXJuIGFuIGVycm9yIGlmIHRoZSBub3JtYWxpemF0aW9uIGRvZXNuJ3Qgc3VwcG9ydCBjYXVzYWwgZXZhbHVhdGlvbi4KICAgICIiIgogICAgYXNzZXJ0IG5vcm0gaW4gQ09OVl9OT1JNQUxJWkFUSU9OUwogICAgaWYgbm9ybSA9PSAidGltZV9ncm91cF9ub3JtIjoKICAgICAgICBpZiBjYXVzYWw6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkdyb3VwTm9ybSBkb2Vzbid0IHN1cHBvcnQgY2F1c2FsIGV2YWx1YXRpb24uIikKICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShtb2R1bGUsIHRvcmNoLm5uLm1vZHVsZXMuY29udi5fQ29udk5kKQogICAgICAgIHJldHVybiBHcm91cE5vcm0oMSwgbW9kdWxlLm91dF9jaGFubmVscywgKipub3JtX2t3YXJncykKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIElkZW50aXR5KCkKCgpkZWYgZ2V0X2V4dHJhX3BhZGRpbmdfZm9yX2NvbnYxZCgKICAgIHg6IHRvcmNoLlRlbnNvciwga2VybmVsX3NpemU6IGludCwgc3RyaWRlOiBpbnQsIHBhZGRpbmdfdG90YWw6IGludCA9IDAKKSAtPiBpbnQ6CiAgICAiIiJTZWUgYHBhZF9mb3JfY29udjFkYC4iIiIKICAgIGxlbmd0aCA9IHguc2hhcGVbLTFdCiAgICBuX2ZyYW1lcyA9IChsZW5ndGggLSBrZXJuZWxfc2l6ZSArIHBhZGRpbmdfdG90YWwpIC8gc3RyaWRlICsgMQogICAgaWRlYWxfbGVuZ3RoID0gKG1hdGguY2VpbChuX2ZyYW1lcykgLSAxKSAqIHN0cmlkZSArIChrZXJuZWxfc2l6ZSAtIHBhZGRpbmdfdG90YWwpCiAgICByZXR1cm4gaWRlYWxfbGVuZ3RoIC0gbGVuZ3RoCgoKZGVmIHBhZF9mb3JfY29udjFkKAogICAgeDogdG9yY2guVGVuc29yLCBrZXJuZWxfc2l6ZTogaW50LCBzdHJpZGU6IGludCwgcGFkZGluZ190b3RhbDogaW50ID0gMAopIC0+IHRvcmNoLlRlbnNvcjoKICAgICIiIlBhZCBmb3IgYSBjb252b2x1dGlvbiB0byBtYWtlIHN1cmUgdGhhdCB0aGUgbGFzdCB3aW5kb3cgaXMgZnVsbC4KICAgIEV4dHJhIHBhZGRpbmcgaXMgYWRkZWQgYXQgdGhlIGVuZC4gVGhpcyBpcyByZXF1aXJlZCB0byBlbnN1cmUgdGhhdCB3ZSBjYW4gcmVidWlsZAogICAgYW4gb3V0cHV0IG9mIHRoZSBzYW1lIGxlbmd0aCwgYXMgb3RoZXJ3aXNlLCBldmVuIHdpdGggcGFkZGluZywgc29tZSB0aW1lIHN0ZXBzCiAgICBtaWdodCBnZXQgcmVtb3ZlZC4KICAgIEZvciBpbnN0YW5jZSwgd2l0aCB0b3RhbCBwYWRkaW5nID0gNCwga2VybmVsIHNpemUgPSA0LCBzdHJpZGUgPSAyOgogICAgICAgIDAgMCAxIDIgMyA0IDUgMCAwICAgIyAoMHMgYXJlIHBhZGRpbmcpCiAgICAgICAgMSAgIDIgICAzICAgICAgICAgICAjIChvdXRwdXQgZnJhbWVzIG9mIGEgY29udm9sdXRpb24sIGxhc3QgMCBpcyBuZXZlciB1c2VkKQogICAgICAgIDAgMCAxIDIgMyA0IDUgMCAgICAgIyAob3V0cHV0IG9mIHRyLiBjb252LiwgYnV0IHBvcy4gNSBpcyBnb2luZyB0byBnZXQgcmVtb3ZlZCBhcyBwYWRkaW5nKQogICAgICAgICAgICAxIDIgMyA0ICAgICAgICAgIyBvbmNlIHlvdSByZW1vdmVkIHBhZGRpbmcsIHdlIGFyZSBtaXNzaW5nIG9uZSB0aW1lIHN0ZXAgIQogICAgIiIiCiAgICBleHRyYV9wYWRkaW5nID0gZ2V0X2V4dHJhX3BhZGRpbmdfZm9yX2NvbnYxZCh4LCBrZXJuZWxfc2l6ZSwgc3RyaWRlLCBwYWRkaW5nX3RvdGFsKQogICAgcmV0dXJuIEYucGFkKHgsICgwLCBleHRyYV9wYWRkaW5nKSkgICMgbm9xYQoKCmRlZiBwYWQxZCgKICAgIHg6IHRvcmNoLlRlbnNvciwKICAgIHBhZGRpbmdzOiBUdXBsZVtpbnQsIGludF0sCiAgICBtb2RlOiBzdHIgPSAiY29uc3RhbnQiLAogICAgdmFsdWU6IGZsb2F0ID0gMC4wLAopIC0+IHRvcmNoLlRlbnNvcjoKICAgICIiIlRpbnkgd3JhcHBlciBhcm91bmQgRi5wYWQsIGp1c3QgdG8gYWxsb3cgZm9yIHJlZmxlY3QgcGFkZGluZyBvbiBzbWFsbCBpbnB1dC4KICAgIElmIHRoaXMgaXMgdGhlIGNhc2UsIHdlIGluc2VydCBleHRyYSAwIHBhZGRpbmcgdG8gdGhlIHJpZ2h0IGJlZm9yZSB0aGUgcmVmbGVjdGlvbiBoYXBwZW4uCiAgICAiIiIKICAgIGxlbmd0aCA9IHguc2hhcGVbLTFdCiAgICBwYWRkaW5nX2xlZnQsIHBhZGRpbmdfcmlnaHQgPSBwYWRkaW5ncwogICAgYXNzZXJ0IHBhZGRpbmdfbGVmdCA+PSAwIGFuZCBwYWRkaW5nX3JpZ2h0ID49IDAsIChwYWRkaW5nX2xlZnQsIHBhZGRpbmdfcmlnaHQpCiAgICBpZiBtb2RlID09ICJyZWZsZWN0IjoKICAgICAgICBtYXhfcGFkID0gbWF4KHBhZGRpbmdfbGVmdCwgcGFkZGluZ19yaWdodCkKICAgICAgICBleHRyYV9wYWQgPSAwCiAgICAgICAgaWYgbGVuZ3RoIDw9IG1heF9wYWQ6CiAgICAgICAgICAgIGV4dHJhX3BhZCA9IG1heF9wYWQgLSBsZW5ndGggKyAxCiAgICAgICAgICAgIHggPSBGLnBhZCh4LCAoMCwgZXh0cmFfcGFkKSkKICAgICAgICBwYWRkZWQgPSBGLnBhZCh4LCBwYWRkaW5ncywgbW9kZSwgdmFsdWUpCiAgICAgICAgZW5kID0gcGFkZGVkLnNoYXBlWy0xXSAtIGV4dHJhX3BhZAogICAgICAgIHJldHVybiBwYWRkZWRbLi4uLCA6ZW5kXQogICAgZWxzZToKICAgICAgICByZXR1cm4gRi5wYWQoeCwgcGFkZGluZ3MsIG1vZGUsIHZhbHVlKQoKCmRlZiB1bnBhZDFkKHg6IHRvcmNoLlRlbnNvciwgcGFkZGluZ3M6IFR1cGxlW2ludCwgaW50XSkgLT4gdG9yY2guVGVuc29yOgogICAgIiIiUmVtb3ZlIHBhZGRpbmcgZnJvbSB4LCBoYW5kbGluZyBwcm9wZXJseSB6ZXJvIHBhZGRpbmcuIE9ubHkgZm9yIDFkISIiIgogICAgcGFkZGluZ19sZWZ0LCBwYWRkaW5nX3JpZ2h0ID0gcGFkZGluZ3MKICAgIGFzc2VydCBwYWRkaW5nX2xlZnQgPj0gMCBhbmQgcGFkZGluZ19yaWdodCA+PSAwLCAocGFkZGluZ19sZWZ0LCBwYWRkaW5nX3JpZ2h0KQogICAgYXNzZXJ0IChwYWRkaW5nX2xlZnQgKyBwYWRkaW5nX3JpZ2h0KSA8PSB4LnNoYXBlWy0xXQogICAgZW5kID0geC5zaGFwZVstMV0gLSBwYWRkaW5nX3JpZ2h0CiAgICByZXR1cm4geFsuLi4sIHBhZGRpbmdfbGVmdDplbmRdCgoKY2xhc3MgTm9ybUNvbnYxZChNb2R1bGUpOgogICAgIiIiV3JhcHBlciBhcm91bmQgQ29udjFkIGFuZCBub3JtYWxpemF0aW9uIGFwcGxpZWQgdG8gdGhpcyBjb252CiAgICB0byBwcm92aWRlIGEgdW5pZm9ybSBpbnRlcmZhY2UgYWNyb3NzIG5vcm1hbGl6YXRpb24gYXBwcm9hY2hlcy4KICAgICIiIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGluX2NoYW5uZWxzOiBpbnQsCiAgICAgICAgb3V0X2NoYW5uZWxzOiBpbnQsCiAgICAgICAga2VybmVsX3NpemU6IGludCwKICAgICAgICBzdHJpZGU6IGludCA9IDEsCiAgICAgICAgZGlsYXRpb246IGludCA9IDEsCiAgICAgICAgZ3JvdXBzOiBpbnQgPSAxLAogICAgICAgIGJpYXM6IGJvb2wgPSBUcnVlLAogICAgICAgIGNhdXNhbDogYm9vbCA9IEZhbHNlLAogICAgICAgIG5vcm06IExpdGVyYWxbCiAgICAgICAgICAgICJub25lIiwgIndlaWdodF9ub3JtIiwgInNwZWN0cmFsX25vcm0iLCAidGltZV9ncm91cF9ub3JtIgogICAgICAgIF0gPSAibm9uZSIsCiAgICAgICAgbm9ybV9rd2FyZ3M6IERpY3Rbc3RyLCBBbnldID0ge30sCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5jb252OiBNb2R1bGUgPSBhcHBseV9wYXJhbWV0cml6YXRpb25fbm9ybSgKICAgICAgICAgICAgQ29udjFkKAogICAgICAgICAgICAgICAgaW5fY2hhbm5lbHMsCiAgICAgICAgICAgICAgICBvdXRfY2hhbm5lbHMsCiAgICAgICAgICAgICAgICBrZXJuZWxfc2l6ZSwKICAgICAgICAgICAgICAgIHN0cmlkZSwKICAgICAgICAgICAgICAgIGRpbGF0aW9uPWRpbGF0aW9uLAogICAgICAgICAgICAgICAgZ3JvdXBzPWdyb3VwcywKICAgICAgICAgICAgICAgIGJpYXM9YmlhcywKICAgICAgICAgICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgICAgICAgICBkdHlwZT1kdHlwZSwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbm9ybSwKICAgICAgICApCiAgICAgICAgc2VsZi5ub3JtOiBNb2R1bGUgPSBnZXRfbm9ybV9tb2R1bGUoc2VsZi5jb252LCBjYXVzYWwsIG5vcm0sICoqbm9ybV9rd2FyZ3MpCiAgICAgICAgc2VsZi5ub3JtX3R5cGUgPSBub3JtCgogICAgZGVmIGZvcndhcmQoc2VsZiwgeDogdG9yY2guVGVuc29yKSAtPiB0b3JjaC5UZW5zb3I6CiAgICAgICAgeCA9IHNlbGYuY29udih4KQogICAgICAgIHggPSBzZWxmLm5vcm0oeCkKICAgICAgICByZXR1cm4geAoKCmNsYXNzIE5vcm1Db252VHJhbnNwb3NlMWQoTW9kdWxlKToKICAgICIiIldyYXBwZXIgYXJvdW5kIENvbnZUcmFuc3Bvc2UxZCBhbmQgbm9ybWFsaXphdGlvbiBhcHBsaWVkIHRvIHRoaXMgY29udgogICAgdG8gcHJvdmlkZSBhIHVuaWZvcm0gaW50ZXJmYWNlIGFjcm9zcyBub3JtYWxpemF0aW9uIGFwcHJvYWNoZXMuCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oICAjIHR5cGU6IGlnbm9yZVtuby11bnR5cGVkLWRlZl0KICAgICAgICBzZWxmLAogICAgICAgIGluX2NoYW5uZWxzOiBpbnQsCiAgICAgICAgb3V0X2NoYW5uZWxzOiBpbnQsCiAgICAgICAga2VybmVsX3NpemU6IGludCwKICAgICAgICBzdHJpZGU6IGludCA9IDEsCiAgICAgICAgY2F1c2FsOiBib29sID0gRmFsc2UsCiAgICAgICAgbm9ybTogTGl0ZXJhbFsKICAgICAgICAgICAgIm5vbmUiLCAid2VpZ2h0X25vcm0iLCAic3BlY3RyYWxfbm9ybSIsICJ0aW1lX2dyb3VwX25vcm0iCiAgICAgICAgXSA9ICJub25lIiwKICAgICAgICBub3JtX2t3YXJnczogRGljdFtzdHIsIEFueV0gPSB7fSwKICAgICAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLmNvbnZ0ciA9IGFwcGx5X3BhcmFtZXRyaXphdGlvbl9ub3JtKAogICAgICAgICAgICBDb252VHJhbnNwb3NlMWQoCiAgICAgICAgICAgICAgICBpbl9jaGFubmVscz1pbl9jaGFubmVscywKICAgICAgICAgICAgICAgIG91dF9jaGFubmVscz1vdXRfY2hhbm5lbHMsCiAgICAgICAgICAgICAgICBrZXJuZWxfc2l6ZT1rZXJuZWxfc2l6ZSwKICAgICAgICAgICAgICAgIHN0cmlkZT1zdHJpZGUsCiAgICAgICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIG5vcm0sCiAgICAgICAgKQogICAgICAgIHNlbGYubm9ybSA9IGdldF9ub3JtX21vZHVsZShzZWxmLmNvbnZ0ciwgY2F1c2FsLCBub3JtLCAqKm5vcm1fa3dhcmdzKQogICAgICAgIHNlbGYubm9ybV90eXBlID0gbm9ybQoKICAgIGRlZiBmb3J3YXJkKHNlbGYsIHg6IHRvcmNoLlRlbnNvcikgLT4gdG9yY2guVGVuc29yOgogICAgICAgIHggPSBzZWxmLmNvbnZ0cih4KQogICAgICAgIHggPSBzZWxmLm5vcm0oeCkKICAgICAgICByZXR1cm4geAoKCmNsYXNzIFN0cmVhbWFibGVDb252MWQoTW9kdWxlKToKICAgICIiIkNvbnYxZCB3aXRoIHNvbWUgYnVpbHRpbiBoYW5kbGluZyBvZiBhc3ltbWV0cmljIG9yIGNhdXNhbCBwYWRkaW5nCiAgICBhbmQgbm9ybWFsaXphdGlvbi4KICAgICIiIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGluX2NoYW5uZWxzOiBpbnQsCiAgICAgICAgb3V0X2NoYW5uZWxzOiBpbnQsCiAgICAgICAga2VybmVsX3NpemU6IGludCwKICAgICAgICBzdHJpZGU6IGludCA9IDEsCiAgICAgICAgZGlsYXRpb246IGludCA9IDEsCiAgICAgICAgZ3JvdXBzOiBpbnQgPSAxLAogICAgICAgIGJpYXM6IGJvb2wgPSBUcnVlLAogICAgICAgIGNhdXNhbDogYm9vbCA9IEZhbHNlLAogICAgICAgIG5vcm06IExpdGVyYWxbCiAgICAgICAgICAgICJub25lIiwgIndlaWdodF9ub3JtIiwgInNwZWN0cmFsX25vcm0iLCAidGltZV9ncm91cF9ub3JtIgogICAgICAgIF0gPSAibm9uZSIsCiAgICAgICAgbm9ybV9rd2FyZ3M6IERpY3Rbc3RyLCBBbnldID0ge30sCiAgICAgICAgcGFkX21vZGU6IHN0ciA9ICJyZWZsZWN0IiwKICAgICAgICBhY3RpdmF0aW9uOiBPcHRpb25hbFtNb2R1bGVdID0gTm9uZSwKICAgICAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICAjIHdhcm4gdXNlciBvbiB1bnVzdWFsIHNldHVwIGJldHdlZW4gZGlsYXRpb24gYW5kIHN0cmlkZQogICAgICAgIGlmIHN0cmlkZSA+IDEgYW5kIGRpbGF0aW9uID4gMToKICAgICAgICAgICAgd2FybmluZ3Mud2FybigKICAgICAgICAgICAgICAgICJTdHJlYW1hYmxlQ29udjFkIGhhcyBiZWVuIGluaXRpYWxpemVkIHdpdGggc3RyaWRlID4gMSBhbmQgZGlsYXRpb24gPiAxIgogICAgICAgICAgICAgICAgZiIgKGtlcm5lbF9zaXplPXtrZXJuZWxfc2l6ZX0gc3RyaWRlPXtzdHJpZGV9LCBkaWxhdGlvbj17ZGlsYXRpb259KS4iCiAgICAgICAgICAgICkKICAgICAgICBzZWxmLmFjdGl2YXRpb24gPSBhY3RpdmF0aW9uCiAgICAgICAgc2VsZi5jb252ID0gTm9ybUNvbnYxZCgKICAgICAgICAgICAgaW5fY2hhbm5lbHMsCiAgICAgICAgICAgIG91dF9jaGFubmVscywKICAgICAgICAgICAga2VybmVsX3NpemUsCiAgICAgICAgICAgIHN0cmlkZSwKICAgICAgICAgICAgZGlsYXRpb249ZGlsYXRpb24sCiAgICAgICAgICAgIGdyb3Vwcz1ncm91cHMsCiAgICAgICAgICAgIGJpYXM9YmlhcywKICAgICAgICAgICAgY2F1c2FsPWNhdXNhbCwKICAgICAgICAgICAgbm9ybT1ub3JtLAogICAgICAgICAgICBub3JtX2t3YXJncz1ub3JtX2t3YXJncywKICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICAgICAgKQogICAgICAgIHNlbGYuY2F1c2FsID0gY2F1c2FsCiAgICAgICAgc2VsZi5wYWRfbW9kZSA9IHBhZF9tb2RlCgogICAgZGVmIGZvcndhcmQoc2VsZiwgeDogdG9yY2guVGVuc29yKSAtPiB0b3JjaC5UZW5zb3I6CiAgICAgICAgaWYgc2VsZi5hY3RpdmF0aW9uOgogICAgICAgICAgICB4ID0gc2VsZi5hY3RpdmF0aW9uKHgpCiAgICAgICAga2VybmVsX3NpemU6IGludCA9IHNlbGYuY29udi5jb252Lmtlcm5lbF9zaXplWzBdICAjIHR5cGU6IGlnbm9yZVtpbmRleCxhc3NpZ25tZW50XQogICAgICAgIHN0cmlkZTogaW50ID0gc2VsZi5jb252LmNvbnYuc3RyaWRlWzBdICAjIHR5cGU6IGlnbm9yZVtpbmRleCxhc3NpZ25tZW50XQogICAgICAgIGRpbGF0aW9uID0gc2VsZi5jb252LmNvbnYuZGlsYXRpb25bMF0gICMgdHlwZTogaWdub3JlW2luZGV4XQogICAgICAgIGtlcm5lbF9zaXplID0gKCAgIyB0eXBlOiBpZ25vcmVbYXNzaWdubWVudF0KICAgICAgICAgICAga2VybmVsX3NpemUgLSAxCiAgICAgICAgKSAqIGRpbGF0aW9uICsgMSAgIyBlZmZlY3RpdmUga2VybmVsIHNpemUgd2l0aCBkaWxhdGlvbnMKICAgICAgICBwYWRkaW5nX3RvdGFsID0ga2VybmVsX3NpemUgLSBzdHJpZGUKICAgICAgICBleHRyYV9wYWRkaW5nID0gZ2V0X2V4dHJhX3BhZGRpbmdfZm9yX2NvbnYxZCgKICAgICAgICAgICAgeCwga2VybmVsX3NpemUsIHN0cmlkZSwgcGFkZGluZ190b3RhbAogICAgICAgICkKICAgICAgICBpZiBzZWxmLmNhdXNhbDoKICAgICAgICAgICAgIyBMZWZ0IHBhZGRpbmcgZm9yIGNhdXNhbAogICAgICAgICAgICB4ID0gcGFkMWQoeCwgKHBhZGRpbmdfdG90YWwsIGV4dHJhX3BhZGRpbmcpLCBtb2RlPXNlbGYucGFkX21vZGUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBBc3ltbWV0cmljIHBhZGRpbmcgcmVxdWlyZWQgZm9yIG9kZCBzdHJpZGVzCiAgICAgICAgICAgIHBhZGRpbmdfcmlnaHQgPSBwYWRkaW5nX3RvdGFsIC8vIDIKICAgICAgICAgICAgcGFkZGluZ19sZWZ0ID0gcGFkZGluZ190b3RhbCAtIHBhZGRpbmdfcmlnaHQKICAgICAgICAgICAgeCA9IHBhZDFkKAogICAgICAgICAgICAgICAgeCwgKHBhZGRpbmdfbGVmdCwgcGFkZGluZ19yaWdodCArIGV4dHJhX3BhZGRpbmcpLCBtb2RlPXNlbGYucGFkX21vZGUKICAgICAgICAgICAgKQogICAgICAgIHJldHVybiBzZWxmLmNvbnYoeCkgICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCgoKY2xhc3MgU3RyZWFtYWJsZUNvbnZUcmFuc3Bvc2UxZChNb2R1bGUpOgogICAgIiIiQ29udlRyYW5zcG9zZTFkIHdpdGggc29tZSBidWlsdGluIGhhbmRsaW5nIG9mIGFzeW1tZXRyaWMgb3IgY2F1c2FsIHBhZGRpbmcKICAgIGFuZCBub3JtYWxpemF0aW9uLgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgaW5fY2hhbm5lbHM6IGludCwKICAgICAgICBvdXRfY2hhbm5lbHM6IGludCwKICAgICAgICBrZXJuZWxfc2l6ZTogaW50LAogICAgICAgIHN0cmlkZTogaW50ID0gMSwKICAgICAgICBjYXVzYWw6IGJvb2wgPSBGYWxzZSwKICAgICAgICBub3JtOiBMaXRlcmFsWwogICAgICAgICAgICAibm9uZSIsICJ3ZWlnaHRfbm9ybSIsICJzcGVjdHJhbF9ub3JtIiwgInRpbWVfZ3JvdXBfbm9ybSIKICAgICAgICBdID0gIm5vbmUiLAogICAgICAgIHRyaW1fcmlnaHRfcmF0aW86IGZsb2F0ID0gMS4wLAogICAgICAgIG5vcm1fa3dhcmdzOiBEaWN0W3N0ciwgQW55XSA9IHt9LAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQogICAgICAgIHNlbGYuY29udnRyID0gTm9ybUNvbnZUcmFuc3Bvc2UxZCgKICAgICAgICAgICAgaW5fY2hhbm5lbHMsCiAgICAgICAgICAgIG91dF9jaGFubmVscywKICAgICAgICAgICAga2VybmVsX3NpemUsCiAgICAgICAgICAgIHN0cmlkZSwKICAgICAgICAgICAgY2F1c2FsPWNhdXNhbCwKICAgICAgICAgICAgbm9ybT1ub3JtLAogICAgICAgICAgICBub3JtX2t3YXJncz1ub3JtX2t3YXJncywKICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICAgICAgKQogICAgICAgIHNlbGYuY2F1c2FsID0gY2F1c2FsCiAgICAgICAgc2VsZi50cmltX3JpZ2h0X3JhdGlvID0gdHJpbV9yaWdodF9yYXRpbwogICAgICAgIGFzc2VydCAoCiAgICAgICAgICAgIHNlbGYuY2F1c2FsIG9yIHNlbGYudHJpbV9yaWdodF9yYXRpbyA9PSAxLjAKICAgICAgICApLCAiYHRyaW1fcmlnaHRfcmF0aW9gICE9IDEuMCBvbmx5IG1ha2VzIHNlbnNlIGZvciBjYXVzYWwgY29udm9sdXRpb25zIgogICAgICAgIGFzc2VydCBzZWxmLnRyaW1fcmlnaHRfcmF0aW8gPj0gMC4wIGFuZCBzZWxmLnRyaW1fcmlnaHRfcmF0aW8gPD0gMS4wCgogICAgZGVmIGZvcndhcmQoc2VsZiwgeDogdG9yY2guVGVuc29yKSAtPiB0b3JjaC5UZW5zb3I6CiAgICAgICAga2VybmVsX3NpemU6IGludCA9IHNlbGYuY29udnRyLmNvbnZ0ci5rZXJuZWxfc2l6ZVswXSAgIyB0eXBlOiBpZ25vcmVbaW5kZXgsYXNzaWdubWVudF0KICAgICAgICBzdHJpZGU6IGludCA9IHNlbGYuY29udnRyLmNvbnZ0ci5zdHJpZGVbMF0gICMgdHlwZTogaWdub3JlW2luZGV4LGFzc2lnbm1lbnRdCiAgICAgICAgcGFkZGluZ190b3RhbCA9IGtlcm5lbF9zaXplIC0gc3RyaWRlCgogICAgICAgIHk6IHRvcmNoLlRlbnNvciA9IHNlbGYuY29udnRyKHgpCgogICAgICAgICMgV2Ugd2lsbCBvbmx5IHRyaW0gZml4ZWQgcGFkZGluZy4gRXh0cmEgcGFkZGluZyBmcm9tIGBwYWRfZm9yX2NvbnYxZGAgd291bGQgYmUKICAgICAgICAjIHJlbW92ZWQgYXQgdGhlIHZlcnkgZW5kLCB3aGVuIGtlZXBpbmcgb25seSB0aGUgcmlnaHQgbGVuZ3RoIGZvciB0aGUgb3V0cHV0LAogICAgICAgICMgYXMgcmVtb3ZpbmcgaXQgaGVyZSB3b3VsZCByZXF1aXJlIGFsc28gcGFzc2luZyB0aGUgbGVuZ3RoIGF0IHRoZSBtYXRjaGluZyBsYXllcgogICAgICAgICMgaW4gdGhlIGVuY29kZXIuCiAgICAgICAgaWYgc2VsZi5jYXVzYWw6CiAgICAgICAgICAgICMgVHJpbSB0aGUgcGFkZGluZyBvbiB0aGUgcmlnaHQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgcmF0aW8KICAgICAgICAgICAgIyBpZiB0cmltX3JpZ2h0X3JhdGlvID0gMS4wLCB0cmltIGV2ZXJ5dGhpbmcgZnJvbSByaWdodAogICAgICAgICAgICBwYWRkaW5nX3JpZ2h0ID0gbWF0aC5jZWlsKHBhZGRpbmdfdG90YWwgKiBzZWxmLnRyaW1fcmlnaHRfcmF0aW8pCiAgICAgICAgICAgIHBhZGRpbmdfbGVmdCA9IHBhZGRpbmdfdG90YWwgLSBwYWRkaW5nX3JpZ2h0CiAgICAgICAgICAgIHkgPSB1bnBhZDFkKHksIChwYWRkaW5nX2xlZnQsIHBhZGRpbmdfcmlnaHQpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgQXN5bW1ldHJpYyBwYWRkaW5nIHJlcXVpcmVkIGZvciBvZGQgc3RyaWRlcwogICAgICAgICAgICBwYWRkaW5nX3JpZ2h0ID0gcGFkZGluZ190b3RhbCAvLyAyCiAgICAgICAgICAgIHBhZGRpbmdfbGVmdCA9IHBhZGRpbmdfdG90YWwgLSBwYWRkaW5nX3JpZ2h0CiAgICAgICAgICAgIHkgPSB1bnBhZDFkKHksIChwYWRkaW5nX2xlZnQsIHBhZGRpbmdfcmlnaHQpKQogICAgICAgIHJldHVybiB5CgoKY2xhc3MgU3RyZWFtYWJsZUxTVE0oTW9kdWxlKToKICAgICIiIkxTVE0gd2l0aG91dCB3b3JyeWluZyBhYm91dCB0aGUgaGlkZGVuIHN0YXRlLCBub3IgdGhlIGxheW91dCBvZiB0aGUgZGF0YS4KICAgIEV4cGVjdHMgaW5wdXQgYXMgY29udm9sdXRpb25hbCBsYXlvdXQuCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBkaW1lbnNpb246IGludCwKICAgICAgICBudW1fbGF5ZXJzOiBpbnQgPSAyLAogICAgICAgIHNraXA6IGJvb2wgPSBUcnVlLAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQogICAgICAgIHNlbGYuc2tpcCA9IHNraXAKICAgICAgICBzZWxmLmxzdG0gPSBMU1RNKGRpbWVuc2lvbiwgZGltZW5zaW9uLCBudW1fbGF5ZXJzLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZSkKCiAgICBkZWYgZm9yd2FyZChzZWxmLCB4OiB0b3JjaC5UZW5zb3IpIC0+IHRvcmNoLlRlbnNvcjoKICAgICAgICB4ID0geC5wZXJtdXRlKDIsIDAsIDEpCiAgICAgICAgeSwgXyA9IHNlbGYubHN0bSh4KQogICAgICAgIGlmIHNlbGYuc2tpcDoKICAgICAgICAgICAgeSA9IHkgKyB4CiAgICAgICAgeSA9IHkucGVybXV0ZSgxLCAyLCAwKQogICAgICAgIHJldHVybiB5ICAjIHR5cGU6IGlnbm9yZVtuby1hbnktcmV0dXJuXQoKCmNsYXNzIFN0cmVhbWFibGVSZXNuZXRCbG9jayhNb2R1bGUpOgogICAgIiIiY3VzdG9tIFJlc2lkdWFsIGJsb2NrIG1vZGVsIHdpdGggc3RyZWFtYWJsZSBjb252bmV0LgoKICAgIEFyZ3M6CiAgICAgICAgZGltIChpbnQpOiBEaW1lbnNpb24gb2YgdGhlIGlucHV0L291dHB1dC4KICAgICAgICBrZXJuZWxfc2l6ZXMgKGxpc3QpOiBMaXN0IG9mIGtlcm5lbCBzaXplcyBmb3IgdGhlIGNvbnZvbHV0aW9ucy4KICAgICAgICBkaWxhdGlvbnMgKGxpc3QpOiBMaXN0IG9mIGRpbGF0aW9ucyBmb3IgdGhlIGNvbnZvbHV0aW9ucy4KICAgICAgICBhY3RpdmF0aW9uX3BhcmFtcyAoZGljdCk6IFBhcmFtZXRlcnMgdG8gcHJvdmlkZSB0byB0aGUgKEVMVSkgYWN0aXZhdGlvbiBmdW5jdGlvbi4KICAgICAgICBub3JtIChzdHIpOiBOb3JtYWxpemF0aW9uIG1ldGhvZC4KICAgICAgICBub3JtX3BhcmFtcyAoZGljdCk6IFBhcmFtZXRlcnMgdG8gcHJvdmlkZSB0byB0aGUgdW5kZXJseWluZyBub3JtYWxpemF0aW9uIHVzZWQgYWxvbmcgd2l0aCB0aGUgY29udm9sdXRpb24uCiAgICAgICAgY2F1c2FsIChib29sKTogV2hldGhlciB0byB1c2UgZnVsbHkgY2F1c2FsIGNvbnZvbHV0aW9uLgogICAgICAgIHBhZF9tb2RlIChzdHIpOiBQYWRkaW5nIG1vZGUgZm9yIHRoZSBjb252b2x1dGlvbnMuCiAgICAgICAgY29tcHJlc3MgKGludCk6IFJlZHVjZWQgZGltZW5zaW9uYWxpdHkgaW4gcmVzaWR1YWwgYnJhbmNoZXMgKGZyb20gRGVtdWNzIHYzKS4KICAgICAgICB0cnVlX3NraXAgKGJvb2wpOiBXaGV0aGVyIHRvIHVzZSB0cnVlIHNraXAgY29ubmVjdGlvbiBvciBhIHNpbXBsZQogICAgICAgICAgICAoc3RyZWFtYWJsZSkgY29udm9sdXRpb24gYXMgdGhlIHNraXAgY29ubmVjdGlvbi4KICAgICIiIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGRpbTogaW50LAogICAgICAgIGtlcm5lbF9zaXplczogTGlzdFtpbnRdID0gWzMsIDFdLAogICAgICAgIGRpbGF0aW9uczogTGlzdFtpbnRdID0gWzEsIDFdLAogICAgICAgIGFjdGl2YXRpb25fcGFyYW1zOiBEaWN0W3N0ciwgQW55XSA9IHsiYWxwaGEiOiAxLjB9LAogICAgICAgIG5vcm06IExpdGVyYWxbCiAgICAgICAgICAgICJub25lIiwgIndlaWdodF9ub3JtIiwgInNwZWN0cmFsX25vcm0iLCAidGltZV9ncm91cF9ub3JtIgogICAgICAgIF0gPSAibm9uZSIsCiAgICAgICAgbm9ybV9wYXJhbXM6IERpY3Rbc3RyLCBBbnldID0ge30sCiAgICAgICAgY2F1c2FsOiBib29sID0gRmFsc2UsCiAgICAgICAgcGFkX21vZGU6IHN0ciA9ICJyZWZsZWN0IiwKICAgICAgICBjb21wcmVzczogaW50ID0gMiwKICAgICAgICB0cnVlX3NraXA6IGJvb2wgPSBUcnVlLAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXSA9IE5vbmUsCiAgICApOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQogICAgICAgIGFzc2VydCBsZW4oa2VybmVsX3NpemVzKSA9PSBsZW4oCiAgICAgICAgICAgIGRpbGF0aW9ucwogICAgICAgICksICJOdW1iZXIgb2Yga2VybmVsIHNpemVzIHNob3VsZCBtYXRjaCBudW1iZXIgb2YgZGlsYXRpb25zIgogICAgICAgIGhpZGRlbiA9IGRpbSAvLyBjb21wcmVzcwogICAgICAgIGJsb2NrID0gW10KICAgICAgICBmb3IgaSwgKGtlcm5lbF9zaXplLCBkaWxhdGlvbikgaW4gZW51bWVyYXRlKHppcChrZXJuZWxfc2l6ZXMsIGRpbGF0aW9ucykpOgogICAgICAgICAgICBpbl9jaHMgPSBkaW0gaWYgaSA9PSAwIGVsc2UgaGlkZGVuCiAgICAgICAgICAgIG91dF9jaHMgPSBkaW0gaWYgaSA9PSBsZW4oa2VybmVsX3NpemVzKSAtIDEgZWxzZSBoaWRkZW4KICAgICAgICAgICAgYmxvY2sgKz0gWwogICAgICAgICAgICAgICAgRUxVKCoqYWN0aXZhdGlvbl9wYXJhbXMpLAogICAgICAgICAgICAgICAgU3RyZWFtYWJsZUNvbnYxZCgKICAgICAgICAgICAgICAgICAgICBpbl9jaHMsCiAgICAgICAgICAgICAgICAgICAgb3V0X2NocywKICAgICAgICAgICAgICAgICAgICBrZXJuZWxfc2l6ZT1rZXJuZWxfc2l6ZSwKICAgICAgICAgICAgICAgICAgICBkaWxhdGlvbj1kaWxhdGlvbiwKICAgICAgICAgICAgICAgICAgICBub3JtPW5vcm0sCiAgICAgICAgICAgICAgICAgICAgbm9ybV9rd2FyZ3M9bm9ybV9wYXJhbXMsCiAgICAgICAgICAgICAgICAgICAgY2F1c2FsPWNhdXNhbCwKICAgICAgICAgICAgICAgICAgICBwYWRfbW9kZT1wYWRfbW9kZSwKICAgICAgICAgICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICAgICAgICAgIGR0eXBlPWR0eXBlLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgXQogICAgICAgIHNlbGYuYmxvY2sgPSBTZXF1ZW50aWFsKCpibG9jaykKICAgICAgICBzZWxmLnNob3J0Y3V0OiBNb2R1bGUKICAgICAgICBpZiB0cnVlX3NraXA6CiAgICAgICAgICAgIHNlbGYuc2hvcnRjdXQgPSBJZGVudGl0eSgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5zaG9ydGN1dCA9IFN0cmVhbWFibGVDb252MWQoCiAgICAgICAgICAgICAgICBkaW0sCiAgICAgICAgICAgICAgICBkaW0sCiAgICAgICAgICAgICAgICBrZXJuZWxfc2l6ZT0xLAogICAgICAgICAgICAgICAgbm9ybT1ub3JtLAogICAgICAgICAgICAgICAgbm9ybV9rd2FyZ3M9bm9ybV9wYXJhbXMsCiAgICAgICAgICAgICAgICBjYXVzYWw9Y2F1c2FsLAogICAgICAgICAgICAgICAgcGFkX21vZGU9cGFkX21vZGUsCiAgICAgICAgICAgICAgICBkZXZpY2U9ZGV2aWNlLAogICAgICAgICAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICAgICAgICAgICkKCiAgICBkZWYgZm9yd2FyZChzZWxmLCB4OiB0b3JjaC5UZW5zb3IpIC0+IHRvcmNoLlRlbnNvcjoKICAgICAgICByZXR1cm4gc2VsZi5zaG9ydGN1dCh4KSArIHNlbGYuYmxvY2soeCkgICMgdHlwZTogaWdub3JlW25vLWFueS1yZXR1cm5dCg=='),
    ('seamless/build/lib/seamless_communication/models/generator/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCg=='),
    ('seamless/build/lib/seamless_communication/models/generator/ecapa_tdnn.py', ''),
    ('seamless/build/lib/seamless_communication/models/generator/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgoKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgTWFwcGluZwoKZnJvbSBmYWlyc2VxMi5hc3NldHMgaW1wb3J0IGFzc2V0X3N0b3JlLCBkb3dubG9hZF9tYW5hZ2VyCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzIGltcG9ydCBDb25maWdMb2FkZXIsIE1vZGVsTG9hZGVyCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmdlbmVyYXRvci5idWlsZGVyIGltcG9ydCAoCiAgICBWb2NvZGVyQ29uZmlnLAogICAgY3JlYXRlX3ZvY29kZXJfbW9kZWwsCiAgICB2b2NvZGVyX2FyY2hzLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuZ2VuZXJhdG9yLnZvY29kZXIgaW1wb3J0IFByZXRzc2VsVm9jb2RlcgoKbG9hZF9wcmV0c3NlbF92b2NvZGVyX2NvbmZpZyA9IENvbmZpZ0xvYWRlcltWb2NvZGVyQ29uZmlnXShhc3NldF9zdG9yZSwgdm9jb2Rlcl9hcmNocykKCgpsb2FkX3ByZXRzc2VsX3ZvY29kZXJfbW9kZWwgPSBNb2RlbExvYWRlcltQcmV0c3NlbFZvY29kZXIsIFZvY29kZXJDb25maWddKAogICAgYXNzZXRfc3RvcmUsCiAgICBkb3dubG9hZF9tYW5hZ2VyLAogICAgbG9hZF9wcmV0c3NlbF92b2NvZGVyX2NvbmZpZywKICAgIGNyZWF0ZV92b2NvZGVyX21vZGVsLAogICAgcmVzdHJpY3RfY2hlY2twb2ludHM9RmFsc2UsCikK'),
    ('seamless/build/lib/seamless_communication/models/generator/builder.py', ''),
    ('seamless/build/lib/seamless_communication/models/generator/ecapa_tdnn_builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLgojIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZQojIE1JVF9MSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QsIE9wdGlvbmFsCgpmcm9tIGZhaXJzZXEyLm1vZGVscy51dGlscy5hcmNoX3JlZ2lzdHJ5IGltcG9ydCBBcmNoaXRlY3R1cmVSZWdpc3RyeQpmcm9tIGZhaXJzZXEyLnR5cGluZyBpbXBvcnQgRGF0YVR5cGUsIERldmljZQoKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5nZW5lcmF0b3IuZWNhcGFfdGRubiBpbXBvcnQgRUNBUEFfVEROTgoKCkBkYXRhY2xhc3MKY2xhc3MgRWNhcGFURE5OQ29uZmlnOgogICAgY2hhbm5lbHM6IExpc3RbaW50XQogICAga2VybmVsX3NpemVzOiBMaXN0W2ludF0KICAgIGRpbGF0aW9uczogTGlzdFtpbnRdCiAgICBhdHRlbnRpb25fY2hhbm5lbHM6IGludAogICAgcmVzMm5ldF9zY2FsZTogaW50CiAgICBzZV9jaGFubmVsczogaW50CiAgICBnbG9iYWxfY29udGV4dDogYm9vbAogICAgZ3JvdXBzOiBMaXN0W2ludF0KICAgIGVtYmVkX2RpbTogaW50CiAgICBpbnB1dF9kaW06IGludAoKCmVjYXBhX3Rkbm5fYXJjaHMgPSBBcmNoaXRlY3R1cmVSZWdpc3RyeVtFY2FwYVRETk5Db25maWddKCJlY2FwYV90ZG5uIikKCmVjYXBhX3Rkbm5fYXJjaCA9IGVjYXBhX3Rkbm5fYXJjaHMuZGVjb3JhdG9yCgoKQGVjYXBhX3Rkbm5fYXJjaCgiYmFzZSIpCmRlZiBfYmFzZV9lY2FwYV90ZG5uKCkgLT4gRWNhcGFURE5OQ29uZmlnOgogICAgcmV0dXJuIEVjYXBhVEROTkNvbmZpZygKICAgICAgICBjaGFubmVscz1bNTEyLCA1MTIsIDUxMiwgNTEyLCAxNTM2XSwKICAgICAgICBrZXJuZWxfc2l6ZXM9WzUsIDMsIDMsIDMsIDFdLAogICAgICAgIGRpbGF0aW9ucz1bMSwgMiwgMywgNCwgMV0sCiAgICAgICAgYXR0ZW50aW9uX2NoYW5uZWxzPTEyOCwKICAgICAgICByZXMybmV0X3NjYWxlPTgsCiAgICAgICAgc2VfY2hhbm5lbHM9MTI4LAogICAgICAgIGdsb2JhbF9jb250ZXh0PVRydWUsCiAgICAgICAgZ3JvdXBzPVsxLCAxLCAxLCAxLCAxXSwKICAgICAgICBlbWJlZF9kaW09NTEyLAogICAgICAgIGlucHV0X2RpbT04MCwKICAgICkKCgpjbGFzcyBFY2FwYVRETk5CdWlsZGVyOgogICAgIiIiCiAgICBCdWlsZGVyIG1vZHVsZSBmb3IgRUNBUEFfVEROTiBtb2RlbAogICAgIiIiCgogICAgY29uZmlnOiBFY2FwYVRETk5Db25maWcKICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXQogICAgZHR5cGU6IE9wdGlvbmFsW0RhdGFUeXBlXQoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGNvbmZpZzogRWNhcGFURE5OQ29uZmlnLAogICAgICAgICosCiAgICAgICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgICAgICBkdHlwZTogT3B0aW9uYWxbRGF0YVR5cGVdID0gTm9uZSwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gY29uZmlnOgogICAgICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICAgICAgOnBhcmFtIGRldmljZXY6CiAgICAgICAgICAgIFRoZSBkZXZpY2Ugb24gd2hpY2ggdG8gaW5pdGlhbGl6ZSBtb2R1bGVzLgogICAgICAgIDpwYXJhbSBkdHlwZToKICAgICAgICAgICAgVGhlIGRhdGEgdHlwZSBvZiBtb2R1bGUgcGFyYW1ldGVycyBhbmQgYnVmZmVycy4KICAgICAgICAiIiIKICAgICAgICBzZWxmLmNvbmZpZyA9IGNvbmZpZwoKICAgICAgICBzZWxmLmRldmljZSwgc2VsZi5kdHlwZSA9IGRldmljZSwgZHR5cGUKCiAgICBkZWYgYnVpbGRfbW9kZWwoc2VsZikgLT4gRUNBUEFfVEROTjoKICAgICAgICAiIiJCdWlsZCBhIG1vZGVsLiIiIgogICAgICAgIG1vZGVsID0gRUNBUEFfVEROTigKICAgICAgICAgICAgc2VsZi5jb25maWcuY2hhbm5lbHMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmtlcm5lbF9zaXplcywKICAgICAgICAgICAgc2VsZi5jb25maWcuZGlsYXRpb25zLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5hdHRlbnRpb25fY2hhbm5lbHMsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnJlczJuZXRfc2NhbGUsCiAgICAgICAgICAgIHNlbGYuY29uZmlnLnNlX2NoYW5uZWxzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5nbG9iYWxfY29udGV4dCwKICAgICAgICAgICAgc2VsZi5jb25maWcuZ3JvdXBzLAogICAgICAgICAgICBzZWxmLmNvbmZpZy5lbWJlZF9kaW0sCiAgICAgICAgICAgIHNlbGYuY29uZmlnLmlucHV0X2RpbSwKICAgICAgICApCiAgICAgICAgbW9kZWwudG8oZGV2aWNlPXNlbGYuZGV2aWNlLCBkdHlwZT1zZWxmLmR0eXBlKQogICAgICAgIHJldHVybiBtb2RlbAoKCmRlZiBjcmVhdGVfZWNhcGFfdGRubl9tb2RlbCgKICAgIGNvbmZpZzogRWNhcGFURE5OQ29uZmlnLAogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdID0gTm9uZSwKICAgIGR0eXBlOiBPcHRpb25hbFtEYXRhVHlwZV0gPSBOb25lLAopIC0+IEVDQVBBX1RETk46CiAgICAiIiJDcmVhdGUgYSBFQ0FQQV9URE5OIG1vZGVsLgoKICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCgogICAgcmV0dXJuIEVjYXBhVEROTkJ1aWxkZXIoY29uZmlnLCBkZXZpY2U9ZGV2aWNlLCBkdHlwZT1kdHlwZSkuYnVpbGRfbW9kZWwoKQo='),
    ('seamless/build/lib/seamless_communication/models/generator/vocoder.py', ''),
    ('seamless/build/lib/seamless_communication/models/aligner/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuYWxpZ25lci5tb2RlbCBpbXBvcnQgKAogICAgVW5pdFkyQWxpZ25tZW50RW5jb2RlciBhcyBVbml0WTJBbGlnbm1lbnRFbmNvZGVyLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuYWxpZ25lci5tb2RlbCBpbXBvcnQgKAogICAgVW5pdFkyQWxpZ25tZW50RnJvbnRlbmQgYXMgVW5pdFkyQWxpZ25tZW50RnJvbnRlbmQsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5hbGlnbmVyLm1vZGVsIGltcG9ydCAoCiAgICBVbml0WTJBbGlnbm1lbnRNb2RlbCBhcyBVbml0WTJBbGlnbm1lbnRNb2RlbCwKKQo='),
    ('seamless/build/lib/seamless_communication/models/aligner/loader.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gdHlwaW5nIGltcG9ydCBBbnksIExpc3QsIE1hcHBpbmcKCmltcG9ydCB0b3JjaApmcm9tIGZhaXJzZXEyLmFzc2V0cyBpbXBvcnQgYXNzZXRfc3RvcmUsIGRvd25sb2FkX21hbmFnZXIKZnJvbSBmYWlyc2VxMi5tb2RlbHMudXRpbHMgaW1wb3J0IENvbmZpZ0xvYWRlciwgTW9kZWxMb2FkZXIKCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMuYWxpZ25lci5idWlsZGVyIGltcG9ydCAoCiAgICBVbml0WTJBbGlnbm1lbnRDb25maWcsCiAgICBhbGlnbmVyX2FyY2hzLAogICAgY3JlYXRlX3VuaXR5Ml9hbGlnbm1lbnRfbW9kZWwsCikKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy5hbGlnbmVyLm1vZGVsIGltcG9ydCBVbml0WTJBbGlnbm1lbnRNb2RlbApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLnVuaXR5LmNoYXJfdG9rZW5pemVyIGltcG9ydCBsb2FkX3VuaXR5X2NoYXJfdG9rZW5pemVyCgoKZGVmIGNvbnZlcnRfdW5pdHkyX2FsaWduZXJfY2hlY2twb2ludCgKICAgIGNoZWNrcG9pbnQ6IE1hcHBpbmdbc3RyLCBBbnldLCBjb25maWc6IFVuaXRZMkFsaWdubWVudENvbmZpZwopIC0+IE1hcHBpbmdbc3RyLCBBbnldOgogICAgaWYgKAogICAgICAgICJtb2RlbCIgaW4gY2hlY2twb2ludAogICAgICAgIGFuZCAiYWxpZ25tZW50X2VuY29kZXIudF9jb252LjEud2VpZ2h0IiBpbiBjaGVja3BvaW50WyJtb2RlbCJdCiAgICApOgogICAgICAgIHJldHVybiBjaGVja3BvaW50CgogICAgYWxpZ25tZW50X2Zyb250ZW5kX3N0YXRlZGljdCA9IHt9CiAgICB0ZXh0X2VtYl9zdGF0ZV9rZXltYXAgPSB7IndlaWdodCI6ICJhbGlnbm1lbnRfZnJvbnRlbmQuZW1iZWRfdGV4dC53ZWlnaHQifQogICAgZm9yIGssIHYgaW4gY2hlY2twb2ludFsidGV4dF9lbWJfc3RhdGUiXS5pdGVtcygpOgogICAgICAgIGFsaWdubWVudF9mcm9udGVuZF9zdGF0ZWRpY3RbdGV4dF9lbWJfc3RhdGVfa2V5bWFwW2tdXSA9IHYKCiAgICB1bml0X2VtYl9zdGF0ZV9rZXltYXAgPSB7IndlaWdodCI6ICJhbGlnbm1lbnRfZnJvbnRlbmQuZW1iZWRfdW5pdC53ZWlnaHQifQogICAgZm9yIGssIHYgaW4gY2hlY2twb2ludFsidW5pdF9lbWJfc3RhdGUiXS5pdGVtcygpOgogICAgICAgIGFsaWdubWVudF9mcm9udGVuZF9zdGF0ZWRpY3RbdW5pdF9lbWJfc3RhdGVfa2V5bWFwW2tdXSA9IHYKCiAgICBhbGlnbm1lbnRfZW5jb2Rlcl9zdGF0ZV9kaWN0ID0ge30KICAgIGZvciBrLCB2IGluIGNoZWNrcG9pbnRbImFsaWduZXJfc3RhdGUiXS5pdGVtcygpOgogICAgICAgIGFsaWdubWVudF9lbmNvZGVyX3N0YXRlX2RpY3RbZiJhbGlnbm1lbnRfZW5jb2Rlci57a30iXSA9IHYKCiAgICBtb2RlbF9zdGF0ZSA9IHsKICAgICAgICAqKmFsaWdubWVudF9lbmNvZGVyX3N0YXRlX2RpY3QsCiAgICAgICAgKiphbGlnbm1lbnRfZnJvbnRlbmRfc3RhdGVkaWN0LAogICAgfQoKICAgIGNoYXJfZW1iZWRzID0gbW9kZWxfc3RhdGVbImFsaWdubWVudF9mcm9udGVuZC5lbWJlZF90ZXh0LndlaWdodCJdCgogICAgaW5kZXhfbWFwcGluZyA9IF9nZXRfY2hhcl9pbmRleF9tYXBwaW5nKGNvbmZpZykKICAgIHZvY2FiX3NpemUgPSBsZW4oaW5kZXhfbWFwcGluZykKICAgIGNoYXJfZW1iZWRzW3RvcmNoLmFyYW5nZSh2b2NhYl9zaXplKV0gPSBjaGFyX2VtYmVkc1tpbmRleF9tYXBwaW5nXQoKICAgIGNoZWNrcG9pbnRbIm1vZGVsIl0gPSBtb2RlbF9zdGF0ZQoKICAgIHJldHVybiBjaGVja3BvaW50CgoKZGVmIF9nZXRfY2hhcl9pbmRleF9tYXBwaW5nKGNvbmZpZzogVW5pdFkyQWxpZ25tZW50Q29uZmlnKSAtPiBMaXN0W2ludF06CiAgICBjaGFyX3Rva2VuaXplciA9IGxvYWRfdW5pdHlfY2hhcl90b2tlbml6ZXIoY29uZmlnLm1vZGVsX25hbWVfb3JfY2FyZCkKICAgIHNwbV9vcmRlciA9IFsKICAgICAgICBjaGFyX3Rva2VuaXplci5tb2RlbC5pbmRleF90b190b2tlbihpKQogICAgICAgIGZvciBpIGluIHJhbmdlKGNoYXJfdG9rZW5pemVyLm1vZGVsLnZvY2FidWxhcnlfc2l6ZSkKICAgIF1bNDpdCiAgICBzcG1fdG9fZGljdF9tYXBwaW5nID0gewogICAgICAgIGNoOiBpZHgKICAgICAgICBmb3IgKGlkeCwgY2gpIGluIHppcCgKICAgICAgICAgICAgcmFuZ2UoNCwgY2hhcl90b2tlbml6ZXIubW9kZWwudm9jYWJ1bGFyeV9zaXplKSwKICAgICAgICAgICAgc29ydGVkKHNwbV9vcmRlciksCiAgICAgICAgKQogICAgfQogICAgbW9kZWxfdG9fZGljdF9tYXBwaW5nID0gWzAsIDEsIDIsIDNdICsgW3NwbV90b19kaWN0X21hcHBpbmdbY2hdIGZvciBjaCBpbiBzcG1fb3JkZXJdCiAgICByZXR1cm4gbW9kZWxfdG9fZGljdF9tYXBwaW5nCgoKbG9hZF91bml0eTJfYWxpZ25tZW50X2NvbmZpZyA9IENvbmZpZ0xvYWRlcltVbml0WTJBbGlnbm1lbnRDb25maWddKAogICAgYXNzZXRfc3RvcmUsIGFsaWduZXJfYXJjaHMKKQoKbG9hZF91bml0eTJfYWxpZ25tZW50X21vZGVsID0gTW9kZWxMb2FkZXJbVW5pdFkyQWxpZ25tZW50TW9kZWwsIFVuaXRZMkFsaWdubWVudENvbmZpZ10oCiAgICBhc3NldF9zdG9yZSwKICAgIGRvd25sb2FkX21hbmFnZXIsCiAgICBsb2FkX3VuaXR5Ml9hbGlnbm1lbnRfY29uZmlnLAogICAgY3JlYXRlX3VuaXR5Ml9hbGlnbm1lbnRfbW9kZWwsCiAgICBjb252ZXJ0X3VuaXR5Ml9hbGlnbmVyX2NoZWNrcG9pbnQsCiAgICByZXN0cmljdF9jaGVja3BvaW50cz1GYWxzZSwKKQo='),
    ('seamless/build/lib/seamless_communication/models/aligner/builder.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gZGF0YWNsYXNzZXMgaW1wb3J0IGRhdGFjbGFzcwpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwsIFVuaW9uCgppbXBvcnQgdG9yY2gKZnJvbSBmYWlyc2VxMi5hc3NldHMuY2FyZCBpbXBvcnQgQXNzZXRDYXJkCmZyb20gZmFpcnNlcTIuZGF0YS52b2NhYnVsYXJ5X2luZm8gaW1wb3J0IFZvY2FidWxhcnlJbmZvCmZyb20gZmFpcnNlcTIubW9kZWxzLnV0aWxzLmFyY2hfcmVnaXN0cnkgaW1wb3J0IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5CmZyb20gZmFpcnNlcTIubm4uZW1iZWRkaW5nIGltcG9ydCBTdGFuZGFyZEVtYmVkZGluZywgaW5pdF9zY2FsZWRfZW1iZWRkaW5nCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmFsaWduZXIubW9kZWwgaW1wb3J0ICgKICAgIFVuaXRZMkFsaWdubWVudEVuY29kZXIsCiAgICBVbml0WTJBbGlnbm1lbnRGcm9udGVuZCwKICAgIFVuaXRZMkFsaWdubWVudE1vZGVsLAopCmZyb20gc2VhbWxlc3NfY29tbXVuaWNhdGlvbi5tb2RlbHMudW5pdHkuY2hhcl90b2tlbml6ZXIgaW1wb3J0IGxvYWRfdW5pdHlfY2hhcl90b2tlbml6ZXIKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0eS5sb2FkZXIgaW1wb3J0IGxvYWRfdW5pdHlfdW5pdF90b2tlbml6ZXIKCgpAZGF0YWNsYXNzCmNsYXNzIEFsaWdubWVudEVuY29kZXJDb25maWc6CiAgICBtb2RlbF9kaW06IGludAoKICAgIGZlYXRfZGltOiBpbnQKCiAgICBudW1fdGV4dF9sYXllcnM6IGludAoKICAgIG51bV9mZWF0X2xheWVyczogaW50CgogICAgZHJvcG91dDogZmxvYXQKCiAgICB0ZW1wZXJhdHVyZTogZmxvYXQKCiAgICByZWR1Y3Rpb25fZmFjdG9yOiBpbnQKCgpAZGF0YWNsYXNzCmNsYXNzIFVuaXRZMkFsaWdubWVudEZyb250ZW5kQ29uZmlnOgogICAgdW5pdF92b2NhYl9pbmZvOiBWb2NhYnVsYXJ5SW5mbwoKICAgIHRleHRfdm9jYWJfc2l6ZTogaW50CgoKQGRhdGFjbGFzcwpjbGFzcyBVbml0WTJBbGlnbm1lbnRDb25maWc6CiAgICBtb2RlbF9uYW1lX29yX2NhcmQ6IFVuaW9uW3N0ciwgQXNzZXRDYXJkXQoKICAgIGFsaWdubWVudF9lbmNvZGVyX2NvbmZpZzogQWxpZ25tZW50RW5jb2RlckNvbmZpZwoKICAgIGFsaWdubWVudF9mcm9udGVuZF9jb25maWc6IFVuaXRZMkFsaWdubWVudEZyb250ZW5kQ29uZmlnCgoKYWxpZ25lcl9hcmNocyA9IEFyY2hpdGVjdHVyZVJlZ2lzdHJ5W1VuaXRZMkFsaWdubWVudENvbmZpZ10oInVuaXR5Ml9hbGlnbmVyIikKCmFsaWduZXJfYXJjaCA9IGFsaWduZXJfYXJjaHMuZGVjb3JhdG9yCgoKQGFsaWduZXJfYXJjaCgibmFyX3QydV9hbGlnbmVyIikKZGVmIF9hbGlnbmVyX25hcl90MnUoKSAtPiBVbml0WTJBbGlnbm1lbnRDb25maWc6CiAgICBlbmNvZGVyX2NvbmZpZyA9IEFsaWdubWVudEVuY29kZXJDb25maWcoCiAgICAgICAgbW9kZWxfZGltPTEwMjQsCiAgICAgICAgZmVhdF9kaW09MTAyNCwKICAgICAgICBudW1fdGV4dF9sYXllcnM9MiwKICAgICAgICBudW1fZmVhdF9sYXllcnM9MywKICAgICAgICBkcm9wb3V0PTAuMSwKICAgICAgICB0ZW1wZXJhdHVyZT0xLjAsCiAgICAgICAgcmVkdWN0aW9uX2ZhY3Rvcj0xLAogICAgKQoKICAgIGZyb250ZW5kX2NvbmZpZyA9IFVuaXRZMkFsaWdubWVudEZyb250ZW5kQ29uZmlnKAogICAgICAgIHVuaXRfdm9jYWJfaW5mbz1Wb2NhYnVsYXJ5SW5mbygKICAgICAgICAgICAgc2l6ZT0xMDA4MiwgdW5rX2lkeD0zLCBib3NfaWR4PTAsIGVvc19pZHg9MiwgcGFkX2lkeD0xCiAgICAgICAgKSwKICAgICAgICB0ZXh0X3ZvY2FiX3NpemU9MTA5NDMsCiAgICApCgogICAgcmV0dXJuIFVuaXRZMkFsaWdubWVudENvbmZpZygKICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ9Im5hcl90MnVfYWxpZ25lciIsCiAgICAgICAgYWxpZ25tZW50X2VuY29kZXJfY29uZmlnPWVuY29kZXJfY29uZmlnLAogICAgICAgIGFsaWdubWVudF9mcm9udGVuZF9jb25maWc9ZnJvbnRlbmRfY29uZmlnLAogICAgKQoKCmNsYXNzIFVuaXRZMkFsaWdubWVudEJ1aWxkZXI6CiAgICBjb25maWc6IFVuaXRZMkFsaWdubWVudENvbmZpZwogICAgZGV2aWNlOiBPcHRpb25hbFtEZXZpY2VdCiAgICBkdHlwZTogRGF0YVR5cGUKCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBjb25maWc6IFVuaXRZMkFsaWdubWVudENvbmZpZywKICAgICAgICAqLAogICAgICAgIGRldmljZTogT3B0aW9uYWxbRGV2aWNlXSA9IE5vbmUsCiAgICAgICAgZHR5cGU6IERhdGFUeXBlID0gdG9yY2guZmxvYXQzMiwKICAgICkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICA6cGFyYW0gY29uZmlnOgogICAgICAgICAgICBUaGUgY29uZmlndXJhdGlvbiB0byB1c2UuCiAgICAgICAgOnBhcmFtIGRldmljZToKICAgICAgICAgICAgVGhlIGRldmljZSBvbiB3aGljaCB0byBpbml0aWFsaXplIG1vZHVsZXMuCiAgICAgICAgOnBhcmFtIGR0eXBlOgogICAgICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29uZmlnID0gY29uZmlnCgogICAgICAgIHNlbGYuZGV2aWNlLCBzZWxmLmR0eXBlID0gZGV2aWNlLCBkdHlwZQoKICAgIGRlZiBidWlsZF9tb2RlbChzZWxmKSAtPiBVbml0WTJBbGlnbm1lbnRNb2RlbDoKICAgICAgICBhbGlnbm1lbnRfZnJvbnRlbmQgPSBzZWxmLmJ1aWxkX2FsaWdubWVudF9mcm9udGVuZCgpCgogICAgICAgIGFsaWdubWVudF9lbmNvZGVyID0gc2VsZi5idWlsZF9hbGlnbm1lbnRfZW5jb2RlcigpCgogICAgICAgIHJldHVybiBVbml0WTJBbGlnbm1lbnRNb2RlbChhbGlnbm1lbnRfZnJvbnRlbmQsIGFsaWdubWVudF9lbmNvZGVyKQoKICAgIGRlZiBidWlsZF9hbGlnbm1lbnRfZnJvbnRlbmQoc2VsZikgLT4gVW5pdFkyQWxpZ25tZW50RnJvbnRlbmQ6CiAgICAgICAgdGV4dF90b2tlbml6ZXIgPSBsb2FkX3VuaXR5X2NoYXJfdG9rZW5pemVyKHNlbGYuY29uZmlnLm1vZGVsX25hbWVfb3JfY2FyZCkKCiAgICAgICAgdW5pdF90b2tlbml6ZXIgPSBsb2FkX3VuaXR5X3VuaXRfdG9rZW5pemVyKHNlbGYuY29uZmlnLm1vZGVsX25hbWVfb3JfY2FyZCkKCiAgICAgICAgZW1iZWRfdGV4dCA9IFN0YW5kYXJkRW1iZWRkaW5nKAogICAgICAgICAgICBudW1fZW1iZWRkaW5ncz1zZWxmLmNvbmZpZy5hbGlnbm1lbnRfZnJvbnRlbmRfY29uZmlnLnRleHRfdm9jYWJfc2l6ZSwKICAgICAgICAgICAgZW1iZWRkaW5nX2RpbT1zZWxmLmNvbmZpZy5hbGlnbm1lbnRfZW5jb2Rlcl9jb25maWcubW9kZWxfZGltLAogICAgICAgICAgICBwYWRfaWR4PXNlbGYuY29uZmlnLmFsaWdubWVudF9mcm9udGVuZF9jb25maWcudW5pdF92b2NhYl9pbmZvLnBhZF9pZHgsCiAgICAgICAgICAgIGluaXRfZm49aW5pdF9zY2FsZWRfZW1iZWRkaW5nLAogICAgICAgICAgICBkZXZpY2U9c2VsZi5kZXZpY2UsCiAgICAgICAgICAgIGR0eXBlPXNlbGYuZHR5cGUsCiAgICAgICAgKQoKICAgICAgICBlbWJlZF91bml0ID0gU3RhbmRhcmRFbWJlZGRpbmcoCiAgICAgICAgICAgIG51bV9lbWJlZGRpbmdzPXNlbGYuY29uZmlnLmFsaWdubWVudF9mcm9udGVuZF9jb25maWcudW5pdF92b2NhYl9pbmZvLnNpemUsCiAgICAgICAgICAgIGVtYmVkZGluZ19kaW09c2VsZi5jb25maWcuYWxpZ25tZW50X2VuY29kZXJfY29uZmlnLm1vZGVsX2RpbSwKICAgICAgICAgICAgcGFkX2lkeD1zZWxmLmNvbmZpZy5hbGlnbm1lbnRfZnJvbnRlbmRfY29uZmlnLnVuaXRfdm9jYWJfaW5mby5wYWRfaWR4LAogICAgICAgICAgICBpbml0X2ZuPWluaXRfc2NhbGVkX2VtYmVkZGluZywKICAgICAgICAgICAgZGV2aWNlPXNlbGYuZGV2aWNlLAogICAgICAgICAgICBkdHlwZT1zZWxmLmR0eXBlLAogICAgICAgICkKCiAgICAgICAgcmV0dXJuIFVuaXRZMkFsaWdubWVudEZyb250ZW5kKAogICAgICAgICAgICBlbWJlZF90ZXh0LCBlbWJlZF91bml0LCB0ZXh0X3Rva2VuaXplciwgdW5pdF90b2tlbml6ZXIKICAgICAgICApCgogICAgZGVmIGJ1aWxkX2FsaWdubWVudF9lbmNvZGVyKHNlbGYsIHRyYWluaW5nOiBib29sID0gRmFsc2UpIC0+IFVuaXRZMkFsaWdubWVudEVuY29kZXI6CiAgICAgICAgY2ZnID0gc2VsZi5jb25maWcuYWxpZ25tZW50X2VuY29kZXJfY29uZmlnCiAgICAgICAgYWxpZ25tZW50X2VuY29kZXIgPSBVbml0WTJBbGlnbm1lbnRFbmNvZGVyKAogICAgICAgICAgICBlbWJlZF9kaW09Y2ZnLm1vZGVsX2RpbSwKICAgICAgICAgICAgZmVhdF9kaW09Y2ZnLmZlYXRfZGltLAogICAgICAgICAgICB0ZXh0X2xheWVycz1jZmcubnVtX3RleHRfbGF5ZXJzLAogICAgICAgICAgICBmZWF0X2xheWVycz1jZmcubnVtX2ZlYXRfbGF5ZXJzLAogICAgICAgICAgICBkcm9wb3V0PWNmZy5kcm9wb3V0LAogICAgICAgICAgICB0ZW1wZXJhdHVyZT1jZmcudGVtcGVyYXR1cmUsCiAgICAgICAgICAgIHJlZHVjdGlvbl9mYWN0b3I9Y2ZnLnJlZHVjdGlvbl9mYWN0b3IsCiAgICAgICAgICAgIGR0eXBlPXNlbGYuZHR5cGUsCiAgICAgICAgKQogICAgICAgIGFsaWdubWVudF9lbmNvZGVyLnRyYWluaW5nID0gdHJhaW5pbmcKCiAgICAgICAgcmV0dXJuIGFsaWdubWVudF9lbmNvZGVyCgoKZGVmIGNyZWF0ZV91bml0eTJfYWxpZ25tZW50X21vZGVsKAogICAgY29uZmlnOiBVbml0WTJBbGlnbm1lbnRDb25maWcsCiAgICBkZXZpY2U6IE9wdGlvbmFsW0RldmljZV0gPSBOb25lLAogICAgZHR5cGU6IERhdGFUeXBlID0gdG9yY2guZmxvYXQzMiwKKSAtPiBVbml0WTJBbGlnbm1lbnRNb2RlbDoKICAgICIiIkNyZWF0ZSBhIFVuaXRZIG1vZGVsLgoKICAgIDpwYXJhbSBjb25maWc6CiAgICAgICAgVGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlLgogICAgOnBhcmFtIGRldmljZToKICAgICAgICBUaGUgZGV2aWNlIG9uIHdoaWNoIHRvIGluaXRpYWxpemUgbW9kdWxlcy4KICAgIDpwYXJhbSBkdHlwZToKICAgICAgICBUaGUgZGF0YSB0eXBlIG9mIG1vZHVsZSBwYXJhbWV0ZXJzIGFuZCBidWZmZXJzLgogICAgIiIiCgogICAgdW5pdHkyX2FsaWduZXJfYnVpbGRlciA9IFVuaXRZMkFsaWdubWVudEJ1aWxkZXIoCiAgICAgICAgY29uZmlnLAogICAgICAgIGRldmljZT1kZXZpY2UsCiAgICAgICAgZHR5cGU9ZHR5cGUsCiAgICApCgogICAgcmV0dXJuIHVuaXR5Ml9hbGlnbmVyX2J1aWxkZXIuYnVpbGRfbW9kZWwoKQo='),
    ('seamless/build/lib/seamless_communication/models/aligner/alignment_extractor.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmltcG9ydCBvcwpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBMaXN0LCBUdXBsZSwgVW5pb24KCmltcG9ydCBudW1weQppbXBvcnQgdG9yY2gKaW1wb3J0IHRvcmNoLm5uIGFzIG5uCmltcG9ydCB0b3JjaGF1ZGlvCmZyb20gZmFpcnNlcTIudHlwaW5nIGltcG9ydCBEYXRhVHlwZSwgRGV2aWNlCmZyb20gZmFpcnNlcTIuZGF0YS50eXBpbmcgaW1wb3J0IFN0cmluZ0xpa2UKZnJvbSB0b3JjaCBpbXBvcnQgVGVuc29yCgpmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24ubW9kZWxzLmFsaWduZXIubG9hZGVyIGltcG9ydCBsb2FkX3VuaXR5Ml9hbGlnbm1lbnRfbW9kZWwKZnJvbSBzZWFtbGVzc19jb21tdW5pY2F0aW9uLm1vZGVscy51bml0X2V4dHJhY3RvciBpbXBvcnQgVW5pdEV4dHJhY3RvcgoKdHJ5OgogICAgaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAoKICAgIG1hdHBsb3RsaWJfYXZhaWxhYmxlID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBtYXRwbG90bGliX2F2YWlsYWJsZSA9IEZhbHNlCgoKY2xhc3MgQWxpZ25tZW50RXh0cmFjdG9yKG5uLk1vZHVsZSk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBhbGlnbmVyX21vZGVsX25hbWVfb3JfY2FyZDogc3RyLAogICAgICAgIHVuaXRfZXh0cmFjdG9yX21vZGVsX25hbWVfb3JfY2FyZDogVW5pb25bQW55LCBzdHJdID0gTm9uZSwKICAgICAgICB1bml0X2V4dHJhY3Rvcl9vdXRwdXRfbGF5ZXI6IFVuaW9uW0FueSwgaW50XSA9IE5vbmUsCiAgICAgICAgdW5pdF9leHRyYWN0b3Jfa21lYW5zX21vZGVsX3VyaTogVW5pb25bQW55LCBzdHJdID0gTm9uZSwKICAgICAgICBkZXZpY2U6IERldmljZSA9IERldmljZSgiY3B1IiksCiAgICAgICAgZHR5cGU6IERhdGFUeXBlID0gdG9yY2guZmxvYXQzMiwKICAgICk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5kZXZpY2UgPSBkZXZpY2UKICAgICAgICBzZWxmLmR0eXBlID0gZHR5cGUKCiAgICAgICAgaWYgc2VsZi5kdHlwZSA9PSB0b3JjaC5mbG9hdDE2IGFuZCBzZWxmLmRldmljZSA9PSBEZXZpY2UoImNwdSIpOgogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoIkZQMTYgb25seSB3b3JrcyBvbiBHUFUsIHNldCBhcmdzIGFjY29yZGluZ2x5IikKCiAgICAgICAgc2VsZi5hbGlnbm1lbnRfbW9kZWwgPSBsb2FkX3VuaXR5Ml9hbGlnbm1lbnRfbW9kZWwoCiAgICAgICAgICAgIGFsaWduZXJfbW9kZWxfbmFtZV9vcl9jYXJkLCBkZXZpY2U9c2VsZi5kZXZpY2UsIGR0eXBlPXNlbGYuZHR5cGUKICAgICAgICApCiAgICAgICAgc2VsZi5hbGlnbm1lbnRfbW9kZWwuZXZhbCgpCgogICAgICAgIHNlbGYudW5pdF9leHRyYWN0b3IgPSBOb25lCiAgICAgICAgc2VsZi51bml0X2V4dHJhY3Rvcl9vdXRwdXRfbGF5ZXIgPSAwCgogICAgICAgIGlmIHVuaXRfZXh0cmFjdG9yX21vZGVsX25hbWVfb3JfY2FyZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi51bml0X2V4dHJhY3RvciA9IFVuaXRFeHRyYWN0b3IoCiAgICAgICAgICAgICAgICB1bml0X2V4dHJhY3Rvcl9tb2RlbF9uYW1lX29yX2NhcmQsCiAgICAgICAgICAgICAgICB1bml0X2V4dHJhY3Rvcl9rbWVhbnNfbW9kZWxfdXJpLAogICAgICAgICAgICAgICAgZGV2aWNlPWRldmljZSwKICAgICAgICAgICAgICAgIGR0eXBlPWR0eXBlLAogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbGYudW5pdF9leHRyYWN0b3Jfb3V0cHV0X2xheWVyID0gdW5pdF9leHRyYWN0b3Jfb3V0cHV0X2xheWVyCgogICAgZGVmIGxvYWRfYXVkaW8oCiAgICAgICAgc2VsZiwgYXVkaW9fcGF0aDogc3RyLCBzYW1wbGluZ19yYXRlOiBpbnQgPSAxNl8wMDAKICAgICkgLT4gVHVwbGVbVGVuc29yLCBpbnRdOgogICAgICAgIGFzc2VydCBvcy5wYXRoLmV4aXN0cyhhdWRpb19wYXRoKQogICAgICAgIGF1ZGlvLCByYXRlID0gdG9yY2hhdWRpby5sb2FkKGF1ZGlvX3BhdGgpCiAgICAgICAgaWYgcmF0ZSAhPSBzYW1wbGluZ19yYXRlOgogICAgICAgICAgICBhdWRpbyA9IHRvcmNoYXVkaW8uZnVuY3Rpb25hbC5yZXNhbXBsZShhdWRpbywgcmF0ZSwgc2FtcGxpbmdfcmF0ZSkKICAgICAgICAgICAgcmF0ZSA9IHNhbXBsaW5nX3JhdGUKICAgICAgICByZXR1cm4gYXVkaW8sIHJhdGUKCiAgICBkZWYgcHJlcGFyZV9hdWRpbyhzZWxmLCBhdWRpbzogVW5pb25bc3RyLCBUZW5zb3JdKSAtPiBUZW5zb3I6CiAgICAgICAgIyBUT0RPOiBzd2l0Y2ggdG8gZmFpcnNlcTIgZGF0YSBwaXBlbGluZSBvbmNlIGl0IHN1cHBvcnRzIHJlc2FtcGxpbmcKICAgICAgICBpZiBpc2luc3RhbmNlKGF1ZGlvLCBzdHIpOgogICAgICAgICAgICBhdWRpbywgXyA9IHNlbGYubG9hZF9hdWRpbyhhdWRpbywgc2FtcGxpbmdfcmF0ZT0xNl8wMDApCiAgICAgICAgaWYgYXVkaW8ubmRpbSA+IDE6CiAgICAgICAgICAgICMgYXZlcmFnaW5nIG92ZXIgY2hhbm5lbHMKICAgICAgICAgICAgYXNzZXJ0IGF1ZGlvLnNpemUoMCkgPCBhdWRpby5zaXplKAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICApLCAiRXhwZWN0ZWQgW0NoYW5uZWwsVGltZV0gc2hhcGUsIGJ1dCBDaGFubmVsID4gVGltZSIKICAgICAgICAgICAgYXVkaW8gPSBhdWRpby5tZWFuKDApCiAgICAgICAgYXNzZXJ0ICgKICAgICAgICAgICAgYXVkaW8ubmRpbSA9PSAxCiAgICAgICAgKSwgZiJBZnRlciBjaGFubmVsIGF2ZXJhZ2luZyBhdWRpbyBzaGFwZSBleHBlY3RlZCB0byBiZSBbVGltZV0gaS5lLiBtb25vIGF1ZGlvIgogICAgICAgIGF1ZGlvID0gYXVkaW8udG8oc2VsZi5kZXZpY2UsIHNlbGYuZHR5cGUpCgogICAgICAgIHJldHVybiBhdWRpbwoKICAgIGRlZiBleHRyYWN0X3VuaXRzKHNlbGYsIGF1ZGlvOiBUZW5zb3IpIC0+IFRlbnNvcjoKICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZSgKICAgICAgICAgICAgc2VsZi51bml0X2V4dHJhY3RvciwgVW5pdEV4dHJhY3RvcgogICAgICAgICksICJVbml0IGV4dHJhY3RvciBpcyByZXF1aXJlZCB0byBnZXQgdW5pdHMgZnJvbSBhdWRpbyB0ZW5zb3IiCiAgICAgICAgdW5pdHMgPSBzZWxmLnVuaXRfZXh0cmFjdG9yLnByZWRpY3QoYXVkaW8sIHNlbGYudW5pdF9leHRyYWN0b3Jfb3V0cHV0X2xheWVyIC0gMSkKICAgICAgICByZXR1cm4gdW5pdHMKCiAgICBAdG9yY2guaW5mZXJlbmNlX21vZGUoKQogICAgZGVmIGV4dHJhY3RfYWxpZ25tZW50KAogICAgICAgIHNlbGYsCiAgICAgICAgYXVkaW86IFVuaW9uW3N0ciwgVGVuc29yXSwKICAgICAgICB0ZXh0OiBzdHIsCiAgICAgICAgcGxvdDogYm9vbCA9IEZhbHNlLAogICAgICAgIGFkZF90cmFpbGluZ19zaWxlbmNlOiBib29sID0gRmFsc2UsCiAgICApIC0+IFR1cGxlW1RlbnNvciwgVGVuc29yLCBMaXN0W1N0cmluZ0xpa2VdXToKICAgICAgICBpZiBpc2luc3RhbmNlKGF1ZGlvLCBUZW5zb3IpIGFuZCBub3QgdG9yY2guaXNfZmxvYXRpbmdfcG9pbnQoYXVkaW8pOgogICAgICAgICAgICAjIHdlIGdvdCB1bml0cyBhcyBhdWRpbyBhcmcKICAgICAgICAgICAgdW5pdHMgPSBhdWRpbwogICAgICAgICAgICB1bml0cyA9IHVuaXRzLnRvKHNlbGYuZGV2aWNlKQogICAgICAgICAgICBhdWRpb190ZW5zb3IgPSBOb25lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYXVkaW9fdGVuc29yID0gc2VsZi5wcmVwYXJlX2F1ZGlvKGF1ZGlvKQogICAgICAgICAgICB1bml0cyA9IHNlbGYuZXh0cmFjdF91bml0cyhhdWRpb190ZW5zb3IpCgogICAgICAgIHRva2VuaXplZF91bml0X2lkcyA9IHNlbGYuYWxpZ25tZW50X21vZGVsLmFsaWdubWVudF9mcm9udGVuZC50b2tlbml6ZV91bml0KAogICAgICAgICAgICB1bml0cwogICAgICAgICkudW5zcXVlZXplKDApCiAgICAgICAgdG9rZW5pemVkX3RleHRfaWRzID0gKAogICAgICAgICAgICBzZWxmLmFsaWdubWVudF9tb2RlbC5hbGlnbm1lbnRfZnJvbnRlbmQudG9rZW5pemVfdGV4dCgKICAgICAgICAgICAgICAgIHRleHQsIGFkZF90cmFpbGluZ19zaWxlbmNlPWFkZF90cmFpbGluZ19zaWxlbmNlCiAgICAgICAgICAgICkKICAgICAgICAgICAgLnRvKHNlbGYuZGV2aWNlKQogICAgICAgICAgICAudW5zcXVlZXplKDApCiAgICAgICAgKQogICAgICAgIHRva2VuaXplZF90ZXh0X3Rva2VucyA9ICgKICAgICAgICAgICAgc2VsZi5hbGlnbm1lbnRfbW9kZWwuYWxpZ25tZW50X2Zyb250ZW5kLnRva2VuaXplX3RleHRfdG9fdG9rZW5zKAogICAgICAgICAgICAgICAgdGV4dCwgYWRkX3RyYWlsaW5nX3NpbGVuY2U9YWRkX3RyYWlsaW5nX3NpbGVuY2UKICAgICAgICAgICAgKQogICAgICAgICkKICAgICAgICBfLCBhbGlnbm1lbnRfZHVyYXRpb25zID0gc2VsZi5hbGlnbm1lbnRfbW9kZWwoCiAgICAgICAgICAgIHRva2VuaXplZF90ZXh0X2lkcywgdG9rZW5pemVkX3VuaXRfaWRzCiAgICAgICAgKQoKICAgICAgICBpZiBwbG90IGFuZCAoYXVkaW9fdGVuc29yIGlzIG5vdCBOb25lKToKICAgICAgICAgICAgc2VsZi5wbG90X2FsaWdubWVudCgKICAgICAgICAgICAgICAgIGF1ZGlvX3RlbnNvci5jcHUoKSwgdG9rZW5pemVkX3RleHRfdG9rZW5zLCBhbGlnbm1lbnRfZHVyYXRpb25zLmNwdSgpCiAgICAgICAgICAgICkKCiAgICAgICAgcmV0dXJuIGFsaWdubWVudF9kdXJhdGlvbnMsIHRva2VuaXplZF90ZXh0X2lkcywgdG9rZW5pemVkX3RleHRfdG9rZW5zCgogICAgZGVmIGRldG9rZW5pemVfdGV4dChzZWxmLCB0b2tlbml6ZWRfdGV4dF9pZHM6IFRlbnNvcikgLT4gU3RyaW5nTGlrZToKICAgICAgICByZXR1cm4gc2VsZi5hbGlnbm1lbnRfbW9kZWwuYWxpZ25tZW50X2Zyb250ZW5kLmRlY29kZV90ZXh0KHRva2VuaXplZF90ZXh0X2lkcykKCiAgICBkZWYgcGxvdF9hbGlnbm1lbnQoCiAgICAgICAgc2VsZiwgYXVkaW86IFRlbnNvciwgdGV4dF90b2tlbnM6IExpc3RbU3RyaW5nTGlrZV0sIGR1cmF0aW9uczogVGVuc29yCiAgICApIC0+IE5vbmU6CiAgICAgICAgaWYgbm90IG1hdHBsb3RsaWJfYXZhaWxhYmxlOgogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoCiAgICAgICAgICAgICAgICAiUGxlYXNlIGBwaXAgaW5zdGFsbCBtYXRwbG90bGliYCBpbiBvcmRlciB0byB1c2UgcGxvdCBhbGlnbm1lbnQuIgogICAgICAgICAgICApCiAgICAgICAgXywgYXggPSBwbHQuc3VicGxvdHMoZmlnc2l6ZT0oMjIsIDMuNSkpCiAgICAgICAgYXgucGxvdChhdWRpbywgY29sb3I9ImdyYXkiLCBsaW5ld2lkdGg9MC4zKQogICAgICAgIGR1cmF0aW9uc19jdW11bCA9IG51bXB5LmNvbmNhdGVuYXRlKFtudW1weS5hcnJheShbMF0pLCBudW1weS5jdW1zdW0oZHVyYXRpb25zKV0pCiAgICAgICAgYWxpZ25tZW50X3RpY2tzID0gZHVyYXRpb25zX2N1bXVsICogMzIwICAjIDMyMCBpcyBoYXJkY29kZWQgZm9yIDIwbXMgcmF0ZSBoZXJlCgogICAgICAgIGF4LnZsaW5lcygKICAgICAgICAgICAgYWxpZ25tZW50X3RpY2tzLAogICAgICAgICAgICB5bWF4PTEsCiAgICAgICAgICAgIHltaW49LTEsCiAgICAgICAgICAgIGNvbG9yPSJpbmRpZ28iLAogICAgICAgICAgICBsaW5lc3R5bGVzPSJkYXNoZWQiLAogICAgICAgICAgICBsdz0wLjUsCiAgICAgICAgKQoKICAgICAgICBtaWRkbGVfdGlja19wb3NpdGlvbnMgPSAoCiAgICAgICAgICAgIGR1cmF0aW9uc19jdW11bFs6LTFdICsgKGR1cmF0aW9uc19jdW11bFsxOl0gLSBkdXJhdGlvbnNfY3VtdWxbOi0xXSkgLyAyCiAgICAgICAgKQogICAgICAgIGF4LnNldF94dGlja3MobWlkZGxlX3RpY2tfcG9zaXRpb25zICogMzIwKQogICAgICAgIGF4LnNldF94dGlja2xhYmVscyh0ZXh0X3Rva2VucywgZm9udHNpemU9MTMpCiAgICAgICAgYXguc2V0X3hsaW0oMCwgbGVuKGF1ZGlvKSkKCiAgICAgICAgYXguc2V0X3lsaW0oYXVkaW8ubWluKCksIGF1ZGlvLm1heCgpKQogICAgICAgIGF4LnNldF95dGlja3MoW10pCiAgICAgICAgcGx0LnRpZ2h0X2xheW91dCgpCiAgICAgICAgcGx0LnNob3coKQo='),
    ('seamless/build/lib/seamless_communication/models/aligner/model.py', ''),
    ('seamless/build/lib/seamless_communication/denoise/__init__.py', ''),
    ('seamless/build/lib/seamless_communication/denoise/demucs.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aAppbXBvcnQgc3VicHJvY2VzcyBhcyBzcAppbXBvcnQgdGVtcGZpbGUKZnJvbSB0eXBpbmcgaW1wb3J0IFVuaW9uCmZyb20gdG9yY2ggaW1wb3J0IFRlbnNvcgppbXBvcnQgdG9yY2hhdWRpbwpmcm9tIGZhaXJzZXEyLm1lbW9yeSBpbXBvcnQgTWVtb3J5QmxvY2sKZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzCmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbAppbXBvcnQgb3MKaW1wb3J0IGxvZ2dpbmcKClNBTVBMSU5HX1JBVEUgPSAxNjAwMAoKbG9nZ2luZy5iYXNpY0NvbmZpZygKICAgIGxldmVsPWxvZ2dpbmcuSU5GTywKICAgIGZvcm1hdD0iJShhc2N0aW1lKXMgJShsZXZlbG5hbWUpcyAtLSAlKG5hbWUpczogJShtZXNzYWdlKXMiLAopCgpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcigiZGVtdWNzIikKCkBkYXRhY2xhc3MKY2xhc3MgRGVub2lzaW5nQ29uZmlnOgogICAgZGVmIF9faW5pdF9fKAogICAgICAgICAgICBzZWxmLAogICAgICAgICAgICBmaWx0ZXJfd2lkdGg6IGludCA9IDMsCiAgICAgICAgICAgIG1vZGVsPSJodGRlbXVjcyIsIAogICAgICAgICAgICBzYW1wbGVfcmF0ZT1TQU1QTElOR19SQVRFLAogICAgICAgICAgICB0d29fc3RlbXM9Tm9uZSwKICAgICAgICAgICAgZmxvYXQzMj1GYWxzZSwKICAgICAgICAgICAgaW50MjQ9RmFsc2UpOgogICAgICAgIHNlbGYuZmlsdGVyX3dpZHRoID0gZmlsdGVyX3dpZHRoCiAgICAgICAgc2VsZi5tb2RlbCA9IG1vZGVsCiAgICAgICAgc2VsZi5zYW1wbGVfcmF0ZSA9IHNhbXBsZV9yYXRlCiAgICAgICAgc2VsZi50d29fc3RlbXMgPSB0d29fc3RlbXMKICAgICAgICBzZWxmLmZsb2F0MzIgPSBmbG9hdDMyCiAgICAgICAgc2VsZi5pbnQyNCA9IGludDI0CgpjbGFzcyBEZW11Y3MoKToKICAgIGRlZiBfX2luaXRfXygKICAgICAgICAgICAgc2VsZiwgCiAgICAgICAgICAgIGRlbm9pc2VfY29uZmlnOiBPcHRpb25hbFtEZW5vaXNpbmdDb25maWddKToKICAgICAgICBzZWxmLmRlbm9pc2VfY29uZmlnID0gZGVub2lzZV9jb25maWcKICAgICAgICBzZWxmLnRlbXBfZmlsZXMgPSBbXQoKICAgIGRlZiBydW5fY29tbWFuZF93aXRoX3RlbXBfZmlsZShzZWxmLCBjbWQpOgogICAgICAgIHdpdGggdGVtcGZpbGUuTmFtZWRUZW1wb3JhcnlGaWxlKG1vZGU9J3crJywgZGVsZXRlPUZhbHNlKSBhcyB0ZW1wOgogICAgICAgICAgICBzZWxmLnRlbXBfZmlsZXMuYXBwZW5kKHRlbXAubmFtZSkKICAgICAgICAgICAgcmVzdWx0ID0gc3AucnVuKGNtZCwgc3Rkb3V0PXRlbXAsIHN0ZGVycj10ZW1wLCB0ZXh0PVRydWUpCiAgICAgICAgICAgICMgSWYgdGhlcmUgd2FzIGFuIGVycm9yLCBsb2cgdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGUKICAgICAgICAgICAgaWYgcmVzdWx0LnJldHVybmNvZGUgIT0gMDoKICAgICAgICAgICAgICAgIHRlbXAuc2VlaygwKQogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8odGVtcC5yZWFkKCkpCgogICAgZGVmIGNsZWFudXBfdGVtcF9maWxlcyhzZWxmKToKICAgICAgICBmb3IgdGVtcF9maWxlIGluIHNlbGYudGVtcF9maWxlczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MucmVtb3ZlKHRlbXBfZmlsZSkgIAogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmIkZhaWxlZCB0byByZW1vdmUgdGVtcG9yYXJ5IGZpbGU6IHt0ZW1wX2ZpbGV9LiBFcnJvcjoge2V9IikKCiAgICBkZWYgZGVub2lzZShzZWxmLCBhdWRpbzogVW5pb25bc3RyLCBUZW5zb3JdKToKCiAgICAgICAgaWYgc2VsZi5kZW5vaXNlX2NvbmZpZyBpcyBOb25lOgogICAgICAgICAgc2VsZi5kZW5vaXNlX2NvbmZpZyA9IERlbm9pc2luZ0NvbmZpZygpCgogICAgICAgIGlmIGlzaW5zdGFuY2UoYXVkaW8sIFRlbnNvcik6CiAgICAgICAgICAgIHdpdGggdGVtcGZpbGUuTmFtZWRUZW1wb3JhcnlGaWxlKHN1ZmZpeD0iLndhdiIsIGRlbGV0ZT1GYWxzZSkgYXMgdGVtcF93YXY6CiAgICAgICAgICAgICAgICBzZWxmLnRlbXBfZmlsZXMuYXBwZW5kKHRlbXBfd2F2Lm5hbWUpCiAgICAgICAgICAgICAgICB0b3JjaGF1ZGlvLnNhdmUodGVtcF93YXYubmFtZSwgYXVkaW8sIHNlbGYuZGVub2lzZV9jb25maWcuc2FtcGxlX3JhdGUpCiAgICAgICAgICAgICAgICBhdWRpbyA9IHRlbXBfd2F2Lm5hbWUKCiAgICAgICAgaWYgbm90IFBhdGgoYXVkaW8pLmV4aXN0cygpOgogICAgICAgICAgICBsb2dnZXIuaW5mbygiSW5wdXQgZmlsZSBkb2VzIG5vdCBleGlzdC4iKQogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgICAgICB3aXRoIHRlbXBmaWxlLlRlbXBvcmFyeURpcmVjdG9yeSgpIGFzIHRlbXBfZGlyOgogICAgICAgICAgICBjbWQgPSBbInB5dGhvbjMiLCAiLW0iLCAiZGVtdWNzLnNlcGFyYXRlIiwgIi1vIiwgdGVtcF9kaXIsICItbiIsIHNlbGYuZGVub2lzZV9jb25maWcubW9kZWxdCiAgICAgICAgICAgIGlmIHNlbGYuZGVub2lzZV9jb25maWcuZmxvYXQzMjoKICAgICAgICAgICAgICAgIGNtZCArPSBbIi0tZmxvYXQzMiJdCiAgICAgICAgICAgIGlmIHNlbGYuZGVub2lzZV9jb25maWcuaW50MjQ6CiAgICAgICAgICAgICAgICBjbWQgKz0gWyItLWludDI0Il0KICAgICAgICAgICAgaWYgc2VsZi5kZW5vaXNlX2NvbmZpZy50d29fc3RlbXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBjbWQgKz0gW2YiLS10d28tc3RlbXM9e3NlbGYuZGVub2lzZV9jb25maWcudHdvX3N0ZW1zfSJdCgogICAgICAgICAgICBhdWRpb19wYXRoID0gUGF0aChhdWRpbykKICAgICAgICAgICAgYXVkaW9fbmFtZSA9IGF1ZGlvX3BhdGguc3RlbQogICAgICAgICAgICBhdWRpbyA9IFtzdHIoYXVkaW8pXQoKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIkV4ZWN1dGluZyBjb21tYW5kOiIsICIgIi5qb2luKGNtZCkpCiAgICAgICAgICAgIHNlbGYucnVuX2NvbW1hbmRfd2l0aF90ZW1wX2ZpbGUoY21kICsgYXVkaW8pCgogICAgICAgICAgICBzZXBhcmF0ZWRfZmlsZXMgPSBsaXN0KFBhdGgodGVtcF9kaXIgKyAiL2h0ZGVtdWNzLyIgKyBhdWRpb19uYW1lKS5nbG9iKCIqdm9jYWxzLndhdioiKSkKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBzZXBhcmF0ZWRfZmlsZXM6CiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygiU2VwYXJhdGVkIHZvY2FscyBmaWxlIG5vdCBmb3VuZC4iKQogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAgICAgICAgIHdhdmVmb3JtLCBzYW1wbGVfcmF0ZSA9IHRvcmNoYXVkaW8ubG9hZChzZXBhcmF0ZWRfZmlsZXNbMF0pCgogICAgICAgICAgICBpZiB3YXZlZm9ybS5zaGFwZVswXSA+IDE6CiAgICAgICAgICAgICAgICB3YXZlZm9ybSA9IHdhdmVmb3JtLm1lYW4oZGltPTAsIGtlZXBkaW09VHJ1ZSkKICAgICAgICAgICAgaWYgc2FtcGxlX3JhdGUgIT0gMTYwMDA6CiAgICAgICAgICAgICAgICByZXNhbXBsZXIgPSB0b3JjaGF1ZGlvLnRyYW5zZm9ybXMuUmVzYW1wbGUob3JpZ19mcmVxPXNhbXBsZV9yYXRlLCBuZXdfZnJlcT0xNjAwMCkKICAgICAgICAgICAgICAgIHdhdmVmb3JtID0gcmVzYW1wbGVyKHdhdmVmb3JtKQogICAgICAgICAgICAgICAgc2FtcGxlX3JhdGUgPSAxNjAwMAoKICAgICAgICAgICAgd2l0aCB0ZW1wZmlsZS5OYW1lZFRlbXBvcmFyeUZpbGUoc3VmZml4PSIud2F2IiwgZGVsZXRlPVRydWUpIGFzIHRlbXBfd2F2MjoKICAgICAgICAgICAgICAgIHRvcmNoYXVkaW8uc2F2ZSh0ZW1wX3dhdjIubmFtZSwgd2F2ZWZvcm0sIHNhbXBsZV9yYXRlPXNhbXBsZV9yYXRlKQogICAgICAgICAgICAgICAgYmxvY2sgPSBNZW1vcnlCbG9jayh0ZW1wX3dhdjIucmVhZCgpKQoKICAgICAgICAgICAgc2VsZi5jbGVhbnVwX3RlbXBfZmlsZXMoKQoKICAgICAgICAgICAgcmV0dXJuIGJsb2NrCiAgICAgICAg'),
    ('seamless/build/lib/seamless_communication/datasets/__init__.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4K'),
    ('seamless/build/lib/seamless_communication/datasets/huggingface.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgppbXBvcnQgbG9nZ2luZwppbXBvcnQgb3MKZnJvbSBhYmMgaW1wb3J0IGFic3RyYWN0bWV0aG9kCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBJdGVyYWJsZSwgT3B0aW9uYWwKCmltcG9ydCBudW1weSBhcyBucAppbXBvcnQgdG9yY2gKZnJvbSBkYXRhc2V0cyBpbXBvcnQgbG9hZF9kYXRhc2V0Cgpmcm9tIC5kYXRhdHlwZXMgaW1wb3J0IExhbmdQYWlyU2FtcGxlLCBNdWx0aW1vZGFsU2FtcGxlCgpsb2dnZXIgPSBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykKCgpjbGFzcyBTcGVlY2hUb2tlbml6ZXI6CiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBlbmNvZGUoc2VsZiwgd2F2OiB0b3JjaC5UZW5zb3IsIHNhbXBsZV9yYXRlOiBpbnQpIC0+IHRvcmNoLlRlbnNvcjoKICAgICAgICAuLi4KCgpjbGFzcyBTcGVlY2gyU3BlZWNoRmxldXJzRGF0YXNldEJ1aWxkZXI6CiAgICAiIiJBc3NlbWJsZXMgc3BlZWNoMnNwZWVjaCBkYXRhc2V0IGZyb20gZ29vZ2xlL2ZsZXVycyBvbiBIdWdnaW5nRmFjZSIiIgoKICAgIERBVEFTRVRfTkFNRSA9ICJnb29nbGUvZmxldXJzIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIHNvdXJjZV9sYW5nOiBzdHIsCiAgICAgICAgdGFyZ2V0X2xhbmc6IHN0ciwKICAgICAgICBzcGxpdDogc3RyID0gInRlc3QiLAogICAgICAgIHNraXBfc291cmNlX2F1ZGlvOiBib29sID0gVHJ1ZSwKICAgICAgICBza2lwX3RhcmdldF9hdWRpbzogYm9vbCA9IFRydWUsCiAgICAgICAgYXVkaW9fZHR5cGU6IHRvcmNoLmR0eXBlID0gdG9yY2guZmxvYXQzMiwKICAgICAgICBkYXRhc2V0X2NhY2hlX2RpcjogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICAgICAgc3BlZWNoX3Rva2VuaXplcjogT3B0aW9uYWxbU3BlZWNoVG9rZW5pemVyXSA9IE5vbmUsCiAgICApOgogICAgICAgIHNlbGYuc291cmNlX2xhbmcgPSBzb3VyY2VfbGFuZwogICAgICAgIHNlbGYudGFyZ2V0X2xhbmcgPSB0YXJnZXRfbGFuZwogICAgICAgIHNlbGYuc3BsaXQgPSBzcGxpdAogICAgICAgIHNlbGYuZGF0YXNldF9jYWNoZV9kaXIgPSBkYXRhc2V0X2NhY2hlX2RpcgogICAgICAgIHNlbGYuYXVkaW9fZHR5cGUgPSBhdWRpb19kdHlwZQogICAgICAgIHNlbGYuc2tpcF9zb3VyY2VfYXVkaW8gPSBza2lwX3NvdXJjZV9hdWRpbwogICAgICAgIHNlbGYuc2tpcF90YXJnZXRfYXVkaW8gPSBza2lwX3RhcmdldF9hdWRpbwogICAgICAgIHNlbGYuc3BlZWNoX3Rva2VuaXplciA9IHNwZWVjaF90b2tlbml6ZXIKCiAgICBkZWYgX3ByZXBhcmVfc2FtcGxlKAogICAgICAgIHNlbGYsCiAgICAgICAgc2FtcGxlX2lkOiBpbnQsCiAgICAgICAgbGFuZzogc3RyLAogICAgICAgIHRleHQ6IHN0ciwKICAgICAgICBhdWRpb19sb2NhbF9wYXRoOiBPcHRpb25hbFtzdHJdID0gTm9uZSwKICAgICAgICB3YXZlZm9ybV9ucHk6IE9wdGlvbmFsW25wLm5kYXJyYXldID0gTm9uZSwKICAgICAgICBzYW1wbGluZ19yYXRlOiBPcHRpb25hbFtpbnRdID0gTm9uZSwKICAgICkgLT4gTXVsdGltb2RhbFNhbXBsZToKICAgICAgICBzaG91bGRfc2tpcF9hdWRpbyA9ICgKICAgICAgICAgICAgbGFuZyA9PSBzZWxmLnRhcmdldF9sYW5nCiAgICAgICAgICAgIGFuZCBzZWxmLnNraXBfdGFyZ2V0X2F1ZGlvCiAgICAgICAgICAgIG9yIGxhbmcgPT0gc2VsZi5zb3VyY2VfbGFuZwogICAgICAgICAgICBhbmQgc2VsZi5za2lwX3NvdXJjZV9hdWRpbwogICAgICAgICAgICBvciB3YXZlZm9ybV9ucHkgaXMgTm9uZQogICAgICAgICkKICAgICAgICBpZiBub3Qgc2hvdWxkX3NraXBfYXVkaW86CiAgICAgICAgICAgIHdhdmVmb3JtID0gdG9yY2guZnJvbV9udW1weSh3YXZlZm9ybV9ucHkpLnRvKHNlbGYuYXVkaW9fZHR5cGUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2F2ZWZvcm0gPSBOb25lCiAgICAgICAgaWYgc2VsZi5zcGVlY2hfdG9rZW5pemVyIGlzIG5vdCBOb25lIGFuZCBub3Qgc2hvdWxkX3NraXBfYXVkaW86CiAgICAgICAgICAgIGFzc2VydCB3YXZlZm9ybSBpcyBub3QgTm9uZQogICAgICAgICAgICBhc3NlcnQgc2FtcGxpbmdfcmF0ZSBpcyBub3QgTm9uZQogICAgICAgICAgICB1bml0c190ZW5zb3IgPSBzZWxmLnNwZWVjaF90b2tlbml6ZXIuZW5jb2RlKAogICAgICAgICAgICAgICAgd2F2ZWZvcm0sIHNhbXBsaW5nX3JhdGUKICAgICAgICAgICAgKS5yZXNoYXBlKC0xKQogICAgICAgICAgICB1bml0cyA9IHVuaXRzX3RlbnNvci50b2xpc3QoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHVuaXRzID0gTm9uZQogICAgICAgIHJldHVybiBNdWx0aW1vZGFsU2FtcGxlKAogICAgICAgICAgICBpZD1zYW1wbGVfaWQsCiAgICAgICAgICAgIGxhbmc9bGFuZywKICAgICAgICAgICAgdGV4dD10ZXh0LnN0cmlwKCksCiAgICAgICAgICAgIGF1ZGlvX2xvY2FsX3BhdGg9YXVkaW9fbG9jYWxfcGF0aCwKICAgICAgICAgICAgd2F2ZWZvcm09d2F2ZWZvcm0sCiAgICAgICAgICAgIHNhbXBsaW5nX3JhdGU9c2FtcGxpbmdfcmF0ZSwKICAgICAgICAgICAgdW5pdHM9dW5pdHMsCiAgICAgICAgKQoKICAgIGRlZiBpdGVyYXRlX2xhbmdfYXVkaW9fc2FtcGxlcyhzZWxmLCBsYW5nOiBzdHIpIC0+IEl0ZXJhYmxlW011bHRpbW9kYWxTYW1wbGVdOgogICAgICAgIGRzID0gbG9hZF9kYXRhc2V0KAogICAgICAgICAgICBzZWxmLkRBVEFTRVRfTkFNRSwKICAgICAgICAgICAgbGFuZywKICAgICAgICAgICAgc3BsaXQ9c2VsZi5zcGxpdCwKICAgICAgICAgICAgY2FjaGVfZGlyPXNlbGYuZGF0YXNldF9jYWNoZV9kaXIsCiAgICAgICAgICAgIHN0cmVhbWluZz1GYWxzZSwKICAgICAgICAgICAgdHJ1c3RfcmVtb3RlX2NvZGU9VHJ1ZSwKICAgICAgICApCiAgICAgICAgZm9yIGl0ZW0gaW4gZHM6CiAgICAgICAgICAgIGF1ZGlvX3BhdGggPSBvcy5wYXRoLmpvaW4oCiAgICAgICAgICAgICAgICBvcy5wYXRoLmRpcm5hbWUoaXRlbVsicGF0aCJdKSwgaXRlbVsiYXVkaW8iXVsicGF0aCJdCiAgICAgICAgICAgICkKICAgICAgICAgICAgKHNhbXBsZV9pZCwgYXVkaW9fbG9jYWxfcGF0aCwgd2F2ZWZvcm0sIHNhbXBsaW5nX3JhdGUsIHRleHQpID0gKAogICAgICAgICAgICAgICAgaXRlbVsiaWQiXSwKICAgICAgICAgICAgICAgIGF1ZGlvX3BhdGgsCiAgICAgICAgICAgICAgICBpdGVtWyJhdWRpbyJdWyJhcnJheSJdLAogICAgICAgICAgICAgICAgaXRlbVsiYXVkaW8iXVsic2FtcGxpbmdfcmF0ZSJdLAogICAgICAgICAgICAgICAgaXRlbVsidHJhbnNjcmlwdGlvbiJdLAogICAgICAgICAgICApCiAgICAgICAgICAgIHlpZWxkIHNlbGYuX3ByZXBhcmVfc2FtcGxlKAogICAgICAgICAgICAgICAgc2FtcGxlX2lkPXNhbXBsZV9pZCwKICAgICAgICAgICAgICAgIGF1ZGlvX2xvY2FsX3BhdGg9YXVkaW9fbG9jYWxfcGF0aCwKICAgICAgICAgICAgICAgIHdhdmVmb3JtX25weT13YXZlZm9ybSwKICAgICAgICAgICAgICAgIHNhbXBsaW5nX3JhdGU9c2FtcGxpbmdfcmF0ZSwKICAgICAgICAgICAgICAgIHRleHQ9dGV4dCwKICAgICAgICAgICAgICAgIGxhbmc9bGFuZywKICAgICAgICAgICAgKQoKICAgIGRlZiBfX2l0ZXJfXyhzZWxmKSAtPiBJdGVyYWJsZVtMYW5nUGFpclNhbXBsZV06CiAgICAgICAgbG9nZ2VyLmluZm8oZiJMb2FkaW5nIHtzZWxmLnRhcmdldF9sYW5nfSBzYW1wbGVzIikKICAgICAgICB0YXJnZXRfc2FtcGxlczogRGljdFtpbnQsIE11bHRpbW9kYWxTYW1wbGVdID0ge30KICAgICAgICBmb3IgaWR4LCBzYW1wbGUgaW4gZW51bWVyYXRlKAogICAgICAgICAgICBzZWxmLml0ZXJhdGVfbGFuZ19hdWRpb19zYW1wbGVzKGxhbmc9c2VsZi50YXJnZXRfbGFuZykKICAgICAgICApOgogICAgICAgICAgICBpZiBpZHggYW5kIGlkeCAlIDEwMCA9PSAwOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiIuLmxvYWRlZCB7aWR4fSB0YXJnZXQgc2FtcGxlcyIpCiAgICAgICAgICAgIHRhcmdldF9zYW1wbGVzW3NhbXBsZS5pZF0gPSBzYW1wbGUKCiAgICAgICAgbG9nZ2VyLmluZm8oZiJMb2FkaW5nIHtzZWxmLnNvdXJjZV9sYW5nfSBzYW1wbGVzIikKICAgICAgICBmb3IgaWR4LCBzYW1wbGUgaW4gZW51bWVyYXRlKAogICAgICAgICAgICBzZWxmLml0ZXJhdGVfbGFuZ19hdWRpb19zYW1wbGVzKGxhbmc9c2VsZi5zb3VyY2VfbGFuZykKICAgICAgICApOgogICAgICAgICAgICBpZiBpZHggYW5kIGlkeCAlIDEwMCA9PSAwOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiIuLmxvYWRlZCB7aWR4fSBzb3VyY2Ugc2FtcGxlcyIpCiAgICAgICAgICAgIGlmIHNhbXBsZS5pZCBpbiB0YXJnZXRfc2FtcGxlczoKICAgICAgICAgICAgICAgIHlpZWxkIExhbmdQYWlyU2FtcGxlKHNvdXJjZT1zYW1wbGUsIHRhcmdldD10YXJnZXRfc2FtcGxlc1tzYW1wbGUuaWRdKQoKCmNsYXNzIFNwZWVjaDJUZXh0R2lnYXNwZWVjaERhdGFzZXRCdWlsZGVyOgogICAgIiIiIEFzc2VtYmxlcyBzcGVlY2gyc3BlZWNoIGRhdGFzZXQgZnJvbSBnb29nbGUvZmxldXJzIG9uIEh1Z2dpbmdGYWNlLgogICAgICAgIFRoaXMgZGF0YXNldCByZXF1aXJlcyBzaWduaW5nIGFuIGxpY2Vuc2UgYWdyZWVtZW50IGFuZCB1c2luZyBhbiBhdXRoIHRva2VuLgogICAgIiIiCgogICAgREFUQVNFVF9OQU1FID0gInNwZWVjaGNvbGFiL2dpZ2FzcGVlY2giCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsCiAgICAgICAgYXV0aF90b2tlbjogc3RyLAogICAgICAgIHNwbGl0OiBzdHIgPSAidGVzdCIsCiAgICAgICAgc2tpcF9zb3VyY2VfYXVkaW86IGJvb2wgPSBUcnVlLAogICAgICAgIHNraXBfdGFyZ2V0X2F1ZGlvOiBib29sID0gVHJ1ZSwKICAgICAgICBhdWRpb19kdHlwZTogdG9yY2guZHR5cGUgPSB0b3JjaC5mbG9hdDMyLAogICAgICAgIGRhdGFzZXRfY2FjaGVfZGlyOiBPcHRpb25hbFtzdHJdID0gTm9uZSwKICAgICAgICBzcGVlY2hfdG9rZW5pemVyOiBPcHRpb25hbFtTcGVlY2hUb2tlbml6ZXJdID0gTm9uZSwKICAgICk6CiAgICAgICAgc2VsZi5hdXRoX3Rva2VuID0gYXV0aF90b2tlbgogICAgICAgIHNlbGYuc3BsaXQgPSBzcGxpdAogICAgICAgIHNlbGYuZGF0YXNldF9jYWNoZV9kaXIgPSBkYXRhc2V0X2NhY2hlX2RpcgogICAgICAgIHNlbGYuYXVkaW9fZHR5cGUgPSBhdWRpb19kdHlwZQogICAgICAgIHNlbGYuc2tpcF9zb3VyY2VfYXVkaW8gPSBza2lwX3NvdXJjZV9hdWRpbwogICAgICAgIHNlbGYuc2tpcF90YXJnZXRfYXVkaW8gPSBza2lwX3RhcmdldF9hdWRpbwogICAgICAgIHNlbGYuc3BlZWNoX3Rva2VuaXplciA9IHNwZWVjaF90b2tlbml6ZXIKCiAgICBkZWYgX3ByZXBhcmVfc2FtcGxlKAogICAgICAgIHNlbGYsCiAgICAgICAgc2FtcGxlX2lkOiBpbnQsCiAgICAgICAgbGFuZzogc3RyLAogICAgICAgIHRleHQ6IHN0ciwKICAgICAgICBhdWRpb19sb2NhbF9wYXRoOiBPcHRpb25hbFtzdHJdID0gTm9uZSwKICAgICAgICB3YXZlZm9ybV9ucHk6IE9wdGlvbmFsW25wLm5kYXJyYXldID0gTm9uZSwKICAgICAgICBzYW1wbGluZ19yYXRlOiBPcHRpb25hbFtpbnRdID0gTm9uZSwKICAgICkgLT4gTXVsdGltb2RhbFNhbXBsZToKICAgICAgICBpZiB3YXZlZm9ybV9ucHkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHdhdmVmb3JtID0gdG9yY2guZnJvbV9udW1weSh3YXZlZm9ybV9ucHkpLnRvKHNlbGYuYXVkaW9fZHR5cGUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2F2ZWZvcm0gPSBOb25lCiAgICAgICAgaWYgc2VsZi5zcGVlY2hfdG9rZW5pemVyIGlzIG5vdCBOb25lIGFuZCB3YXZlZm9ybV9ucHkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGFzc2VydCB3YXZlZm9ybSBpcyBub3QgTm9uZQogICAgICAgICAgICBhc3NlcnQgc2FtcGxpbmdfcmF0ZSBpcyBub3QgTm9uZQogICAgICAgICAgICB1bml0c190ZW5zb3IgPSBzZWxmLnNwZWVjaF90b2tlbml6ZXIuZW5jb2RlKAogICAgICAgICAgICAgICAgd2F2ZWZvcm0sIHNhbXBsaW5nX3JhdGUKICAgICAgICAgICAgKS5yZXNoYXBlKC0xKQogICAgICAgICAgICB1bml0cyA9IHVuaXRzX3RlbnNvci50b2xpc3QoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHVuaXRzID0gTm9uZQogICAgICAgIHJldHVybiBNdWx0aW1vZGFsU2FtcGxlKAogICAgICAgICAgICBpZD1zYW1wbGVfaWQsCiAgICAgICAgICAgIGxhbmc9bGFuZywKICAgICAgICAgICAgdGV4dD10ZXh0LnN0cmlwKCksCiAgICAgICAgICAgIGF1ZGlvX2xvY2FsX3BhdGg9YXVkaW9fbG9jYWxfcGF0aCwKICAgICAgICAgICAgd2F2ZWZvcm09d2F2ZWZvcm0sCiAgICAgICAgICAgIHNhbXBsaW5nX3JhdGU9c2FtcGxpbmdfcmF0ZSwKICAgICAgICAgICAgdW5pdHM9dW5pdHMsCiAgICAgICAgKQoKICAgIGRlZiBpdGVyYXRlX2xhbmdfYXVkaW9fc2FtcGxlcyhzZWxmLCBsYW5nOiBzdHIpIC0+IEl0ZXJhYmxlW011bHRpbW9kYWxTYW1wbGVdOgogICAgICAgIGRzID0gbG9hZF9kYXRhc2V0KAogICAgICAgICAgICBzZWxmLkRBVEFTRVRfTkFNRSwKICAgICAgICAgICAgbGFuZywKICAgICAgICAgICAgc3BsaXQ9c2VsZi5zcGxpdCwKICAgICAgICAgICAgY2FjaGVfZGlyPXNlbGYuZGF0YXNldF9jYWNoZV9kaXIsCiAgICAgICAgICAgIHN0cmVhbWluZz1GYWxzZSwKICAgICAgICAgICAgdHJ1c3RfcmVtb3RlX2NvZGU9VHJ1ZSwKICAgICAgICApCiAgICAgICAgZm9yIGl0ZW0gaW4gZHM6CiAgICAgICAgICAgIGF1ZGlvX3BhdGggPSBvcy5wYXRoLmpvaW4oCiAgICAgICAgICAgICAgICBvcy5wYXRoLmRpcm5hbWUoaXRlbVsicGF0aCJdKSwgaXRlbVsiYXVkaW8iXVsicGF0aCJdCiAgICAgICAgICAgICkKICAgICAgICAgICAgKHNhbXBsZV9pZCwgYXVkaW9fbG9jYWxfcGF0aCwgd2F2ZWZvcm0sIHNhbXBsaW5nX3JhdGUsIHRleHQpID0gKAogICAgICAgICAgICAgICAgaXRlbVsiaWQiXSwKICAgICAgICAgICAgICAgIGF1ZGlvX3BhdGgsCiAgICAgICAgICAgICAgICBpdGVtWyJhdWRpbyJdWyJhcnJheSJdLAogICAgICAgICAgICAgICAgaXRlbVsiYXVkaW8iXVsic2FtcGxpbmdfcmF0ZSJdLAogICAgICAgICAgICAgICAgaXRlbVsidHJhbnNjcmlwdGlvbiJdLAogICAgICAgICAgICApCiAgICAgICAgICAgIHlpZWxkIHNlbGYuX3ByZXBhcmVfc2FtcGxlKAogICAgICAgICAgICAgICAgc2FtcGxlX2lkPXNhbXBsZV9pZCwKICAgICAgICAgICAgICAgIGF1ZGlvX2xvY2FsX3BhdGg9YXVkaW9fbG9jYWxfcGF0aCwKICAgICAgICAgICAgICAgIHdhdmVmb3JtX25weT13YXZlZm9ybSwKICAgICAgICAgICAgICAgIHNhbXBsaW5nX3JhdGU9c2FtcGxpbmdfcmF0ZSwKICAgICAgICAgICAgICAgIHRleHQ9dGV4dCwKICAgICAgICAgICAgICAgIGxhbmc9bGFuZywKICAgICAgICAgICAgKQoKICAgIGRlZiBfX2l0ZXJfXyhzZWxmKSAtPiBJdGVyYWJsZVtMYW5nUGFpclNhbXBsZV06CiAgICAgICAgbG9nZ2VyLmluZm8oZiJMb2FkaW5nIHtzZWxmLnRhcmdldF9sYW5nfSBzYW1wbGVzIikKICAgICAgICB0YXJnZXRfc2FtcGxlczogRGljdFtpbnQsIE11bHRpbW9kYWxTYW1wbGVdID0ge30KICAgICAgICBmb3IgaWR4LCBzYW1wbGUgaW4gZW51bWVyYXRlKAogICAgICAgICAgICBzZWxmLml0ZXJhdGVfbGFuZ19hdWRpb19zYW1wbGVzKGxhbmc9c2VsZi50YXJnZXRfbGFuZykKICAgICAgICApOgogICAgICAgICAgICBpZiBpZHggYW5kIGlkeCAlIDEwMCA9PSAwOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiIuLmxvYWRlZCB7aWR4fSB0YXJnZXQgc2FtcGxlcyIpCiAgICAgICAgICAgIHRhcmdldF9zYW1wbGVzW3NhbXBsZS5pZF0gPSBzYW1wbGUKCiAgICAgICAgbG9nZ2VyLmluZm8oZiJMb2FkaW5nIHtzZWxmLnNvdXJjZV9sYW5nfSBzYW1wbGVzIikKICAgICAgICBmb3IgaWR4LCBzYW1wbGUgaW4gZW51bWVyYXRlKAogICAgICAgICAgICBzZWxmLml0ZXJhdGVfbGFuZ19hdWRpb19zYW1wbGVzKGxhbmc9c2VsZi5zb3VyY2VfbGFuZykKICAgICAgICApOgogICAgICAgICAgICBpZiBpZHggYW5kIGlkeCAlIDEwMCA9PSAwOgogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiIuLmxvYWRlZCB7aWR4fSBzb3VyY2Ugc2FtcGxlcyIpCiAgICAgICAgICAgIGlmIHNhbXBsZS5pZCBpbiB0YXJnZXRfc2FtcGxlczoKICAgICAgICAgICAgICAgIHlpZWxkIExhbmdQYWlyU2FtcGxlKHNvdXJjZT1zYW1wbGUsIHRhcmdldD10YXJnZXRfc2FtcGxlc1tzYW1wbGUuaWRdKQo='),
    ('seamless/build/lib/seamless_communication/datasets/datatypes.py', 'IyBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzCiMgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiMgTUlUX0xJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdCwgTGlzdCwgT3B0aW9uYWwKCmltcG9ydCB0b3JjaAoKCkBkYXRhY2xhc3MKY2xhc3MgTXVsdGltb2RhbFNhbXBsZToKICAgIGlkOiBpbnQKICAgIGxhbmc6IHN0cgogICAgdGV4dDogc3RyCiAgICBhdWRpb19sb2NhbF9wYXRoOiBPcHRpb25hbFtzdHJdID0gTm9uZQogICAgd2F2ZWZvcm06IE9wdGlvbmFsW3RvcmNoLlRlbnNvcl0gPSBOb25lCiAgICBzYW1wbGluZ19yYXRlOiBPcHRpb25hbFtpbnRdID0gTm9uZQogICAgdW5pdHM6IE9wdGlvbmFsW0xpc3RbaW50XV0gPSBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9qc29uKGNscywganM6IERpY3Rbc3RyLCBBbnldKSAtPiAiTXVsdGltb2RhbFNhbXBsZSI6CiAgICAgICAgcmV0dXJuIGNscygKICAgICAgICAgICAgaWQ9anNbImlkIl0sCiAgICAgICAgICAgIGxhbmc9anNbImxhbmciXSwKICAgICAgICAgICAgdGV4dD1qc1sidGV4dCJdLAogICAgICAgICAgICBhdWRpb19sb2NhbF9wYXRoPWpzLmdldCgiYXVkaW9fbG9jYWxfcGF0aCIpLAogICAgICAgICAgICB3YXZlZm9ybT1Ob25lLCAgIyBkb24ndCBzZXJpYWxpemUKICAgICAgICAgICAgc2FtcGxpbmdfcmF0ZT1qcy5nZXQoInNhbXBsaW5nX3JhdGUiKSwKICAgICAgICAgICAgdW5pdHM9anMuZ2V0KCJ1bml0cyIpLAogICAgICAgICkKCgpAZGF0YWNsYXNzCmNsYXNzIExhbmdQYWlyU2FtcGxlOgogICAgc291cmNlOiBNdWx0aW1vZGFsU2FtcGxlCiAgICB0YXJnZXQ6IE11bHRpbW9kYWxTYW1wbGUKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX2pzb24oY2xzLCBqczogRGljdFtzdHIsIEFueV0pIC0+ICJMYW5nUGFpclNhbXBsZSI6CiAgICAgICAgcmV0dXJuIGNscygKICAgICAgICAgICAgc291cmNlPU11bHRpbW9kYWxTYW1wbGUuZnJvbV9qc29uKGpzWyJzb3VyY2UiXSksCiAgICAgICAgICAgIHRhcmdldD1NdWx0aW1vZGFsU2FtcGxlLmZyb21fanNvbihqc1sidGFyZ2V0Il0pLAogICAgICAgICkK'),
]

for relative_path, encoded_content in file_data:
    full_path = os.path.join(folder_path, relative_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'wb') as f:
        f.write(base64.b64decode(encoded_content))
    print(f'Created: {full_path}')
subprocess.run(['python', 'module_registrar/modules/translation/install_translation.py'], check=True)
