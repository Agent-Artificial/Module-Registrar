import os
import base64
import subprocess

folder_path = 'module_registrar/modules/financial_news'

file_data = [
    ('setup.sh', 'IyEvYmluL2Jhc2gKCnBpcCBpbnN0YWxsIHRvcmNoIHRvcmNoYXVkaW8gdG9yY2h2aXNpb24gbnVtcHkgZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS90cmFuc2Zvcm1lcnMgZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS9kYXRhc2V0cyBiZWF1dGlmdWxzb3VwNCByZXF1ZXN0cw=='),
    ('install_financial_news.sh', 'IyEvYmluL2Jhc2gKCnBpcCBpbnN0YWxsIC1yIC4vcmVxdWlyZW1lbnRzLnR4dA=='),
    ('__init__.py', ''),
    ('data_models.py', 'ZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdApmcm9tIGFiYyBpbXBvcnQgQUJDLCBhYnN0cmFjdG1ldGhvZApmcm9tIHB5ZGFudGljIGltcG9ydCBCYXNlTW9kZWwKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgoKY2xhc3MgTW9kdWxlQ29uZmlnKEJhc2VNb2RlbCk6CiAgICBtb2R1bGVfbmFtZTogc3RyCiAgICBtb2R1bGVfZW5kcG9pbnRfdXJsOiBzdHIKICAgIG1vZHVsZV9wYXRoOiBQYXRoCiAgICBtb2R1bGVfcGF0aHM6IERpY3Rbc3RyLCBQYXRoXQogICAgbW9kdWxlX2VuZHBvaW50czogRGljdFtzdHIsIHN0cl0KICAgIG1vZHVsZXM6IERpY3Rbc3RyLCBEaWN0W3N0ciwgQW55XV0KICAgIGtleV9uYW1lOiBzdHIKICAgIGhvc3Q6IHN0cgogICAgcG9ydDogaW50CgoKY2xhc3MgQmFzZU1vZHVsZShBQkMpOgogICAgY29uZmlnOiBNb2R1bGVDb25maWcKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgYXN5bmMgZGVmIHByb2Nlc3Moc2VsZiwgdXJsOiBzdHIpIC0+IEFueToKICAgICAgICAiIiJQcm9jZXNzIGEgcmVxdWVzdCBtYWRlIHRvIHRoZSBtb2R1bGUuIiIiCg=='),
    ('financial_news_module.py', 'aW1wb3J0IGFzeW5jaW8KZnJvbSAuZGF0YV9tb2RlbHMgaW1wb3J0IEJhc2VNb2R1bGUKZnJvbSAuc2NyYXBlcl9hbmRfc3VtbWFyaXplci5zdW1tYXJpemVyIGltcG9ydCBQZWdhc3VzU3VtbWFyaXplcgoKCmNsYXNzIEZpbmFuY2lhbE5ld3NNb2R1bGUoQmFzZU1vZHVsZSk6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5zdW1tYXJpemVyID0gUGVnYXN1c1N1bW1hcml6ZXIoKQoKICAgIGFzeW5jIGRlZiBwcm9jZXNzKHNlbGYsIHRpY2tlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuc3VtbWFyaXplci5zY3JhcGVfYW5kX3N1bW1hcml6ZV90aWNrZXJzKCkKICAgIAogICAgCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBtb2R1bGUgPSBGaW5hbmNpYWxOZXdzTW9kdWxlKCkKICAgIHByaW50KGFzeW5jaW8ucnVuKG1vZHVsZS5wcm9jZXNzKCJFVEgiKSkp'),
    ('scraper_and_summarizer/summarizer.py', 'ZnJvbSB0cmFuc2Zvcm1lcnMgaW1wb3J0IFBlZ2FzdXNUb2tlbml6ZXIsIFBlZ2FzdXNGb3JDb25kaXRpb25hbEdlbmVyYXRpb24KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCmltcG9ydCByZXF1ZXN0cwppbXBvcnQganNvbgoKCmNsYXNzIFBlZ2FzdXNTdW1tYXJpemVyOgogICAgZGVmIF9faW5pdF9fKAogICAgICAgIHNlbGYsIG1vZGVsX25hbWU9Imh1bWFuLWNlbnRlcmVkLXN1bW1hcml6YXRpb24vZmluYW5jaWFsLXN1bW1hcml6YXRpb24tcGVnYXN1cyIKICAgICk6CiAgICAgICAgc2VsZi5tb2RlbF9uYW1lID0gbW9kZWxfbmFtZSBvciAiaHVtYW4tY2VudGVyZWQtc3VtbWFyaXphdGlvbi9maW5hbmNpYWwtc3VtbWFyaXphdGlvbi1wZWdhc3VzIgogICAgICAgIHNlbGYudG9rZW5pemVyID0gUGVnYXN1c1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQoc2VsZi5tb2RlbF9uYW1lKQogICAgICAgIHNlbGYubW9kZWwgPSBQZWdhc3VzRm9yQ29uZGl0aW9uYWxHZW5lcmF0aW9uLmZyb21fcHJldHJhaW5lZChzZWxmLm1vZGVsX25hbWUpCiAgICAgICAgc2VsZi5leGNsdWRlX2xpc3QgPSBbIm1hcHMiLCAicG9saWNpZXMiLCAicHJlZmVyZW5jZXMiLCAiYWNjb3VudHMiLCAic3VwcG9ydCIsICJzZXRwcmVmcyJdCiAgICAgICAgc2VsZi5zYXZlX2RpciA9ICJuZXdzX2RhdGEvIgogICAgICAgIHNlbGYuc2VhcmNoX3VybCA9ICIiCiAgICAgICAgc2VsZi50aWNrZXJfZGljdCA9IHt9CiAgICAgICAgc2VsZi5hcnRpY2xlX2RpY3QgPSB7fQoKICAgIEBwcm9wZXJ0eQogICAgZGVmIG1vbml0b3JlZF90aWNrZXJzKHNlbGYpOgogICAgICAgIHJldHVybiBbIkdNRSIsICJUU0xBIiwgIkJUQyIsICJFVEgiLCAiU09MIiwgIkNPTUFJIiwgIndDT01BSSIsICJUQU8iLCAid1RBTyJdCgogICAgZGVmIHNldF9zZWFyY2hfdXJsKHNlbGYsIHRpY2tlcik6CiAgICAgICAgc2VsZi5zZWFyY2hfdXJsID0gZiJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPXlhaG9vK2ZpbmFuY2Ure3RpY2tlcn0mdGJtPW53cyIKICAgICAgICByZXR1cm4gc2VsZi5zZWFyY2hfdXJsCgogICAgZGVmIGdldF91cmxfZGF0YShzZWxmLCB1cmwpOgogICAgICAgIHJlcXVlc3RfZGF0YSA9IHJlcXVlc3RzLmdldCh1cmwpCiAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAocmVxdWVzdF9kYXRhLnRleHQsICdodG1sLnBhcnNlcicpCiAgICAgICAgcGFyYWdyYXBocyA9IHNvdXAuZmluZF9hbGwoJ3AnKQogICAgICAgIHJldHVybiBzZWxmLnByb2Nlc3NfZGF0YShwYXJhZ3JhcGhzKQoKICAgIGRlZiBwcm9jZXNzX2RhdGEoc2VsZiwgcGFyYWdyYXBocyk6CiAgICAgICAgdGV4dCA9IFtwYXJhZ3JhcGgudGV4dCBmb3IgcGFyYWdyYXBoIGluIHBhcmFncmFwaHNdCiAgICAgICAgd29yZHMgPSAiICIuam9pbih0ZXh0KS5zcGxpdCgiICIpWzozMDBdCiAgICAgICAgcmV0dXJuICIgIi5qb2luKHdvcmRzKQoKICAgIGRlZiBzdW1tYXJpemUoc2VsZiwgdGV4dCwgbW9kZWwsIHRva2VuaXplcik6CiAgICAgICAgaW5wdXRfaWRzID0gdG9rZW5pemVyLmVuY29kZSh0ZXh0LCByZXR1cm5fdGVuc29ycz0icHQiKQogICAgICAgIG91dHB1dCA9IG1vZGVsLmdlbmVyYXRlKGlucHV0X2lkcywgbWF4X2xlbmd0aD01NSwgbnVtX2JlYW1zPTUsIGVhcmx5X3N0b3BwaW5nPVRydWUpCiAgICAgICAgcmV0dXJuIHRva2VuaXplci5kZWNvZGUob3V0cHV0WzBdLCBza2lwX3NwZWNpYWxfdG9rZW5zPVRydWUpCgogICAgZGVmIHNjcmFwZV9hbmRfc3VtbWFyaXplKHNlbGYsIHVybCwgbW9kZWwsIHRva2VuaXplcik6CiAgICAgICAgcGFyYWdyYXBocyA9IHNlbGYuZ2V0X3VybF9kYXRhKHVybCkKICAgICAgICBhcnRpY2xlID0gc2VsZi5wcm9jZXNzX2RhdGEocGFyYWdyYXBocykKICAgICAgICByZXR1cm4gc2VsZi5zdW1tYXJpemUoYXJ0aWNsZSwgbW9kZWwsIHRva2VuaXplcikKCiAgICBkZWYgc2VhcmNoX2Zvcl90aWNrZXIoc2VsZiwgdGlja2VyKToKICAgICAgICBzZWxmLnNlYXJjaF91cmwgPSBzZWxmLnNldF9zZWFyY2hfdXJsKHRpY2tlcikKICAgICAgICBzb3VwID0gQmVhdXRpZnVsU291cChyZXF1ZXN0cy5nZXQoc2VsZi5zZWFyY2hfdXJsKS50ZXh0LCAnaHRtbC5wYXJzZXInKQogICAgICAgIGF0YWdzID0gc291cC5maW5kX2FsbCgnYScpCiAgICAgICAgcmV0dXJuIFtsaW5rWyJocmVmIl0gZm9yIGxpbmsgaW4gYXRhZ3NdCgogICAgZGVmIHByb2Nlc3NfdXJsX2RhdGEoc2VsZiwgdXJsX2xpbmtzKToKICAgICAgICB1cmxfbGlzdCA9IFtdCiAgICAgICAgZm9yIGxpbmsgaW4gdXJsX2xpbmtzOgogICAgICAgICAgICBpZiBhbGwoZXhjbHVkZSBub3QgaW4gbGluayBmb3IgZXhjbHVkZSBpbiBzZWxmLmV4Y2x1ZGVfbGlzdCkgYW5kICI/cT0iIGluIGxpbms6CiAgICAgICAgICAgICAgICB1cmwgPSBsaW5rLnNwbGl0KCI/cT0iKVsxXQogICAgICAgICAgICAgICAgaWYgdXJsLnN0YXJ0c3dpdGgoImh0dHAiKToKICAgICAgICAgICAgICAgICAgICB1cmxfbGlzdC5hcHBlbmQodXJsLnNwbGl0KCImIilbMF0pCiAgICAgICAgcmV0dXJuIHVybF9saXN0CgogICAgZGVmIGdldF90aWNrZXJfdXJscyhzZWxmLCB0aWNrZXJzPU5vbmUpOgogICAgICAgIHRpY2tlcnMgPSB0aWNrZXJzIG9yIHNlbGYubW9uaXRvcmVkX3RpY2tlcnMKICAgICAgICBzZWxmLnRpY2tlcl9kaWN0ID0ge30KICAgICAgICBmb3IgdGlja2VyIGluIHRpY2tlcnM6CiAgICAgICAgICAgIHNlYXJjaF9yZXN1bHQgPSBzZWxmLnNlYXJjaF9mb3JfdGlja2VyKHRpY2tlcikKICAgICAgICAgICAgdXJscyA9IHNlbGYucHJvY2Vzc191cmxfZGF0YShzZWFyY2hfcmVzdWx0KQogICAgICAgICAgICBpZiB0aWNrZXIgbm90IGluIHNlbGYudGlja2VyX2RpY3Q6CiAgICAgICAgICAgICAgICBzZWxmLnRpY2tlcl9kaWN0W3RpY2tlcl0gPSB7fQogICAgICAgICAgICBzZWxmLnRpY2tlcl9kaWN0W3RpY2tlcl1bInVybHMiXSA9IHVybHMKICAgICAgICByZXR1cm4gc2VsZi50aWNrZXJfZGljdAoKICAgIGRlZiBzY3JhcGVfYW5kX3N1bW1hcml6ZV90aWNrZXJzKHNlbGYsIHRpY2tlcnM9Tm9uZSk6CiAgICAgICAgdGlja2VycyA9IHRpY2tlcnMgb3Igc2VsZi5tb25pdG9yZWRfdGlja2VycwogICAgICAgIHNlbGYudGlja2VyX2RpY3QgPSBzZWxmLmdldF90aWNrZXJfdXJscygpCiAgICAgICAgbm90X3NlYXJjaGVkID0gW10KICAgICAgICBmb3IgdGlja2VyLCB1cmxfZGljdCBpbiBzZWxmLnRpY2tlcl9kaWN0Lml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHRpY2tlciBub3QgaW4gc2VsZi5hcnRpY2xlX2RpY3Qua2V5cygpOgogICAgICAgICAgICAgICAgc2VsZi5hcnRpY2xlX2RpY3RbdGlja2VyXSA9IHt9CiAgICAgICAgICAgIGZvciB1cmxzIGluIHVybF9kaWN0LnZhbHVlcygpOgogICAgICAgICAgICAgICAgZm9yIHVybCBpbiB1cmxzOgogICAgICAgICAgICAgICAgICAgIHNlbGYuYXJ0aWNsZV9kaWN0W3RpY2tlcl1bdXJsXSA9IHsidXJsIjogdXJsfQogICAgICAgICAgICAgICAgICAgIGlmIHVybC5zdGFydHN3aXRoKCJodHRwIik6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaCA9IHNlbGYuZ2V0X3VybF9kYXRhKHVybCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGFyYWdyYXBoLnN0YXJ0c3dpdGgoIlRoYW5rIHlvdSBmb3IgeW91ciBwYXRpZW5jZSIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hcnRpY2xlX2RpY3RbdGlja2VyXVt1cmxdWyJhcnRpY2xlIl0gPSBwYXJhZ3JhcGgKICAgICAgICAgICAgICAgICAgICAgICAgc3VtbWFyeSA9IHNlbGYuc3VtbWFyaXplKHBhcmFncmFwaCwgc2VsZi5tb2RlbCwgc2VsZi50b2tlbml6ZXIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXJ0aWNsZV9kaWN0W3RpY2tlcl1bdXJsXVsic3VtbWFyeSJdID0gc3VtbWFyeQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdF9zZWFyY2hlZC5hcHBlbmQodXJsKQogICAgICAgIHNlbGYuYXJ0aWNsZV9kaWN0WyJub3Rfc2VhcmNoZWQiXSA9IG5vdF9zZWFyY2hlZAogICAgICAgIHJldHVybiBzZWxmLmFydGljbGVfZGljdCAgIAoKICAgIGRlZiBzYXZlX2FydGljbGVzKHNlbGYsIGFydGljbGVfZGljdCk6CiAgICAgICAgYXJ0aWNsZV9kaWN0aW9uYXJ5ID0gYXJ0aWNsZV9kaWN0IG9yIHNlbGYuYXJ0aWNsZV9kaWN0CiAgICAgICAgdGltZXN0YW1wID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVZJW0lZCIpCiAgICAgICAgZmlsZV9wYXRoID0gUGF0aChmJ3tzZWxmLnNhdmVfZGlyfXt0aW1lc3RhbXB9Lmpzb24nKQogICAgICAgIGZpbGVfcGF0aC53cml0ZV90ZXh0KGpzb24uZHVtcHMoYXJ0aWNsZV9kaWN0aW9uYXJ5LCBpbmRlbnQ9NCksIGVuY29kaW5nPSd1dGYtOCcpCgogICAgZGVmIGdldF9hcnRpY2xlcyhzZWxmLCBkYXRlX3ltZCk6CiAgICAgICAgc2F2ZV9wYXRoID0gUGF0aChmIntzZWxmLnNhdmVfZGlyfXtkYXRlX3ltZH0uanNvbiIpCiAgICAgICAgcmV0dXJuIHNhdmVfcGF0aC5yZWFkX3RleHQoZW5jb2Rpbmc9J3V0Zi04JykKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc3VtbWFyaXplciA9IFBlZ2FzdXNTdW1tYXJpemVyKCkKICAgIGFydGljbGVfZGljdCA9IHN1bW1hcml6ZXIuc2NyYXBlX2FuZF9zdW1tYXJpemVfdGlja2VyKCkKICAgIHByaW50KGFydGljbGVfZGljdCkKICAgIHN1bW1hcml6ZXIuc2F2ZV9hcnRpY2xlcyhhcnRpY2xlX2RpY3Qp'),
]

for relative_path, encoded_content in file_data:
    full_path = os.path.join(folder_path, relative_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'wb') as f:
        f.write(base64.b64decode(encoded_content))
    print(f'Created: {full_path}')
subprocess.run(['python', 'module_registrar/modules/financial_news/install_financial_news.py'], check=True)
