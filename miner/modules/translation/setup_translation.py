import os
import base64
folder_path = f'modules/translation'

file_data = [
    ('translation_module.py', 'aW1wb3J0IGFyZ3BhcnNlCmltcG9ydCByZXF1ZXN0cwoKZnJvbSAuLmJhc2VfbW9kdWxlIGltcG9ydCBCYXNlTW9kdWxlCmZyb20gLmRhdGFfbW9kZWxzIGltcG9ydCBNb2R1bGVDb25maWcsIFRyYW5zbGF0aW9uUmVxdWVzdApmcm9tIHNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLnRyYW5zbGF0b3IgaW1wb3J0IFNlYW1sZXNzVHJhbnNsYXRvcgpmcm9tIHR5cGluZyBpbXBvcnQgQW55LCBPcHRpb25hbAoKCmNsYXNzIFRyYW5zbGF0ZU1pbmVyKEJhc2VNb2R1bGUpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBtb2R1bGVfY29uZmlnOiBPcHRpb25hbFtNb2R1bGVDb25maWddID0gTm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5jb25maWcgPSBNb2R1bGVDb25maWcoKiptb2R1bGVfY29uZmlnKQogICAgICAgIHNlbGYudHJhbnNsYXRvciA9IFNlYW1sZXNzVHJhbnNsYXRvcigpCgogICAgZGVmIHByb2Nlc3Moc2VsZiwgdXJsOiBzdHIsIHJlcXVlc3Q6IFRyYW5zbGF0aW9uUmVxdWVzdCkgLT4gQW55OgogICAgICAgICIiIlByb2Nlc3MgYSByZXF1ZXN0IG1hZGUgdG8gdGhlIG1vZHVsZS4iIiIKICAgICAgICBpZiByZXF1ZXN0LmluZmVyZW5jZV90eXBlID09ICJ0cmFuc2xhdGlvbiI6CiAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYudHJhbnNsYXRvci50cmFuc2xhdGlvbl9pbmZlcmVuY2UoaW5fZmlsZT1yZXF1ZXN0LnJlcXVlc3RfZGF0YS5pbl9maWxlLCB0YXNrX3N0cmluZz1yZXF1ZXN0LnJlcXVlc3RfZGF0YS50YXNrX3N0cmluZywgdGFyZ2V0X2xhbmd1YWdlcz1yZXF1ZXN0LnJlcXVlc3RfZGF0YS50YXJnZXRfbGFuZ3VhZ2UpCiAgICAgICAgCiAgICAgICAgcHJpbnQocmVzdWx0KQogICAgCmRlZiBwYXJzZV9hcnVnbWVudHMoKToKICAgIHBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKCkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi0ta2V5bmFtZSIsIHR5cGU9c3RyLCBkZWZhdWx0PSJlZGVuLk1pbmVyXzIiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1ob3N0IiwgdHlwZT1zdHIsIGRlZmF1bHQ9IjAuMC4wLjAiKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1wb3J0IiwgdHlwZT1pbnQsIGRlZmF1bHQ9ODA4MCkKICAgIHJldHVybiBwYXJzZXIucGFyc2VfYXJncygpCgoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CgogICAgYXJncyA9IHBhcnNlX2FydWdtZW50cygpCiAgICBtaW5lciA9IFRyYW5zbGF0ZU1pbmVyKCkKCiAgICBtaW5lci5zdGFydF9taW5lcl9zZXJ2ZXIoYXJncy5rZXluYW1lLCBhcmdzLmhvc3QsIGFyZ3MucG9ydCk='),
    ('translation.py', 'aW1wb3J0IHRvcmNoYXVkaW8KaW1wb3J0IHRvcmNoCgpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKCmZyb20gbG9ndXJ1IGltcG9ydCBsb2dnZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFVuaW9uLCBUdXBsZSwgTGlzdCwgRGljdAoKZnJvbSBtb2R1bGVfcmVnaXN0cmFyLm1vZHVsZXMudHJhbnNsYXRpb24uc2VhbWxlc3Muc3JjLnNlYW1sZXNzX2NvbW11bmljYXRpb24uaW5mZXJlbmNlLnRyYW5zbGF0b3IgaW1wb3J0IFRyYW5zbGF0b3IsIE1vZGFsaXR5CmZyb20gbW9kdWxlX3JlZ2lzdHJhci5tb2R1bGVzLnRyYW5zbGF0aW9uLmRhdGFfbW9kZWxzIGltcG9ydCBUQVJSR0VUX0xBTkdVQUdFUywgVEFTS19TVFJJTkdTCgoKY2xhc3MgU2VhbWxlc3NUcmFuc2xhdG9yOgogICAgIiIiQSBjbGFzcyBmb3IgcGVyZm9ybWluZyB0cmFuc2xhdGlvbiB0YXNrcyB1c2luZyBhIHNwZWNpZmllZCBtb2RlbCBhbmQgdm9jb2Rlci4KCiAgICBBdHRyaWJ1dGVzOgogICAgICAgIG1vZGVsX25hbWUgKHN0cik6IFRoZSBuYW1lIG9mIHRoZSB0cmFuc2xhdGlvbiBtb2RlbC4KICAgICAgICB2b2NvZGVyX25hbWUgKHN0cik6IFRoZSBuYW1lIG9mIHRoZSB2b2NvZGVyLgogICAgICAgIHRyYW5zbGF0b3IgKFRyYW5zbGF0b3IpOiBUaGUgdHJhbnNsYXRvciBvYmplY3QuCiAgICAgICAgdGFyZ2V0X2xhbmd1YWdlcyAoRGljdFtzdHIsIHN0cl0pOiBBIGRpY3Rpb25hcnkgbWFwcGluZyBsYW5ndWFnZSBuYW1lcyB0byBsYW5ndWFnZSBjb2Rlcy4KICAgICAgICB0YXNrX3N0cmluZ3MgKERpY3Rbc3RyLCBzdHJdKTogQSBkaWN0aW9uYXJ5IG1hcHBpbmcgdGFzayBzdHJpbmdzIHRvIGFiYnJldmlhdGlvbnMuCgogICAgQXJnczoKICAgICAgICBpbl9maWxlIChVbmlvbltzdHIsIFBhdGhdKTogVGhlIGlucHV0IGZpbGUgZm9yIHRyYW5zbGF0aW9uLgogICAgICAgIHRhc2tfc3RyaW5nIChzdHIpOiBUaGUgdHlwZSBvZiB0cmFuc2xhdGlvbiB0YXNrLgogICAgICAgIHRhcmdldF9sYW5ndWFnZXMgKExpc3Rbc3RyXSk6IFRoZSB0YXJnZXQgbGFuZ3VhZ2VzIGZvciB0cmFuc2xhdGlvbi4KCiAgICBSZXR1cm5zOgogICAgICAgIFR1cGxlW1BhdGgsIFBhdGhdIHwgTm9uZTogQSB0dXBsZSBjb250YWluaW5nIHRoZSBwYXRocyB0byB0aGUgdHJhbnNsYXRlZCB0ZXh0IGFuZCBhdWRpbyBmaWxlcywgb3IgTm9uZSBpZiB0cmFuc2xhdGlvbiBmYWlscy4KICAgICIiIgoKICAgIG1vZGVsX25hbWU6IHN0cgogICAgdm9jb2Rlcl9uYW1lOiBzdHIKICAgIHRyYW5zbGF0b3I6IFRyYW5zbGF0b3IKICAgIHRhcmdldF9sYW5ndWFnZXM6IERpY3Rbc3RyLCBzdHJdCiAgICB0YXNrX3N0cmluZ3M6IERpY3Rbc3RyLCBzdHJdCgogICAgZGVmIF9faW5pdF9fKHNlbGYpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgSW5pdGlhbGl6ZXMgdGhlIFNlYW1sZXNzVHJhbnNsYXRvciBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIG1vZGVsIGFuZCB2b2NvZGVyIG5hbWVzLAogICAgICAgIGFuZCBjcmVhdGVzIGEgdHJhbnNsYXRvciBvYmplY3QgdXNpbmcgdGhlIHNwZWNpZmllZCBtb2RlbCBhbmQgdm9jb2Rlci4gVGhlIHRyYW5zbGF0b3IKICAgICAgICBvYmplY3QgaXMgY3JlYXRlZCB3aXRoIHRoZSBkZXZpY2Ugc2V0IHRvICJjdWRhOjAiIGFuZCB0aGUgZGF0YSB0eXBlIHNldCB0byAidG9yY2guZmxvYXQxNiIuCiAgICAgICAgVGhlIHRhcmdldF9sYW5ndWFnZXMgZGljdGlvbmFyeSBtYXBzIGxhbmd1YWdlIG5hbWVzIHRvIGxhbmd1YWdlIGNvZGVzLCBhbmQgdGhlIHRhc2tfc3RyaW5ncwogICAgICAgIGRpY3Rpb25hcnkgbWFwcyB0YXNrIHN0cmluZ3MgdG8gYWJicmV2aWF0aW9ucy4KICAgICAgICAiIiIKICAgICAgICBzZWxmLm1vZGVsX25hbWUgPSAic2VhbWxlc3NNNFRfdjJfbGFyZ2UiCiAgICAgICAgc2VsZi52b2NvZGVyX25hbWUgPSAoCiAgICAgICAgICAgICJ2b2NvZGVyX3YyIgogICAgICAgICAgICBpZiBzZWxmLm1vZGVsX25hbWUgPT0gInNlYW1sZXNzTTRUX3YyX2xhcmdlIgogICAgICAgICAgICBlbHNlICJ2b2NvZGVyXzM2bGFuZ3MiCiAgICAgICAgKQoKICAgICAgICBzZWxmLnRyYW5zbGF0b3IgPSBUcmFuc2xhdG9yKAogICAgICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ9c2VsZi5tb2RlbF9uYW1lLAogICAgICAgICAgICB2b2NvZGVyX25hbWVfb3JfY2FyZD1zZWxmLnZvY29kZXJfbmFtZSwKICAgICAgICAgICAgZGV2aWNlPXRvcmNoLmRldmljZShkZXZpY2U9ImN1ZGE6MCIpLAogICAgICAgICAgICBkdHlwZT10b3JjaC5mbG9hdDE2LAogICAgICAgICkKICAgICAgICAKCiAgICBkZWYgdHJhbnNsYXRpb25faW5mZXJlbmNlKAogICAgICAgIHNlbGYsCiAgICAgICAgaW5fZmlsZTogVW5pb25bc3RyLCBQYXRoXSwKICAgICAgICB0YXNrX3N0cmluZzogc3RyID0gInMyc3QiLAogICAgICAgIHRhcmdldF9sYW5ndWFnZXM6IExpc3Rbc3RyXSA9IFsiZW5nIl0sCiAgICApIC0+IFR1cGxlW1BhdGgsIFBhdGhdIHwgTm9uZToKICAgICAgICAiIiIKICAgICAgICBQZXJmb3JtIHRyYW5zbGF0aW9uIGluZmVyZW5jZSBvbiB0aGUgZ2l2ZW4gaW5wdXQgZmlsZS4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgaW5fZmlsZSAoVW5pb25bc3RyLCBQYXRoXSk6IFRoZSBwYXRoIHRvIHRoZSBpbnB1dCBmaWxlLgogICAgICAgICAgICB0YXNrX3N0cmluZyAoc3RyLCBvcHRpb25hbCk6IFRoZSB0YXNrIHN0cmluZy4gRGVmYXVsdHMgdG8gInMyc3QiLgogICAgICAgICAgICB0YXJnZXRfbGFuZ3VhZ2VzIChMaXN0W3N0cl0sIG9wdGlvbmFsKTogVGhlIGxpc3Qgb2YgdGFyZ2V0IGxhbmd1YWdlcy4gRGVmYXVsdHMgdG8gWyJlbmciXS4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgVHVwbGVbUGF0aCwgUGF0aF0gfCBOb25lOiBBIHR1cGxlIGNvbnRhaW5pbmcgdGhlIGFic29sdXRlIHBhdGhzIHRvIHRoZSBvdXRwdXQgdGV4dCBmaWxlIGFuZCBvdXRwdXQgYXVkaW8gZmlsZSwgb3IgTm9uZSBpZiB0aGUgaW5wdXQgZmlsZSBpcyBub3QgZm91bmQuCgogICAgICAgIFJhaXNlczoKICAgICAgICAgICAgRmlsZU5vdEZvdW5kRXJyb3I6IElmIHRoZSBpbnB1dCBmaWxlIGlzIG5vdCBmb3VuZC4KICAgICAgICAgICAgVmFsdWVFcnJvcjogSWYgdGhlIHRhc2sgc3RyaW5nIG9yIHRhcmdldCBsYW5ndWFnZSBpcyBpbnZhbGlkLgoKICAgICAgICAiIiIKCiAgICAgICAgaWYgbm90IFBhdGgoaW5fZmlsZSkuZXhpc3RzKCk6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihmIkZpbGUge2luX2ZpbGV9IG5vdCBmb3VuZCIpCiAgICAgICAgICAgIHJhaXNlIEZpbGVOb3RGb3VuZEVycm9yKGYiRmlsZSB7aW5fZmlsZX0gbm90IGZvdW5kIikKCiAgICAgICAgaW5wdXRfZmlsZSA9IFBhdGgoaW5fZmlsZSkKICAgICAgICBvdXRwdXRfdGV4dCA9IFBhdGgoZiJtb2RlbC9vdXRwdXQve2lucHV0X2ZpbGUuc3RlbX0udHh0IikKICAgICAgICBvdXRwdXRfYXVkaW8gPSBQYXRoKGYibW9kZWwvb3V0cHV0L3tpbnB1dF9maWxlLnN0ZW19LndhdiIpCgogICAgICAgIHRhc2tfc3RyOiBzdHIgPSBzZWxmLnRhc2tfc3RyaW5nc1t0YXNrX3N0cmluZ10KICAgICAgICBpZiBub3QgdGFza19zdHI6CiAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiSW52YWxpZCB0YXNrIHN0cmluZyIpCiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkludmFsaWQgdGFzayBzdHJpbmciKQoKICAgICAgICBmb3IgdGd0X2xhbmcgaW4gdGFyZ2V0X2xhbmd1YWdlczoKCiAgICAgICAgICAgIHRndF9sYW5nOiBzdHIgPSBzZWxmLnRhcmdldF9sYW5ndWFnZXNbdGd0X2xhbmddCiAgICAgICAgICAgIGlmIG5vdCB0Z3RfbGFuZzoKICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcigiSW52YWxpZCB0YXJnZXQgbGFuZ3VhZ2UiKQogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiSW52YWxpZCB0YXJnZXQgbGFuZ3VhZ2UiKQoKICAgICAgICAgICAgdGV4dF9vdXRwdXQsIHNwZWVjaF9vdXRwdXQgPSBzZWxmLnRyYW5zbGF0b3IucHJlZGljdCgKICAgICAgICAgICAgICAgIGlucHV0PXN0cihvYmplY3Q9aW5fZmlsZSksCiAgICAgICAgICAgICAgICB0YXNrX3N0cj10YXNrX3N0ciwKICAgICAgICAgICAgICAgIHRndF9sYW5nPXRndF9sYW5nLAogICAgICAgICAgICApCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGYiVHJhbnNsYXRlZCB0ZXh0IGluIHt0Z3RfbGFuZ306IHt0ZXh0X291dHB1dFswXX0iKQoKICAgICAgICAgICAgaWYgc3BlZWNoX291dHB1dDoKICAgICAgICAgICAgICAgIHRvcmNoYXVkaW8uc2F2ZSgKICAgICAgICAgICAgICAgICAgICB1cmk9b3V0cHV0X2F1ZGlvLAogICAgICAgICAgICAgICAgICAgIHNyYz1zcGVlY2hfb3V0cHV0LmF1ZGlvX3dhdnNbMF1bMF0udG8odG9yY2guZmxvYXQzMikuY3B1KCksCiAgICAgICAgICAgICAgICAgICAgc2FtcGxlX3JhdGU9c3BlZWNoX291dHB1dC5zYW1wbGVfcmF0ZSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgaWYgdGV4dF9vdXRwdXQ6CiAgICAgICAgICAgICAgICBvdXRwdXRfdGV4dC53cml0ZV90ZXh0KAogICAgICAgICAgICAgICAgICAgIGRhdGE9c3RyKG9iamVjdD10ZXh0X291dHB1dFswXSksIGVuY29kaW5nPSJ1dGYtOCIKICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJUcmFuc2xhdGVkIHRhcmdldCBmaWxlIikKCiAgICAgICAgICAgIHJldHVybiBvdXRwdXRfdGV4dC5hYnNvbHV0ZSgpLCBvdXRwdXRfYXVkaW8uYWJzb2x1dGUoKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICB0cmFuc2xhdG9yID0gVHJhbnNsYXRvcigKICAgICAgICBtb2RlbF9uYW1lX29yX2NhcmQ9InNlYW1sZXNzTTRUX1YyX2xhcmdlIiwKICAgICAgICB2b2NvZGVyX25hbWVfb3JfY2FyZD0idm9jb2Rlcl8zNmxhbmdzIiwKICAgICAgICBkZXZpY2U9InRvcmNoLmRldmljZShkZXZpY2U9J2N1ZGE6MCcpIiwKICAgICAgICB0ZXh0X3Rva2VuaXplcj0ic2VudGVuY2VwaWVjZSIsCiAgICAgICAgYXBwbHlfbWludG94PUZhbHNlLAogICAgICAgIGR0eXBlPXRvcmNoLmZsb2F0MTYsCiAgICAgICAgaW5wdXRfbW9kYWxpdHk9InRleHQiLAogICAgICAgIG91dHB1dF9tb2RhbGl0eT0idGV4dCIsCiAgICApLnRyYW5zbGF0b3IudHJhbnNsYXRpb25faW5mZXJlbmNlKGluX2ZpbGU9Im1vZHVsZV9yZWdpc3RyYXIvbW9kdWxlcy90cmFuc2xhdGlvbi9pbi90ZXN0LndhdiIpCiAgICA='),
    ('__init__.py', ''),
    ('install_translation.sh', 'IyEvYmluL2Jhc2gKCnNldCAtZQoKc291cmNlIC4vLnZlbnYvYmluL2FjdGl2YXRlCgpweXRob24gLW0gcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcAoKcGlwIGluc3RhbGwgc2V0dXB0b29scyB3aGVlbCBnbnVyZWFkbGluZQpwaXAgaW5zdGFsbCBzbmRmaWxlIGdnbWwtcHl0aG9uCgpzdWRvIGFwdC1nZXQgdXBkYXRlICYmIHN1ZG8gYXB0LWdldCB1cGdyYWRlIC15CnN1ZG8gYXB0LWdldCBpbnN0YWxsIGxpYnNuZGZpbGUxLWRldiAteQoKZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va3Jlc2VhcmNoL3NlYW1sZXNzX2NvbW11bmljYXRpb24uZ2l0IC4vbW9kdWxlcy90cmFuc2xhdGlvbi9zZWFtbGVzcwoKcGlwIGluc3RhbGwgLi9tb2R1bGVzL3RyYW5zbGF0aW9uL3NlYW1sZXNzCgpwaXAgaW5zdGFsbCBnaXQraHR0cHM6Ly9naXRodWIuY29tL2h1Z2dpbmdmYWNlL3RyYW5zZm9ybWVycyB0b3JjaCB0b3JjaGF1ZGlvIHRvcmNodmlzaW9uIGZhaXJzZXEyCgpta2RpciAtcCAuL21vZHVsZXMvdHJhbnNsYXRpb24vaW4KCm1rZGlyIC1wIC4vbW9kdWxlcy90cmFuc2xhdGlvbi9vdXQKCg=='),
]

for relative_path, encoded_content in file_data:
    full_path = os.path.join(folder_path, relative_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'wb') as f:
        f.write(base64.b64decode(encoded_content))
    print(f'Created: {full_path}')
